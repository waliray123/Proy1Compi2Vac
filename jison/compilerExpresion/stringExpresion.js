/* parser generated by jison 0.4.18 */
/*
  Returns a Parser object of the following structure:

  Parser: {
    yy: {}
  }

  Parser.prototype: {
    yy: {},
    trace: function(),
    symbols_: {associative list: name ==> number},
    terminals_: {associative list: number ==> name},
    productions_: [...],
    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),
    table: [...],
    defaultActions: {...},
    parseError: function(str, hash),
    parse: function(input),

    lexer: {
        EOF: 1,
        parseError: function(str, hash),
        setInput: function(input),
        input: function(),
        unput: function(str),
        more: function(),
        less: function(n),
        pastInput: function(),
        upcomingInput: function(),
        showPosition: function(),
        test_match: function(regex_match_array, rule_index),
        next: function(),
        lex: function(),
        begin: function(condition),
        popState: function(),
        _currentRules: function(),
        topState: function(),
        pushState: function(condition),

        options: {
            ranges: boolean           (optional: true ==> token location info will include a .range[] member)
            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)
            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)
        },

        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),
        rules: [...],
        conditions: {associative list: name ==> set},
    }
  }


  token location info (@$, _$, etc.): {
    first_line: n,
    last_line: n,
    first_column: n,
    last_column: n,
    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)
  }


  the parseError function receives a 'hash' object with these members for lexer and parser errors: {
    text:        (matched text)
    token:       (the produced terminal token, if any)
    line:        (yylineno)
  }
  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {
    loc:         (yylloc)
    expected:    (string describing the set of expected tokens)
    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)
  }
*/
var stringExpresion = (function(){
var o=function(k,v,o,l){for(o=o||{},l=k.length;l--;o[k[l]]=v);return o},$V0=[1,14],$V1=[1,19],$V2=[1,21],$V3=[1,22],$V4=[1,23],$V5=[1,24],$V6=[1,25],$V7=[1,26],$V8=[1,27],$V9=[1,28],$Va=[1,29],$Vb=[1,30],$Vc=[1,31],$Vd=[1,32],$Ve=[1,33],$Vf=[1,15],$Vg=[1,16],$Vh=[1,17],$Vi=[1,18],$Vj=[1,20],$Vk=[1,51],$Vl=[1,50],$Vm=[1,35],$Vn=[1,36],$Vo=[1,44],$Vp=[1,45],$Vq=[1,46],$Vr=[1,47],$Vs=[1,48],$Vt=[1,49],$Vu=[1,37],$Vv=[1,38],$Vw=[1,39],$Vx=[1,40],$Vy=[1,41],$Vz=[1,42],$VA=[1,43],$VB=[4,18,19,22,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45],$VC=[4,18,19,22,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,47,48],$VD=[4,18,22,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45],$VE=[4,18,22,28,29,30,32],$VF=[4,18,22,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,45],$VG=[4,18,22,28,29,30,31,32,33,34,35,36,37,38,41,42,43],$VH=[4,18,22,28,29,30,31,32,33,34,35,36,37,38];
var parser = {trace: function trace () { },
yy: {},
symbols_: {"error":2,"ini":3,"EOF":4,"expresion":5,"primitivas":6,"logicas":7,"operadores":8,"relacionales":9,"expresion_ternario":10,"incr_decr":11,"nativas":12,"expresion_arr_arreglo":13,"expresion_atributos":14,"otras_nativas":15,"ID_VAR":16,"CORCHI":17,"CORCHD":18,"OP_CALL":19,"LENGTH":20,"PARI":21,"PARD":22,"STR_POP":23,"UPPERCASE":24,"LOWERCASE":25,"CHARPOS":26,"SUBSTRING":27,"COMA":28,"OP_TER":29,"DOSPUNT":30,"OP_AND":31,"OP_OR":32,"OP_DOBIG":33,"OP_DIF":34,"OP_MAYIG":35,"OP_MENIG":36,"OP_MEN":37,"OP_MAY":38,"OP_MULT":39,"OP_DIVI":40,"OP_SUMA":41,"OP_RESTA":42,"OP_AMP":43,"OP_ELV":44,"OP_MOD":45,"OP_NEG":46,"OP_INCR":47,"OP_DECR":48,"STR_POW":49,"STR_SQRT":50,"STR_SIN":51,"STR_COS":52,"STR_TAN":53,"tiposVar":54,"STR_PARSE":55,"STR_TOINT":56,"STR_TODOUBLE":57,"STR_string":58,"STR_TYPEOF":59,"STR_FALSE":60,"STR_TRUE":61,"ENTERO":62,"FLOTANTE":63,"parametros_funcion_return":64,"STR_NULL":65,"$accept":0,"$end":1},
terminals_: {2:"error",4:"EOF",16:"ID_VAR",17:"CORCHI",18:"CORCHD",19:"OP_CALL",20:"LENGTH",21:"PARI",22:"PARD",23:"STR_POP",24:"UPPERCASE",25:"LOWERCASE",26:"CHARPOS",27:"SUBSTRING",28:"COMA",29:"OP_TER",30:"DOSPUNT",31:"OP_AND",32:"OP_OR",33:"OP_DOBIG",34:"OP_DIF",35:"OP_MAYIG",36:"OP_MENIG",37:"OP_MEN",38:"OP_MAY",39:"OP_MULT",40:"OP_DIVI",41:"OP_SUMA",42:"OP_RESTA",43:"OP_AMP",44:"OP_ELV",45:"OP_MOD",46:"OP_NEG",47:"OP_INCR",48:"OP_DECR",49:"STR_POW",50:"STR_SQRT",51:"STR_SIN",52:"STR_COS",53:"STR_TAN",54:"tiposVar",55:"STR_PARSE",56:"STR_TOINT",57:"STR_TODOUBLE",58:"STR_string",59:"STR_TYPEOF",60:"STR_FALSE",61:"STR_TRUE",62:"ENTERO",63:"FLOTANTE",64:"parametros_funcion_return",65:"STR_NULL"},
productions_: [0,[3,1],[3,2],[5,1],[5,1],[5,1],[5,1],[5,1],[5,1],[5,1],[5,1],[5,1],[5,1],[5,1],[13,4],[14,3],[14,5],[14,5],[14,5],[14,5],[14,6],[14,8],[10,5],[7,3],[7,3],[9,3],[9,3],[9,3],[9,3],[9,3],[9,3],[8,3],[8,3],[8,3],[8,3],[8,3],[8,3],[8,3],[8,3],[8,2],[8,2],[11,2],[11,2],[12,6],[12,4],[12,4],[12,4],[12,4],[15,6],[15,4],[15,4],[15,4],[15,4],[6,1],[6,1],[6,1],[6,1],[6,1],[6,4],[6,1]],
performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */) {
/* this == yyval */

var $0 = $$.length - 1;
switch (yystate) {
case 1:
console.log("EOF encontrado");return [];
break;
case 2:
this.$ = $$[$0-1];return this.$;
break;
case 3: case 4: case 5: case 6: case 7: case 8: case 9: case 10: case 11: case 12:
this.$ = $$[$0];
break;
case 14:
this.$ = new AccesoAtribArray($$[$0-3],$$[$0-1],_$[$0-3].first_line, _$[$0-3].first_column);
break;
case 15:
this.$ = new AccesoAtributo($$[$0-2],$$[$0],_$[$0-2].first_line, _$[$0-2].first_column);
break;
case 16:
this.$ = new OperacionCadena($$[$0-4],null,null,OperadorCadena.LENGTH,_$[$0-4].first_line, _$[$0-4].first_column);
break;
case 17:
this.$ = new OperacionCadena($$[$0-4],null,null,OperadorCadena.POP,_$[$0-4].first_line, _$[$0-4].first_column);
break;
case 18:
this.$ = new OperacionCadena($$[$0-4],null,null,OperadorCadena.UPPERCASE,_$[$0-4].first_line, _$[$0-4].first_column);
break;
case 19:
this.$ = new OperacionCadena($$[$0-4],null,null,OperadorCadena.LOWERCASE,_$[$0-4].first_line, _$[$0-4].first_column);
break;
case 20:
this.$ = new OperacionCadena($$[$0-5],$$[$0-1],null,OperadorCadena.CHARPOS,_$[$0-5].first_line, _$[$0-5].first_column);
break;
case 21:
this.$ = new OperacionCadena($$[$0-7],$$[$0-3],$$[$0-1],OperadorCadena.SUBSTRING,_$[$0-7].first_line, _$[$0-7].first_column);
break;
case 22:
this.$ = new Ternario($$[$0-4],$$[$0-2],$$[$0],_$[$0-4].first_line, _$[$0-4].first_column);
break;
case 23:
this.$ = new Operacion($$[$0-2],$$[$0],Operador.AND, _$[$0-2].first_line, _$[$0-2].first_column);
break;
case 24:
this.$ = new Operacion($$[$0-2],$$[$0],Operador.OR, _$[$0-2].first_line, _$[$0-2].first_column);
break;
case 25:
this.$ = new Operacion($$[$0-2],$$[$0],Operador.IGUAL_IGUAL, _$[$0-2].first_line, _$[$0-2].first_column);
break;
case 26:
this.$ = new Operacion($$[$0-2],$$[$0],Operador.DIFERENTE_QUE, _$[$0-2].first_line, _$[$0-2].first_column);
break;
case 27:
this.$ = new Operacion($$[$0-2],$$[$0],Operador.MAYOR_IGUA_QUE, _$[$0-2].first_line, _$[$0-2].first_column);
break;
case 28:
this.$ = new Operacion($$[$0-2],$$[$0],Operador.MENOR_IGUA_QUE, _$[$0-2].first_line, _$[$0-2].first_column);
break;
case 29:
this.$ = new Operacion($$[$0-2],$$[$0],Operador.MENOR_QUE, _$[$0-2].first_line, _$[$0-2].first_column);
break;
case 30:
this.$ = new Operacion($$[$0-2],$$[$0],Operador.MAYOR_QUE, _$[$0-2].first_line, _$[$0-2].first_column);
break;
case 31:
this.$ = new Operacion($$[$0-2],$$[$0],Operador.MULTIPLICACION, _$[$0-2].first_line, _$[$0-2].first_column);
break;
case 32:
this.$ = new Operacion($$[$0-2],$$[$0],Operador.DIVISION, _$[$0-2].first_line, _$[$0-2].first_column);
break;
case 33:
this.$ = new Operacion($$[$0-2],$$[$0],Operador.SUMA, _$[$0-2].first_line, _$[$0-2].first_column);
break;
case 34:
this.$ = new Operacion($$[$0-2],$$[$0],Operador.RESTA, _$[$0-2].first_line, _$[$0-2].first_column);
break;
case 35:
this.$ = new Operacion($$[$0-2],$$[$0],Operador.AMPERSON, _$[$0-2].first_line, _$[$0-2].first_column);
break;
case 36:
this.$ = new Operacion($$[$0-2],$$[$0],Operador.ELEVADO, _$[$0-2].first_line, _$[$0-2].first_column);
break;
case 37:
this.$ = new Operacion($$[$0-2],$$[$0],Operador.MODULO, _$[$0-2].first_line, _$[$0-2].first_column);
break;
case 38:
this.$ = $$[$0-1];
break;
case 39:
this.$ = new Operacion($$[$0],null,Operador.MENOS_UNARIO, _$[$0-1].first_line, _$[$0-1].first_column);
break;
case 40:
this.$ = new Operacion($$[$0],null,Operador.NOT, _$[$0-1].first_line, _$[$0-1].first_column);
break;
case 41:
this.$ = new Operacion($$[$0-1],null,Operador.INCREMENTO, _$[$0-1].first_line, _$[$0-1].first_column);
break;
case 42:
this.$ = new Operacion($$[$0-1],null,Operador.DECREMENTO, _$[$0-1].first_line, _$[$0-1].first_column);
break;
case 43:
this.$ = new Operacion($$[$0-3],$$[$0-1],Operador.POW, _$[$0-5].first_line, _$[$0-5].first_column);
break;
case 44:
this.$ = new Operacion($$[$0-1],null,Operador.SQRT, _$[$0-3].first_line, _$[$0-3].first_column);
break;
case 45:
this.$ = new Operacion($$[$0-1],null,Operador.SIN, _$[$0-3].first_line, _$[$0-3].first_column);
break;
case 46:
this.$ = new Operacion($$[$0-1],null,Operador.COS, _$[$0-3].first_line, _$[$0-3].first_column);
break;
case 47:
this.$ = new Operacion($$[$0-1],null,Operador.TAN, _$[$0-3].first_line, _$[$0-3].first_column);
break;
case 48:
this.$ = new OperacionNativa(OperadorNativa.PARSE,$$[$0-5],$$[$0-1],_$[$0-5].first_line,_$[$0-5].first_column);
break;
case 49:
this.$ = new OperacionNativa(OperadorNativa.TOINT,Tipo.NULL,$$[$0-1],_$[$0-3].first_line,_$[$0-3].first_column);
break;
case 50:
this.$ = new OperacionNativa(OperadorNativa.TODOUBLE,Tipo.NULL,$$[$0-1],_$[$0-3].first_line,_$[$0-3].first_column);
break;
case 51:
this.$ = new OperacionNativa(OperadorNativa.STRING,Tipo.NULL,$$[$0-1],_$[$0-3].first_line,_$[$0-3].first_column);
break;
case 52:
this.$ = new OperacionNativa(OperadorNativa.TYPEOF,Tipo.NULL,$$[$0-1],_$[$0-3].first_line,_$[$0-3].first_column);
break;
case 53:
this.$ = new Primitivo(false, _$[$0].first_line, _$[$0].first_column);
break;
case 54:
this.$ = new Primitivo(true, _$[$0].first_line, _$[$0].first_column);
break;
case 55:
this.$ = new Primitivo(Number($$[$0]), _$[$0].first_line, _$[$0].first_column);
break;
case 56:
let primitivo = new Primitivo(Number($$[$0]), _$[$0].first_line, _$[$0].first_column);primitivo.isFlotante=true;this.$ = primitivo;
break;
case 57:
this.$ = new AccesoVariable($$[$0], _$[$0].first_line, _$[$0].first_column);
break;
case 58:
this.$ = new FuncionReturn($$[$0-3],_$[$0-3].first_line,_$[$0-3].first_column,$$[$0-1]);
break;
case 59:
this.$ = new Primitivo(null, _$[$0].first_line, _$[$0].first_column);
break;
}
},
table: [{2:$V0,3:1,4:[1,2],5:3,6:4,7:5,8:6,9:7,10:8,11:9,12:10,13:11,14:12,15:13,16:$V1,21:$V2,42:$V3,46:$V4,49:$V5,50:$V6,51:$V7,52:$V8,53:$V9,54:$Va,56:$Vb,57:$Vc,58:$Vd,59:$Ve,60:$Vf,61:$Vg,62:$Vh,63:$Vi,65:$Vj},{1:[3]},{1:[2,1]},{4:[1,34],19:$Vk,29:$Vl,31:$Vm,32:$Vn,33:$Vo,34:$Vp,35:$Vq,36:$Vr,37:$Vs,38:$Vt,39:$Vu,40:$Vv,41:$Vw,42:$Vx,43:$Vy,44:$Vz,45:$VA},o($VB,[2,3],{47:[1,52],48:[1,53]}),o($VB,[2,4]),o($VB,[2,5]),o($VB,[2,6]),o($VB,[2,7]),o($VB,[2,8]),o($VB,[2,9]),o($VB,[2,10]),o($VB,[2,11]),o($VB,[2,12]),o($VB,[2,13]),o($VC,[2,53]),o($VC,[2,54]),o($VC,[2,55]),o($VC,[2,56]),o($VC,[2,57],{17:[1,55],21:[1,54]}),o($VC,[2,59]),{2:$V0,5:56,6:4,7:5,8:6,9:7,10:8,11:9,12:10,13:11,14:12,15:13,16:$V1,21:$V2,42:$V3,46:$V4,49:$V5,50:$V6,51:$V7,52:$V8,53:$V9,54:$Va,56:$Vb,57:$Vc,58:$Vd,59:$Ve,60:$Vf,61:$Vg,62:$Vh,63:$Vi,65:$Vj},{2:$V0,5:57,6:4,7:5,8:6,9:7,10:8,11:9,12:10,13:11,14:12,15:13,16:$V1,21:$V2,42:$V3,46:$V4,49:$V5,50:$V6,51:$V7,52:$V8,53:$V9,54:$Va,56:$Vb,57:$Vc,58:$Vd,59:$Ve,60:$Vf,61:$Vg,62:$Vh,63:$Vi,65:$Vj},{2:$V0,5:58,6:4,7:5,8:6,9:7,10:8,11:9,12:10,13:11,14:12,15:13,16:$V1,21:$V2,42:$V3,46:$V4,49:$V5,50:$V6,51:$V7,52:$V8,53:$V9,54:$Va,56:$Vb,57:$Vc,58:$Vd,59:$Ve,60:$Vf,61:$Vg,62:$Vh,63:$Vi,65:$Vj},{21:[1,59]},{21:[1,60]},{21:[1,61]},{21:[1,62]},{21:[1,63]},{19:[1,64]},{21:[1,65]},{21:[1,66]},{21:[1,67]},{21:[1,68]},{1:[2,2]},{2:$V0,5:69,6:4,7:5,8:6,9:7,10:8,11:9,12:10,13:11,14:12,15:13,16:$V1,21:$V2,42:$V3,46:$V4,49:$V5,50:$V6,51:$V7,52:$V8,53:$V9,54:$Va,56:$Vb,57:$Vc,58:$Vd,59:$Ve,60:$Vf,61:$Vg,62:$Vh,63:$Vi,65:$Vj},{2:$V0,5:70,6:4,7:5,8:6,9:7,10:8,11:9,12:10,13:11,14:12,15:13,16:$V1,21:$V2,42:$V3,46:$V4,49:$V5,50:$V6,51:$V7,52:$V8,53:$V9,54:$Va,56:$Vb,57:$Vc,58:$Vd,59:$Ve,60:$Vf,61:$Vg,62:$Vh,63:$Vi,65:$Vj},{2:$V0,5:71,6:4,7:5,8:6,9:7,10:8,11:9,12:10,13:11,14:12,15:13,16:$V1,21:$V2,42:$V3,46:$V4,49:$V5,50:$V6,51:$V7,52:$V8,53:$V9,54:$Va,56:$Vb,57:$Vc,58:$Vd,59:$Ve,60:$Vf,61:$Vg,62:$Vh,63:$Vi,65:$Vj},{2:$V0,5:72,6:4,7:5,8:6,9:7,10:8,11:9,12:10,13:11,14:12,15:13,16:$V1,21:$V2,42:$V3,46:$V4,49:$V5,50:$V6,51:$V7,52:$V8,53:$V9,54:$Va,56:$Vb,57:$Vc,58:$Vd,59:$Ve,60:$Vf,61:$Vg,62:$Vh,63:$Vi,65:$Vj},{2:$V0,5:73,6:4,7:5,8:6,9:7,10:8,11:9,12:10,13:11,14:12,15:13,16:$V1,21:$V2,42:$V3,46:$V4,49:$V5,50:$V6,51:$V7,52:$V8,53:$V9,54:$Va,56:$Vb,57:$Vc,58:$Vd,59:$Ve,60:$Vf,61:$Vg,62:$Vh,63:$Vi,65:$Vj},{2:$V0,5:74,6:4,7:5,8:6,9:7,10:8,11:9,12:10,13:11,14:12,15:13,16:$V1,21:$V2,42:$V3,46:$V4,49:$V5,50:$V6,51:$V7,52:$V8,53:$V9,54:$Va,56:$Vb,57:$Vc,58:$Vd,59:$Ve,60:$Vf,61:$Vg,62:$Vh,63:$Vi,65:$Vj},{2:$V0,5:75,6:4,7:5,8:6,9:7,10:8,11:9,12:10,13:11,14:12,15:13,16:$V1,21:$V2,42:$V3,46:$V4,49:$V5,50:$V6,51:$V7,52:$V8,53:$V9,54:$Va,56:$Vb,57:$Vc,58:$Vd,59:$Ve,60:$Vf,61:$Vg,62:$Vh,63:$Vi,65:$Vj},{2:$V0,5:76,6:4,7:5,8:6,9:7,10:8,11:9,12:10,13:11,14:12,15:13,16:$V1,21:$V2,42:$V3,46:$V4,49:$V5,50:$V6,51:$V7,52:$V8,53:$V9,54:$Va,56:$Vb,57:$Vc,58:$Vd,59:$Ve,60:$Vf,61:$Vg,62:$Vh,63:$Vi,65:$Vj},{2:$V0,5:77,6:4,7:5,8:6,9:7,10:8,11:9,12:10,13:11,14:12,15:13,16:$V1,21:$V2,42:$V3,46:$V4,49:$V5,50:$V6,51:$V7,52:$V8,53:$V9,54:$Va,56:$Vb,57:$Vc,58:$Vd,59:$Ve,60:$Vf,61:$Vg,62:$Vh,63:$Vi,65:$Vj},{2:$V0,5:78,6:4,7:5,8:6,9:7,10:8,11:9,12:10,13:11,14:12,15:13,16:$V1,21:$V2,42:$V3,46:$V4,49:$V5,50:$V6,51:$V7,52:$V8,53:$V9,54:$Va,56:$Vb,57:$Vc,58:$Vd,59:$Ve,60:$Vf,61:$Vg,62:$Vh,63:$Vi,65:$Vj},{2:$V0,5:79,6:4,7:5,8:6,9:7,10:8,11:9,12:10,13:11,14:12,15:13,16:$V1,21:$V2,42:$V3,46:$V4,49:$V5,50:$V6,51:$V7,52:$V8,53:$V9,54:$Va,56:$Vb,57:$Vc,58:$Vd,59:$Ve,60:$Vf,61:$Vg,62:$Vh,63:$Vi,65:$Vj},{2:$V0,5:80,6:4,7:5,8:6,9:7,10:8,11:9,12:10,13:11,14:12,15:13,16:$V1,21:$V2,42:$V3,46:$V4,49:$V5,50:$V6,51:$V7,52:$V8,53:$V9,54:$Va,56:$Vb,57:$Vc,58:$Vd,59:$Ve,60:$Vf,61:$Vg,62:$Vh,63:$Vi,65:$Vj},{2:$V0,5:81,6:4,7:5,8:6,9:7,10:8,11:9,12:10,13:11,14:12,15:13,16:$V1,21:$V2,42:$V3,46:$V4,49:$V5,50:$V6,51:$V7,52:$V8,53:$V9,54:$Va,56:$Vb,57:$Vc,58:$Vd,59:$Ve,60:$Vf,61:$Vg,62:$Vh,63:$Vi,65:$Vj},{2:$V0,5:82,6:4,7:5,8:6,9:7,10:8,11:9,12:10,13:11,14:12,15:13,16:$V1,21:$V2,42:$V3,46:$V4,49:$V5,50:$V6,51:$V7,52:$V8,53:$V9,54:$Va,56:$Vb,57:$Vc,58:$Vd,59:$Ve,60:$Vf,61:$Vg,62:$Vh,63:$Vi,65:$Vj},{2:$V0,5:83,6:4,7:5,8:6,9:7,10:8,11:9,12:10,13:11,14:12,15:13,16:$V1,21:$V2,42:$V3,46:$V4,49:$V5,50:$V6,51:$V7,52:$V8,53:$V9,54:$Va,56:$Vb,57:$Vc,58:$Vd,59:$Ve,60:$Vf,61:$Vg,62:$Vh,63:$Vi,65:$Vj},{2:$V0,5:84,6:4,7:5,8:6,9:7,10:8,11:9,12:10,13:11,14:12,15:13,16:$V1,21:$V2,42:$V3,46:$V4,49:$V5,50:$V6,51:$V7,52:$V8,53:$V9,54:$Va,56:$Vb,57:$Vc,58:$Vd,59:$Ve,60:$Vf,61:$Vg,62:$Vh,63:$Vi,65:$Vj},{16:[1,85],20:[1,86],23:[1,87],24:[1,88],25:[1,89],26:[1,90],27:[1,91]},o($VB,[2,41]),o($VB,[2,42]),{64:[1,92]},{2:$V0,5:93,6:4,7:5,8:6,9:7,10:8,11:9,12:10,13:11,14:12,15:13,16:$V1,21:$V2,42:$V3,46:$V4,49:$V5,50:$V6,51:$V7,52:$V8,53:$V9,54:$Va,56:$Vb,57:$Vc,58:$Vd,59:$Ve,60:$Vf,61:$Vg,62:$Vh,63:$Vi,65:$Vj},{19:$Vk,22:[1,94],29:$Vl,31:$Vm,32:$Vn,33:$Vo,34:$Vp,35:$Vq,36:$Vr,37:$Vs,38:$Vt,39:$Vu,40:$Vv,41:$Vw,42:$Vx,43:$Vy,44:$Vz,45:$VA},o($VD,[2,39],{19:$Vk}),o($VD,[2,40],{19:$Vk}),{2:$V0,5:95,6:4,7:5,8:6,9:7,10:8,11:9,12:10,13:11,14:12,15:13,16:$V1,21:$V2,42:$V3,46:$V4,49:$V5,50:$V6,51:$V7,52:$V8,53:$V9,54:$Va,56:$Vb,57:$Vc,58:$Vd,59:$Ve,60:$Vf,61:$Vg,62:$Vh,63:$Vi,65:$Vj},{2:$V0,5:96,6:4,7:5,8:6,9:7,10:8,11:9,12:10,13:11,14:12,15:13,16:$V1,21:$V2,42:$V3,46:$V4,49:$V5,50:$V6,51:$V7,52:$V8,53:$V9,54:$Va,56:$Vb,57:$Vc,58:$Vd,59:$Ve,60:$Vf,61:$Vg,62:$Vh,63:$Vi,65:$Vj},{2:$V0,5:97,6:4,7:5,8:6,9:7,10:8,11:9,12:10,13:11,14:12,15:13,16:$V1,21:$V2,42:$V3,46:$V4,49:$V5,50:$V6,51:$V7,52:$V8,53:$V9,54:$Va,56:$Vb,57:$Vc,58:$Vd,59:$Ve,60:$Vf,61:$Vg,62:$Vh,63:$Vi,65:$Vj},{2:$V0,5:98,6:4,7:5,8:6,9:7,10:8,11:9,12:10,13:11,14:12,15:13,16:$V1,21:$V2,42:$V3,46:$V4,49:$V5,50:$V6,51:$V7,52:$V8,53:$V9,54:$Va,56:$Vb,57:$Vc,58:$Vd,59:$Ve,60:$Vf,61:$Vg,62:$Vh,63:$Vi,65:$Vj},{2:$V0,5:99,6:4,7:5,8:6,9:7,10:8,11:9,12:10,13:11,14:12,15:13,16:$V1,21:$V2,42:$V3,46:$V4,49:$V5,50:$V6,51:$V7,52:$V8,53:$V9,54:$Va,56:$Vb,57:$Vc,58:$Vd,59:$Ve,60:$Vf,61:$Vg,62:$Vh,63:$Vi,65:$Vj},{55:[1,100]},{2:$V0,5:101,6:4,7:5,8:6,9:7,10:8,11:9,12:10,13:11,14:12,15:13,16:$V1,21:$V2,42:$V3,46:$V4,49:$V5,50:$V6,51:$V7,52:$V8,53:$V9,54:$Va,56:$Vb,57:$Vc,58:$Vd,59:$Ve,60:$Vf,61:$Vg,62:$Vh,63:$Vi,65:$Vj},{2:$V0,5:102,6:4,7:5,8:6,9:7,10:8,11:9,12:10,13:11,14:12,15:13,16:$V1,21:$V2,42:$V3,46:$V4,49:$V5,50:$V6,51:$V7,52:$V8,53:$V9,54:$Va,56:$Vb,57:$Vc,58:$Vd,59:$Ve,60:$Vf,61:$Vg,62:$Vh,63:$Vi,65:$Vj},{2:$V0,5:103,6:4,7:5,8:6,9:7,10:8,11:9,12:10,13:11,14:12,15:13,16:$V1,21:$V2,42:$V3,46:$V4,49:$V5,50:$V6,51:$V7,52:$V8,53:$V9,54:$Va,56:$Vb,57:$Vc,58:$Vd,59:$Ve,60:$Vf,61:$Vg,62:$Vh,63:$Vi,65:$Vj},{2:$V0,5:104,6:4,7:5,8:6,9:7,10:8,11:9,12:10,13:11,14:12,15:13,16:$V1,21:$V2,42:$V3,46:$V4,49:$V5,50:$V6,51:$V7,52:$V8,53:$V9,54:$Va,56:$Vb,57:$Vc,58:$Vd,59:$Ve,60:$Vf,61:$Vg,62:$Vh,63:$Vi,65:$Vj},o([4,18,22,28,29,30,31,32],[2,23],{19:$Vk,33:$Vo,34:$Vp,35:$Vq,36:$Vr,37:$Vs,38:$Vt,39:$Vu,40:$Vv,41:$Vw,42:$Vx,43:$Vy,44:$Vz,45:$VA}),o($VE,[2,24],{19:$Vk,31:$Vm,33:$Vo,34:$Vp,35:$Vq,36:$Vr,37:$Vs,38:$Vt,39:$Vu,40:$Vv,41:$Vw,42:$Vx,43:$Vy,44:$Vz,45:$VA}),o($VF,[2,31],{19:$Vk,44:$Vz}),o($VF,[2,32],{19:$Vk,44:$Vz}),o($VG,[2,33],{19:$Vk,39:$Vu,40:$Vv,44:$Vz,45:$VA}),o($VG,[2,34],{19:$Vk,39:$Vu,40:$Vv,44:$Vz,45:$VA}),o($VG,[2,35],{19:$Vk,39:$Vu,40:$Vv,44:$Vz,45:$VA}),o($VD,[2,36],{19:$Vk}),o($VF,[2,37],{19:$Vk,44:$Vz}),o($VH,[2,25],{19:$Vk,39:$Vu,40:$Vv,41:$Vw,42:$Vx,43:$Vy,44:$Vz,45:$VA}),o($VH,[2,26],{19:$Vk,39:$Vu,40:$Vv,41:$Vw,42:$Vx,43:$Vy,44:$Vz,45:$VA}),o($VH,[2,27],{19:$Vk,39:$Vu,40:$Vv,41:$Vw,42:$Vx,43:$Vy,44:$Vz,45:$VA}),o($VH,[2,28],{19:$Vk,39:$Vu,40:$Vv,41:$Vw,42:$Vx,43:$Vy,44:$Vz,45:$VA}),o($VH,[2,29],{19:$Vk,39:$Vu,40:$Vv,41:$Vw,42:$Vx,43:$Vy,44:$Vz,45:$VA}),o($VH,[2,30],{19:$Vk,39:$Vu,40:$Vv,41:$Vw,42:$Vx,43:$Vy,44:$Vz,45:$VA}),{19:$Vk,29:$Vl,30:[1,105],31:$Vm,32:$Vn,33:$Vo,34:$Vp,35:$Vq,36:$Vr,37:$Vs,38:$Vt,39:$Vu,40:$Vv,41:$Vw,42:$Vx,43:$Vy,44:$Vz,45:$VA},o($VB,[2,15]),{21:[1,106]},{21:[1,107]},{21:[1,108]},{21:[1,109]},{21:[1,110]},{21:[1,111]},{22:[1,112]},{18:[1,113],19:$Vk,29:$Vl,31:$Vm,32:$Vn,33:$Vo,34:$Vp,35:$Vq,36:$Vr,37:$Vs,38:$Vt,39:$Vu,40:$Vv,41:$Vw,42:$Vx,43:$Vy,44:$Vz,45:$VA},o($VB,[2,38]),{19:$Vk,28:[1,114],29:$Vl,31:$Vm,32:$Vn,33:$Vo,34:$Vp,35:$Vq,36:$Vr,37:$Vs,38:$Vt,39:$Vu,40:$Vv,41:$Vw,42:$Vx,43:$Vy,44:$Vz,45:$VA},{19:$Vk,22:[1,115],29:$Vl,31:$Vm,32:$Vn,33:$Vo,34:$Vp,35:$Vq,36:$Vr,37:$Vs,38:$Vt,39:$Vu,40:$Vv,41:$Vw,42:$Vx,43:$Vy,44:$Vz,45:$VA},{19:$Vk,22:[1,116],29:$Vl,31:$Vm,32:$Vn,33:$Vo,34:$Vp,35:$Vq,36:$Vr,37:$Vs,38:$Vt,39:$Vu,40:$Vv,41:$Vw,42:$Vx,43:$Vy,44:$Vz,45:$VA},{19:$Vk,22:[1,117],29:$Vl,31:$Vm,32:$Vn,33:$Vo,34:$Vp,35:$Vq,36:$Vr,37:$Vs,38:$Vt,39:$Vu,40:$Vv,41:$Vw,42:$Vx,43:$Vy,44:$Vz,45:$VA},{19:$Vk,22:[1,118],29:$Vl,31:$Vm,32:$Vn,33:$Vo,34:$Vp,35:$Vq,36:$Vr,37:$Vs,38:$Vt,39:$Vu,40:$Vv,41:$Vw,42:$Vx,43:$Vy,44:$Vz,45:$VA},{21:[1,119]},{19:$Vk,22:[1,120],29:$Vl,31:$Vm,32:$Vn,33:$Vo,34:$Vp,35:$Vq,36:$Vr,37:$Vs,38:$Vt,39:$Vu,40:$Vv,41:$Vw,42:$Vx,43:$Vy,44:$Vz,45:$VA},{19:$Vk,22:[1,121],29:$Vl,31:$Vm,32:$Vn,33:$Vo,34:$Vp,35:$Vq,36:$Vr,37:$Vs,38:$Vt,39:$Vu,40:$Vv,41:$Vw,42:$Vx,43:$Vy,44:$Vz,45:$VA},{19:$Vk,22:[1,122],29:$Vl,31:$Vm,32:$Vn,33:$Vo,34:$Vp,35:$Vq,36:$Vr,37:$Vs,38:$Vt,39:$Vu,40:$Vv,41:$Vw,42:$Vx,43:$Vy,44:$Vz,45:$VA},{19:$Vk,22:[1,123],29:$Vl,31:$Vm,32:$Vn,33:$Vo,34:$Vp,35:$Vq,36:$Vr,37:$Vs,38:$Vt,39:$Vu,40:$Vv,41:$Vw,42:$Vx,43:$Vy,44:$Vz,45:$VA},{2:$V0,5:124,6:4,7:5,8:6,9:7,10:8,11:9,12:10,13:11,14:12,15:13,16:$V1,21:$V2,42:$V3,46:$V4,49:$V5,50:$V6,51:$V7,52:$V8,53:$V9,54:$Va,56:$Vb,57:$Vc,58:$Vd,59:$Ve,60:$Vf,61:$Vg,62:$Vh,63:$Vi,65:$Vj},{22:[1,125]},{22:[1,126]},{22:[1,127]},{22:[1,128]},{2:$V0,5:129,6:4,7:5,8:6,9:7,10:8,11:9,12:10,13:11,14:12,15:13,16:$V1,21:$V2,42:$V3,46:$V4,49:$V5,50:$V6,51:$V7,52:$V8,53:$V9,54:$Va,56:$Vb,57:$Vc,58:$Vd,59:$Ve,60:$Vf,61:$Vg,62:$Vh,63:$Vi,65:$Vj},{2:$V0,5:130,6:4,7:5,8:6,9:7,10:8,11:9,12:10,13:11,14:12,15:13,16:$V1,21:$V2,42:$V3,46:$V4,49:$V5,50:$V6,51:$V7,52:$V8,53:$V9,54:$Va,56:$Vb,57:$Vc,58:$Vd,59:$Ve,60:$Vf,61:$Vg,62:$Vh,63:$Vi,65:$Vj},o($VC,[2,58]),o($VB,[2,14]),{2:$V0,5:131,6:4,7:5,8:6,9:7,10:8,11:9,12:10,13:11,14:12,15:13,16:$V1,21:$V2,42:$V3,46:$V4,49:$V5,50:$V6,51:$V7,52:$V8,53:$V9,54:$Va,56:$Vb,57:$Vc,58:$Vd,59:$Ve,60:$Vf,61:$Vg,62:$Vh,63:$Vi,65:$Vj},o($VB,[2,44]),o($VB,[2,45]),o($VB,[2,46]),o($VB,[2,47]),{2:$V0,5:132,6:4,7:5,8:6,9:7,10:8,11:9,12:10,13:11,14:12,15:13,16:$V1,21:$V2,42:$V3,46:$V4,49:$V5,50:$V6,51:$V7,52:$V8,53:$V9,54:$Va,56:$Vb,57:$Vc,58:$Vd,59:$Ve,60:$Vf,61:$Vg,62:$Vh,63:$Vi,65:$Vj},o($VB,[2,49]),o($VB,[2,50]),o($VB,[2,51]),o($VB,[2,52]),o($VE,[2,22],{19:$Vk,31:$Vm,33:$Vo,34:$Vp,35:$Vq,36:$Vr,37:$Vs,38:$Vt,39:$Vu,40:$Vv,41:$Vw,42:$Vx,43:$Vy,44:$Vz,45:$VA}),o($VB,[2,16]),o($VB,[2,17]),o($VB,[2,18]),o($VB,[2,19]),{19:$Vk,22:[1,133],29:$Vl,31:$Vm,32:$Vn,33:$Vo,34:$Vp,35:$Vq,36:$Vr,37:$Vs,38:$Vt,39:$Vu,40:$Vv,41:$Vw,42:$Vx,43:$Vy,44:$Vz,45:$VA},{19:$Vk,28:[1,134],29:$Vl,31:$Vm,32:$Vn,33:$Vo,34:$Vp,35:$Vq,36:$Vr,37:$Vs,38:$Vt,39:$Vu,40:$Vv,41:$Vw,42:$Vx,43:$Vy,44:$Vz,45:$VA},{19:$Vk,22:[1,135],29:$Vl,31:$Vm,32:$Vn,33:$Vo,34:$Vp,35:$Vq,36:$Vr,37:$Vs,38:$Vt,39:$Vu,40:$Vv,41:$Vw,42:$Vx,43:$Vy,44:$Vz,45:$VA},{19:$Vk,22:[1,136],29:$Vl,31:$Vm,32:$Vn,33:$Vo,34:$Vp,35:$Vq,36:$Vr,37:$Vs,38:$Vt,39:$Vu,40:$Vv,41:$Vw,42:$Vx,43:$Vy,44:$Vz,45:$VA},o($VB,[2,20]),{2:$V0,5:137,6:4,7:5,8:6,9:7,10:8,11:9,12:10,13:11,14:12,15:13,16:$V1,21:$V2,42:$V3,46:$V4,49:$V5,50:$V6,51:$V7,52:$V8,53:$V9,54:$Va,56:$Vb,57:$Vc,58:$Vd,59:$Ve,60:$Vf,61:$Vg,62:$Vh,63:$Vi,65:$Vj},o($VB,[2,43]),o($VB,[2,48]),{19:$Vk,22:[1,138],29:$Vl,31:$Vm,32:$Vn,33:$Vo,34:$Vp,35:$Vq,36:$Vr,37:$Vs,38:$Vt,39:$Vu,40:$Vv,41:$Vw,42:$Vx,43:$Vy,44:$Vz,45:$VA},o($VB,[2,21])],
defaultActions: {2:[2,1],34:[2,2]},
parseError: function parseError (str, hash) {
    if (hash.recoverable) {
        this.trace(str);
    } else {
        var error = new Error(str);
        error.hash = hash;
        throw error;
    }
},
parse: function parse (input) {
    var self = this,
        stack = [0],
        tstack = [], // token stack
        vstack = [null], // semantic value stack
        lstack = [], // location stack
        table = this.table,
        yytext = '',
        yylineno = 0,
        yyleng = 0,
        recovering = 0,
        TERROR = 2,
        EOF = 1;

    var args = lstack.slice.call(arguments, 1);

    //this.reductionCount = this.shiftCount = 0;

    var lexer = Object.create(this.lexer);
    var sharedState = { yy: {} };
    // copy state
    for (var k in this.yy) {
      if (Object.prototype.hasOwnProperty.call(this.yy, k)) {
        sharedState.yy[k] = this.yy[k];
      }
    }

    lexer.setInput(input, sharedState.yy);
    sharedState.yy.lexer = lexer;
    sharedState.yy.parser = this;
    if (typeof lexer.yylloc == 'undefined') {
        lexer.yylloc = {};
    }
    var yyloc = lexer.yylloc;
    lstack.push(yyloc);

    var ranges = lexer.options && lexer.options.ranges;

    if (typeof sharedState.yy.parseError === 'function') {
        this.parseError = sharedState.yy.parseError;
    } else {
        this.parseError = Object.getPrototypeOf(this).parseError;
    }

    function popStack (n) {
        stack.length = stack.length - 2 * n;
        vstack.length = vstack.length - n;
        lstack.length = lstack.length - n;
    }

_token_stack:
    var lex = function () {
        var token;
        token = lexer.lex() || EOF;
        // if token isn't its numeric value, convert
        if (typeof token !== 'number') {
            token = self.symbols_[token] || token;
        }
        return token;
    }

    var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;
    while (true) {
        // retreive state number from top of stack
        state = stack[stack.length - 1];

        // use default actions if available
        if (this.defaultActions[state]) {
            action = this.defaultActions[state];
        } else {
            if (symbol === null || typeof symbol == 'undefined') {
                symbol = lex();
            }
            // read action for current state and first input
            action = table[state] && table[state][symbol];
        }

_handle_error:
        // handle parse error
        if (typeof action === 'undefined' || !action.length || !action[0]) {
            var error_rule_depth;
            var errStr = '';

            // Return the rule stack depth where the nearest error rule can be found.
            // Return FALSE when no error recovery rule was found.
            function locateNearestErrorRecoveryRule(state) {
                var stack_probe = stack.length - 1;
                var depth = 0;

                // try to recover from error
                for(;;) {
                    // check for error recovery rule in this state
                    if ((TERROR.toString()) in table[state]) {
                        return depth;
                    }
                    if (state === 0 || stack_probe < 2) {
                        return false; // No suitable error recovery rule available.
                    }
                    stack_probe -= 2; // popStack(1): [symbol, action]
                    state = stack[stack_probe];
                    ++depth;
                }
            }

            if (!recovering) {
                // first see if there's any chance at hitting an error recovery rule:
                error_rule_depth = locateNearestErrorRecoveryRule(state);

                // Report error
                expected = [];
                for (p in table[state]) {
                    if (this.terminals_[p] && p > TERROR) {
                        expected.push("'"+this.terminals_[p]+"'");
                    }
                }
                if (lexer.showPosition) {
                    errStr = 'Parse error on line '+(yylineno+1)+":\n"+lexer.showPosition()+"\nExpecting "+expected.join(', ') + ", got '" + (this.terminals_[symbol] || symbol)+ "'";
                } else {
                    errStr = 'Parse error on line '+(yylineno+1)+": Unexpected " +
                                  (symbol == EOF ? "end of input" :
                                              ("'"+(this.terminals_[symbol] || symbol)+"'"));
                }
                this.parseError(errStr, {
                    text: lexer.match,
                    token: this.terminals_[symbol] || symbol,
                    line: lexer.yylineno,
                    loc: yyloc,
                    expected: expected,
                    recoverable: (error_rule_depth !== false)
                });
            } else if (preErrorSymbol !== EOF) {
                error_rule_depth = locateNearestErrorRecoveryRule(state);
            }

            // just recovered from another error
            if (recovering == 3) {
                if (symbol === EOF || preErrorSymbol === EOF) {
                    throw new Error(errStr || 'Parsing halted while starting to recover from another error.');
                }

                // discard current lookahead and grab another
                yyleng = lexer.yyleng;
                yytext = lexer.yytext;
                yylineno = lexer.yylineno;
                yyloc = lexer.yylloc;
                symbol = lex();
            }

            // try to recover from error
            if (error_rule_depth === false) {
                throw new Error(errStr || 'Parsing halted. No suitable error recovery rule available.');
            }
            popStack(error_rule_depth);

            preErrorSymbol = (symbol == TERROR ? null : symbol); // save the lookahead token
            symbol = TERROR;         // insert generic error symbol as new lookahead
            state = stack[stack.length-1];
            action = table[state] && table[state][TERROR];
            recovering = 3; // allow 3 real symbols to be shifted before reporting a new error
        }

        // this shouldn't happen, unless resolve defaults are off
        if (action[0] instanceof Array && action.length > 1) {
            throw new Error('Parse Error: multiple actions possible at state: '+state+', token: '+symbol);
        }

        switch (action[0]) {
            case 1: // shift
                //this.shiftCount++;

                stack.push(symbol);
                vstack.push(lexer.yytext);
                lstack.push(lexer.yylloc);
                stack.push(action[1]); // push state
                symbol = null;
                if (!preErrorSymbol) { // normal execution/no error
                    yyleng = lexer.yyleng;
                    yytext = lexer.yytext;
                    yylineno = lexer.yylineno;
                    yyloc = lexer.yylloc;
                    if (recovering > 0) {
                        recovering--;
                    }
                } else {
                    // error just occurred, resume old lookahead f/ before error
                    symbol = preErrorSymbol;
                    preErrorSymbol = null;
                }
                break;

            case 2:
                // reduce
                //this.reductionCount++;

                len = this.productions_[action[1]][1];

                // perform semantic action
                yyval.$ = vstack[vstack.length-len]; // default to $$ = $1
                // default location, uses first token for firsts, last for lasts
                yyval._$ = {
                    first_line: lstack[lstack.length-(len||1)].first_line,
                    last_line: lstack[lstack.length-1].last_line,
                    first_column: lstack[lstack.length-(len||1)].first_column,
                    last_column: lstack[lstack.length-1].last_column
                };
                if (ranges) {
                  yyval._$.range = [lstack[lstack.length-(len||1)].range[0], lstack[lstack.length-1].range[1]];
                }
                r = this.performAction.apply(yyval, [yytext, yyleng, yylineno, sharedState.yy, action[1], vstack, lstack].concat(args));

                if (typeof r !== 'undefined') {
                    return r;
                }

                // pop off stack
                if (len) {
                    stack = stack.slice(0,-1*len*2);
                    vstack = vstack.slice(0, -1*len);
                    lstack = lstack.slice(0, -1*len);
                }

                stack.push(this.productions_[action[1]][0]);    // push nonterminal (reduce)
                vstack.push(yyval.$);
                lstack.push(yyval._$);
                // goto new state = table[STATE][NONTERMINAL]
                newState = table[stack[stack.length-2]][stack[stack.length-1]];
                stack.push(newState);
                break;

            case 3:
                // accept
                return true;
        }

    }

    return true;
}};

    //const {ErrorCom} = require(['../ts/ErrorCom']);
    /*---CLASES IMPORTADAS---*/
    const {Tipo} = require("../../dist/AST/Tipo");
    const {Print} = require("../../dist/Instrucciones/Print");
    const {Declaracion} = require("../../dist/Instrucciones/Declaracion");
    const {DeclaracionArray} = require("../../dist/Instrucciones/DeclaracionArray");
    const {Asignacion} = require("../../dist/Instrucciones/Asignacion");
    const {While} = require("../../dist/Instrucciones/While");
    const {If} = require("../../dist/Instrucciones/If");
    const {DoWhile} = require("../../dist/Instrucciones/DoWhile");
    const {Funcion} = require("../../dist/Instrucciones/Funcion");
    const {Struct} = require("../../dist/Instrucciones/Struct");
    const {Switch} = require("../../dist/Instrucciones/Switch");
    const {Ternario} = require("../../dist/Expresiones/Ternario");
    const {AccesoAtributo} = require("../../dist/Expresiones/AccesoAtributo");
    const {DeclaracionStruct} = require("../../dist/Instrucciones/DeclaracionStruct");
    const {SwitchCaso} = require("../../dist/Instrucciones/SwitchCaso");
    const {Break} = require("../../dist/Instrucciones/Break");
    const {Return} = require("../../dist/Instrucciones/Return");
    const {Continue} = require("../../dist/Instrucciones/Continue");
    const {FuncionReturn} = require("../../dist/Instrucciones/FuncionReturn");
    const {Parametro} = require("../../dist/Instrucciones/Parametro");
    const {ParametroReturn} = require("../../dist/Expresiones/ParametroReturn");
    const {For} = require("../../dist/Instrucciones/For");
    const {Forin} = require("../../dist/Instrucciones/Forin");
    const {Primitivo} = require("../../dist/Expresiones/Primitivo");
    const {AccesoVariable} = require("../../dist/Expresiones/AccesoVariable");
    const {ArrbegEnd} = require("../../dist/Expresiones/ArrbegEnd");
    const {Operacion, Operador} = require("../../dist/Expresiones/Operacion");
    const {Objeto} = require("../../dist/Expresiones/Objeto");
    const {Atributo} = require("../../dist/Expresiones/Atributo");
    const {AccesoArray} = require("../../dist/Expresiones/AccesoArray");
    const {AccesoAtribArray} = require("../../dist/Expresiones/AccesoAtribArray");
    const {AsignacionArray} = require("../../dist/Instrucciones/AsignacionArray");
    const {IncrDecr} = require("../../dist/Instrucciones/IncrDecr");
    const {Push} = require("../../dist/Instrucciones/Push");
    const {Pop} = require("../../dist/Instrucciones/Pop");
    const {OperacionCadena, OperadorCadena} = require("../../dist/Expresiones/OperacionCadena");
    const {OperadorNativa, OperacionNativa} = require("../../dist/Expresiones/OperacionNativa");
    const {ConcatenacionString} = require("../../dist/Expresiones/ConcatenacionString");
    // const {ErrorG} = require("../../dist/Objetos/ErrorG");

    /*---CODIGO INCRUSTADO---*/
    // var errores = [];
    // var elementos = [];

    // function genError(desc,linea,columna){
    //     let erro =  new ErrorG('sintactico',desc,linea,columna);
    //     errores.push(erro);
    // }

    // function reiniciarArrays(instrucciones){
    //     var elemento = {'id':'instrucciones','cont':instrucciones};
    //     var elemento1 = {'id':'listaErrores','cont':errores};
    //     elementos.push(elemento);
    //     elementos.push(elemento1);
    //     var aux = elementos;
    //     elementos = [];
    //     errores = [];
    //     return aux;
    // }
/* generated by jison-lex 0.3.4 */
var lexer = (function(){
var lexer = ({

EOF:1,

parseError:function parseError(str, hash) {
        if (this.yy.parser) {
            this.yy.parser.parseError(str, hash);
        } else {
            throw new Error(str);
        }
    },

// resets the lexer, sets new input
setInput:function (input, yy) {
        this.yy = yy || this.yy || {};
        this._input = input;
        this._more = this._backtrack = this.done = false;
        this.yylineno = this.yyleng = 0;
        this.yytext = this.matched = this.match = '';
        this.conditionStack = ['INITIAL'];
        this.yylloc = {
            first_line: 1,
            first_column: 0,
            last_line: 1,
            last_column: 0
        };
        if (this.options.ranges) {
            this.yylloc.range = [0,0];
        }
        this.offset = 0;
        return this;
    },

// consumes and returns one char from the input
input:function () {
        var ch = this._input[0];
        this.yytext += ch;
        this.yyleng++;
        this.offset++;
        this.match += ch;
        this.matched += ch;
        var lines = ch.match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno++;
            this.yylloc.last_line++;
        } else {
            this.yylloc.last_column++;
        }
        if (this.options.ranges) {
            this.yylloc.range[1]++;
        }

        this._input = this._input.slice(1);
        return ch;
    },

// unshifts one char (or a string) into the input
unput:function (ch) {
        var len = ch.length;
        var lines = ch.split(/(?:\r\n?|\n)/g);

        this._input = ch + this._input;
        this.yytext = this.yytext.substr(0, this.yytext.length - len);
        //this.yyleng -= len;
        this.offset -= len;
        var oldLines = this.match.split(/(?:\r\n?|\n)/g);
        this.match = this.match.substr(0, this.match.length - 1);
        this.matched = this.matched.substr(0, this.matched.length - 1);

        if (lines.length - 1) {
            this.yylineno -= lines.length - 1;
        }
        var r = this.yylloc.range;

        this.yylloc = {
            first_line: this.yylloc.first_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.first_column,
            last_column: lines ?
                (lines.length === oldLines.length ? this.yylloc.first_column : 0)
                 + oldLines[oldLines.length - lines.length].length - lines[0].length :
              this.yylloc.first_column - len
        };

        if (this.options.ranges) {
            this.yylloc.range = [r[0], r[0] + this.yyleng - len];
        }
        this.yyleng = this.yytext.length;
        return this;
    },

// When called from action, caches matched text and appends it on next action
more:function () {
        this._more = true;
        return this;
    },

// When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.
reject:function () {
        if (this.options.backtrack_lexer) {
            this._backtrack = true;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });

        }
        return this;
    },

// retain first n characters of the match
less:function (n) {
        this.unput(this.match.slice(n));
    },

// displays already matched input, i.e. for error messages
pastInput:function () {
        var past = this.matched.substr(0, this.matched.length - this.match.length);
        return (past.length > 20 ? '...':'') + past.substr(-20).replace(/\n/g, "");
    },

// displays upcoming input, i.e. for error messages
upcomingInput:function () {
        var next = this.match;
        if (next.length < 20) {
            next += this._input.substr(0, 20-next.length);
        }
        return (next.substr(0,20) + (next.length > 20 ? '...' : '')).replace(/\n/g, "");
    },

// displays the character position where the lexing error occurred, i.e. for error messages
showPosition:function () {
        var pre = this.pastInput();
        var c = new Array(pre.length + 1).join("-");
        return pre + this.upcomingInput() + "\n" + c + "^";
    },

// test the lexed token: return FALSE when not a match, otherwise return token
test_match:function(match, indexed_rule) {
        var token,
            lines,
            backup;

        if (this.options.backtrack_lexer) {
            // save context
            backup = {
                yylineno: this.yylineno,
                yylloc: {
                    first_line: this.yylloc.first_line,
                    last_line: this.last_line,
                    first_column: this.yylloc.first_column,
                    last_column: this.yylloc.last_column
                },
                yytext: this.yytext,
                match: this.match,
                matches: this.matches,
                matched: this.matched,
                yyleng: this.yyleng,
                offset: this.offset,
                _more: this._more,
                _input: this._input,
                yy: this.yy,
                conditionStack: this.conditionStack.slice(0),
                done: this.done
            };
            if (this.options.ranges) {
                backup.yylloc.range = this.yylloc.range.slice(0);
            }
        }

        lines = match[0].match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno += lines.length;
        }
        this.yylloc = {
            first_line: this.yylloc.last_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.last_column,
            last_column: lines ?
                         lines[lines.length - 1].length - lines[lines.length - 1].match(/\r?\n?/)[0].length :
                         this.yylloc.last_column + match[0].length
        };
        this.yytext += match[0];
        this.match += match[0];
        this.matches = match;
        this.yyleng = this.yytext.length;
        if (this.options.ranges) {
            this.yylloc.range = [this.offset, this.offset += this.yyleng];
        }
        this._more = false;
        this._backtrack = false;
        this._input = this._input.slice(match[0].length);
        this.matched += match[0];
        token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);
        if (this.done && this._input) {
            this.done = false;
        }
        if (token) {
            return token;
        } else if (this._backtrack) {
            // recover context
            for (var k in backup) {
                this[k] = backup[k];
            }
            return false; // rule action called reject() implying the next rule should be tested instead.
        }
        return false;
    },

// return next match in input
next:function () {
        if (this.done) {
            return this.EOF;
        }
        if (!this._input) {
            this.done = true;
        }

        var token,
            match,
            tempMatch,
            index;
        if (!this._more) {
            this.yytext = '';
            this.match = '';
        }
        var rules = this._currentRules();
        for (var i = 0; i < rules.length; i++) {
            tempMatch = this._input.match(this.rules[rules[i]]);
            if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
                match = tempMatch;
                index = i;
                if (this.options.backtrack_lexer) {
                    token = this.test_match(tempMatch, rules[i]);
                    if (token !== false) {
                        return token;
                    } else if (this._backtrack) {
                        match = false;
                        continue; // rule action called reject() implying a rule MISmatch.
                    } else {
                        // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
                        return false;
                    }
                } else if (!this.options.flex) {
                    break;
                }
            }
        }
        if (match) {
            token = this.test_match(match, rules[index]);
            if (token !== false) {
                return token;
            }
            // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
            return false;
        }
        if (this._input === "") {
            return this.EOF;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });
        }
    },

// return next match that has a token
lex:function lex () {
        var r = this.next();
        if (r) {
            return r;
        } else {
            return this.lex();
        }
    },

// activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)
begin:function begin (condition) {
        this.conditionStack.push(condition);
    },

// pop the previously active lexer condition state off the condition stack
popState:function popState () {
        var n = this.conditionStack.length - 1;
        if (n > 0) {
            return this.conditionStack.pop();
        } else {
            return this.conditionStack[0];
        }
    },

// produce the lexer rule set which is active for the currently active lexer condition state
_currentRules:function _currentRules () {
        if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {
            return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;
        } else {
            return this.conditions["INITIAL"].rules;
        }
    },

// return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available
topState:function topState (n) {
        n = this.conditionStack.length - 1 - Math.abs(n || 0);
        if (n >= 0) {
            return this.conditionStack[n];
        } else {
            return "INITIAL";
        }
    },

// alias for begin(condition)
pushState:function pushState (condition) {
        this.begin(condition);
    },

// return the number of states currently on the stack
stateStackSize:function stateStackSize() {
        return this.conditionStack.length;
    },
options: {"ranges":true},
performAction: function anonymous(yy,yy_,$avoiding_name_collisions,YY_START) {
var YYSTATE=YY_START;
switch($avoiding_name_collisions) {
case 0:/* skip comments */
break;
case 1:this.begin('comment');
break;
case 2:this.popState();
break;
case 3:/* skip comment content*/
break;
case 4:/* skip whitespace */
break;
case 5:return 'BRACKI'; 
break;
case 6:return 'BRACKD';
break;
case 7:return 21;
break;
case 8:return 22;
break;
case 9:return 17;
break;
case 10:return 18;
break;
case 11:return 28;
break;
case 12:return 30;
break;
case 13:return 'PUNTCOMA';
break;
case 14:return 49;
break;
case 15:return 50;
break;
case 16:return 51;
break;
case 17:return 52;
break;
case 18:return 53;
break;
case 19:return 55;
break;
case 20:return 56;
break;
case 21:return 57;
break;
case 22:return 58;
break;
case 23:return 59;
break;
case 24:return 'STR_PUSH';
break;
case 25:return 23;
break;
case 26:return 26;
break;
case 27:return 27;
break;
case 28:return 20;
break;
case 29:return 24;
break;
case 30:return 25;
break;
case 31:return 36;
break;
case 32:return 37;
break;
case 33:return 33;
break;
case 34:return 35;
break;
case 35:return 38;
break;
case 36:return 34;
break;
case 37:return 32;
break;
case 38:return 31;
break;
case 39:return 43;
break;
case 40:return 46;
break;
case 41:return 'OP_IGUAL';
break;
case 42:return 'OP_MASIG';
break;
case 43:return 'OP_RESIG';
break;
case 44:return 'OP_PORIG';
break;
case 45:return 'OP_DIVIG';
break;
case 46:return 'OP_MODIG';
break;
case 47:return 47;
break;
case 48:return 41;
break;
case 49:return 48;
break;
case 50:return 42;
break;
case 51:return 39;
break;
case 52:return 40;
break;
case 53:return 45;
break;
case 54:return 19;
break;
case 55:return 44;
break;
case 56:return 29;
break;
case 57:return 'OP_HASH';
break;
case 58:return 65;
break;
case 59:return 16;
break;
case 60:return 16;
break;
case 61:return 63;
break;
case 62:return 62;
break;
case 63:yy_.yytext = yy_.yytext.slice(1,-1); return 'STRINGL';
break;
case 64:yy_.yytext = yy_.yytext.slice(1,-1); return 'STRINGL';
break;
case 65:return 'CHARL';
break;
case 66:return 'CHARL';
break;
case 67:return 4;
break;
case 68:return 'INVALID';
break;
}
},
rules: [/^(?:\/\/.*)/,/^(?:\/\*)/,/^(?:\*\/)/,/^(?:.)/,/^(?:\s+)/,/^(?:\{)/,/^(?:\})/,/^(?:\()/,/^(?:\))/,/^(?:\[)/,/^(?:\])/,/^(?:,)/,/^(?::)/,/^(?:;)/,/^(?:pow\b)/,/^(?:sqrt\b)/,/^(?:sin\b)/,/^(?:cos\b)/,/^(?:tan\b)/,/^(?:parse\b)/,/^(?:toInt\b)/,/^(?:toDouble\b)/,/^(?:string\b)/,/^(?:typeof\b)/,/^(?:push\b)/,/^(?:pop\b)/,/^(?:caracterOfPosition\b)/,/^(?:subString\b)/,/^(?:length\b)/,/^(?:toUppercase\b)/,/^(?:toLowercase\b)/,/^(?:<=)/,/^(?:<)/,/^(?:==)/,/^(?:>=)/,/^(?:>)/,/^(?:!=)/,/^(?:\|\|)/,/^(?:&&)/,/^(?:&)/,/^(?:!)/,/^(?:=)/,/^(?:\+=)/,/^(?:-=)/,/^(?:\*=)/,/^(?:\/=)/,/^(?:%=)/,/^(?:\+\+)/,/^(?:\+)/,/^(?:--)/,/^(?:-)/,/^(?:\*)/,/^(?:\/)/,/^(?:%)/,/^(?:\.)/,/^(?:\^)/,/^(?:\?)/,/^(?:#)/,/^(?:null\b)/,/^(?:[A-Z][a-zA-Z0-9_]*)/,/^(?:[a-zA-Z][a-zA-Z0-9_]*)/,/^(?:(((0|([1-9])([0-9])*))\.((0|([1-9])([0-9])*))?(([Ee][+-]?((0|([1-9])([0-9])*))))?[fFdD]?|\.((0|([1-9])([0-9])*))(([Ee][+-]?((0|([1-9])([0-9])*))))?[fFdD]?|((0|([1-9])([0-9])*))(([Ee][+-]?((0|([1-9])([0-9])*))))[fFdD]?|((0|([1-9])([0-9])*))(([Ee][+-]?((0|([1-9])([0-9])*))))?[fFdD])(?=([^\w]|$)))/,/^(?:((0|([1-9])([0-9])*)))/,/^(?:"")/,/^(?:"([^"]|(\\.))*")/,/^(?:\\'([^']|(\\.))*\\')/,/^(?:\\'\\')/,/^(?:$)/,/^(?:.)/],
conditions: {"comment":{"rules":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68],"inclusive":true},"INITIAL":{"rules":[0,1,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68],"inclusive":true}}
});
return lexer;
})();
parser.lexer = lexer;
function Parser () {
  this.yy = {};
}
Parser.prototype = parser;parser.Parser = Parser;
return new Parser;
})();


if (typeof require !== 'undefined' && typeof exports !== 'undefined') {
exports.parser = stringExpresion;
exports.Parser = stringExpresion.Parser;
exports.parse = function () { return stringExpresion.parse.apply(stringExpresion, arguments); };
exports.main = function commonjsMain (args) {
    if (!args[1]) {
        console.log('Usage: '+args[0]+' FILE');
        process.exit(1);
    }
    var source = require('fs').readFileSync(require('path').normalize(args[1]), "utf8");
    return exports.parser.parse(source);
};
if (typeof module !== 'undefined' && require.main === module) {
  exports.main(process.argv.slice(1));
}
}
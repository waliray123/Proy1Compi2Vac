/* parser generated by jison 0.4.18 */
/*
  Returns a Parser object of the following structure:

  Parser: {
    yy: {}
  }

  Parser.prototype: {
    yy: {},
    trace: function(),
    symbols_: {associative list: name ==> number},
    terminals_: {associative list: number ==> name},
    productions_: [...],
    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),
    table: [...],
    defaultActions: {...},
    parseError: function(str, hash),
    parse: function(input),

    lexer: {
        EOF: 1,
        parseError: function(str, hash),
        setInput: function(input),
        input: function(),
        unput: function(str),
        more: function(),
        less: function(n),
        pastInput: function(),
        upcomingInput: function(),
        showPosition: function(),
        test_match: function(regex_match_array, rule_index),
        next: function(),
        lex: function(),
        begin: function(condition),
        popState: function(),
        _currentRules: function(),
        topState: function(),
        pushState: function(condition),

        options: {
            ranges: boolean           (optional: true ==> token location info will include a .range[] member)
            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)
            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)
        },

        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),
        rules: [...],
        conditions: {associative list: name ==> set},
    }
  }


  token location info (@$, _$, etc.): {
    first_line: n,
    last_line: n,
    first_column: n,
    last_column: n,
    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)
  }


  the parseError function receives a 'hash' object with these members for lexer and parser errors: {
    text:        (matched text)
    token:       (the produced terminal token, if any)
    line:        (yylineno)
  }
  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {
    loc:         (yylloc)
    expected:    (string describing the set of expected tokens)
    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)
  }
*/
var Gramatica = (function(){
var o=function(k,v,o,l){for(o=o||{},l=k.length;l--;o[k[l]]=v);return o},$V0=[1,9],$V1=[1,13],$V2=[1,19],$V3=[1,12],$V4=[1,14],$V5=[1,15],$V6=[1,16],$V7=[1,17],$V8=[1,18],$V9=[2,4,11,12,21,70,71,72,73,74],$Va=[1,25],$Vb=[16,75],$Vc=[2,83],$Vd=[1,28],$Ve=[1,47],$Vf=[1,48],$Vg=[1,49],$Vh=[1,50],$Vi=[1,51],$Vj=[1,52],$Vk=[1,53],$Vl=[1,54],$Vm=[1,55],$Vn=[1,41],$Vo=[1,42],$Vp=[1,43],$Vq=[1,44],$Vr=[1,45],$Vs=[1,46],$Vt=[2,4,11,12,15,21,36,42,46,47,48,51,52,53,58,63,64,70,71,72,73,74],$Vu=[2,21],$Vv=[1,79],$Vw=[1,64],$Vx=[1,65],$Vy=[1,73],$Vz=[1,74],$VA=[1,75],$VB=[1,76],$VC=[1,77],$VD=[1,78],$VE=[1,66],$VF=[1,67],$VG=[1,68],$VH=[1,69],$VI=[1,70],$VJ=[1,71],$VK=[1,72],$VL=[1,80],$VM=[1,81],$VN=[16,19,24,43,67,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,100,101],$VO=[1,95],$VP=[16,19,24,43,67,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98],$VQ=[1,122],$VR=[16,19,24,43,67,84,85,86,87,88,89,90,91,92,93,94,95,96,98],$VS=[16,19,24,43,67,84,85,86,87,88,89,90,91,94,95,96],$VT=[16,19,24,43,67,84,85,86,87,88,89,90,91],$VU=[1,155],$VV=[1,156],$VW=[1,154],$VX=[1,148],$VY=[1,149],$VZ=[1,150],$V_=[1,151],$V$=[1,152],$V01=[1,153],$V11=[15,19],$V21=[2,4,11,12,15,21,36,42,46,47,48,51,52,53,56,57,58,63,64,70,71,72,73,74],$V31=[2,12,15,36,42,46,47,48,51,52,53,58,63,64,70,71,72,73,74],$V41=[2,62],$V51=[1,216],$V61=[1,217],$V71=[19,67],$V81=[1,227],$V91=[15,42,46],$Va1=[2,49],$Vb1=[1,258],$Vc1=[1,259];
var parser = {trace: function trace () { },
yy: {},
symbols_: {"error":2,"ini":3,"EOF":4,"instrucciones":5,"instruccion":6,"declaracion_bloque":7,"asignacion_bloque":8,"asignacion_funcion":9,"struct_declaracion":10,"STR_STRUCT":11,"ID_VAR":12,"cuerpo_struct":13,"BRACKI":14,"BRACKD":15,"PUNTCOMA":16,"contenido_struct":17,"declaracion_struct":18,"COMA":19,"tiposVar":20,"VOID":21,"MAIN":22,"PARI":23,"PARD":24,"cuerpoFuncion":25,"parametros_funcion":26,"parametro_funcion":27,"instrucciones_funciones":28,"instruccion_funcion":29,"print_bloque":30,"if_bloque":31,"for_bloque":32,"while_bloque":33,"switch_bloque":34,"funcion_return":35,"STR_SWITCH":36,"expresion":37,"switch_cuerpo":38,"casos_switch":39,"opcional_default":40,"caso_switch":41,"STR_CASE":42,"DOSPUNT":43,"contenido_caso":44,"opcional_break":45,"STR_DEFAULT":46,"BREAK":47,"CONTINUE":48,"nombreVars":49,"asignacion":50,"PRINT":51,"PRINTLN":52,"STR_IF":53,"sinos_bloque":54,"instruccion_devuelta":55,"STR_ELSE":56,"STR_ELSEIF":57,"STR_FOR":58,"decl_asign":59,"STR_IN":60,"arr_decl":61,"arr_begin_end":62,"STR_WHILE":63,"STR_DO":64,"CORCHI":65,"parametros_arreglo":66,"CORCHD":67,"STR_BEGIN":68,"STR_END":69,"STR_STRING":70,"STR_DOUBLE":71,"STR_INTEGER":72,"STR_BOOLEAN":73,"STR_CHAR":74,"OP_IGUAL":75,"primitivas":76,"logicas":77,"operadores":78,"relacionales":79,"expresion_ternario":80,"incr_decr":81,"nativas":82,"OP_TER":83,"OP_AND":84,"OP_OR":85,"OP_DOBIG":86,"OP_DIF":87,"OP_MAYIG":88,"OP_MENIG":89,"OP_MEN":90,"OP_MAY":91,"OP_MULT":92,"OP_DIVI":93,"OP_SUMA":94,"OP_RESTA":95,"OP_AMP":96,"OP_ELV":97,"OP_MOD":98,"OP_NEG":99,"OP_INCR":100,"OP_DECR":101,"STR_POW":102,"STR_SQRT":103,"STR_SIN":104,"STR_COS":105,"STR_TAN":106,"STR_FALSE":107,"STR_TRUE":108,"ENTERO":109,"FLOTANTE":110,"STRINGL":111,"CHARL":112,"$accept":0,"$end":1},
terminals_: {2:"error",4:"EOF",11:"STR_STRUCT",12:"ID_VAR",14:"BRACKI",15:"BRACKD",16:"PUNTCOMA",19:"COMA",21:"VOID",22:"MAIN",23:"PARI",24:"PARD",36:"STR_SWITCH",42:"STR_CASE",43:"DOSPUNT",46:"STR_DEFAULT",47:"BREAK",48:"CONTINUE",51:"PRINT",52:"PRINTLN",53:"STR_IF",56:"STR_ELSE",57:"STR_ELSEIF",58:"STR_FOR",60:"STR_IN",63:"STR_WHILE",64:"STR_DO",65:"CORCHI",67:"CORCHD",68:"STR_BEGIN",69:"STR_END",70:"STR_STRING",71:"STR_DOUBLE",72:"STR_INTEGER",73:"STR_BOOLEAN",74:"STR_CHAR",75:"OP_IGUAL",83:"OP_TER",84:"OP_AND",85:"OP_OR",86:"OP_DOBIG",87:"OP_DIF",88:"OP_MAYIG",89:"OP_MENIG",90:"OP_MEN",91:"OP_MAY",92:"OP_MULT",93:"OP_DIVI",94:"OP_SUMA",95:"OP_RESTA",96:"OP_AMP",97:"OP_ELV",98:"OP_MOD",99:"OP_NEG",100:"OP_INCR",101:"OP_DECR",102:"STR_POW",103:"STR_SQRT",104:"STR_SIN",105:"STR_COS",106:"STR_TAN",107:"STR_FALSE",108:"STR_TRUE",109:"ENTERO",110:"FLOTANTE",111:"STRINGL",112:"CHARL"},
productions_: [0,[3,1],[3,2],[5,2],[5,1],[6,1],[6,1],[6,1],[6,1],[6,1],[10,3],[13,3],[13,4],[17,1],[17,3],[18,2],[18,2],[9,5],[9,6],[26,3],[26,1],[26,0],[27,2],[25,3],[25,2],[28,2],[28,1],[29,1],[29,1],[29,1],[29,1],[29,1],[29,1],[29,1],[29,1],[35,5],[34,5],[34,1],[38,2],[38,4],[39,2],[39,1],[41,4],[44,2],[44,1],[40,3],[40,0],[45,2],[45,2],[45,0],[7,3],[7,4],[8,3],[30,5],[30,5],[31,6],[31,5],[55,1],[54,2],[54,2],[54,6],[54,5],[54,0],[32,9],[32,5],[32,5],[32,5],[33,5],[33,6],[59,3],[59,2],[61,3],[66,1],[66,3],[62,6],[62,6],[62,6],[62,6],[20,1],[20,1],[20,1],[20,1],[20,1],[49,1],[49,3],[50,2],[37,1],[37,1],[37,1],[37,1],[37,1],[37,1],[37,1],[80,5],[77,3],[77,3],[79,3],[79,3],[79,3],[79,3],[79,3],[79,3],[78,3],[78,3],[78,3],[78,3],[78,3],[78,3],[78,3],[78,3],[78,2],[78,2],[81,2],[81,2],[82,6],[82,4],[82,4],[82,4],[82,4],[76,1],[76,1],[76,1],[76,1],[76,1],[76,1],[76,1]],
performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */) {
/* this == yyval */

var $0 = $$.length - 1;
switch (yystate) {
case 1:
console.log("EOF encontrado");return [];
break;
case 2:
this.$ = $$[$0-1];return this.$;
break;
case 3: case 40:
$$[$0-1].push($$[$0]); this.$ = $$[$0-1];
break;
case 4: case 13: case 20: case 41: case 83:
this.$ = [$$[$0]];
break;
case 5: case 6: case 7: case 8: case 27: case 28: case 29: case 30: case 31: case 32: case 33: case 34: case 85: case 86: case 87: case 88: case 89: case 90: case 91: case 92:
this.$ = $$[$0];
break;
case 10:
this.$ = new Struct($$[$0-1],$$[$0],_$[$0-2].first_line,_$[$0-2].first_column); 
break;
case 11:
this.$ = []; 
break;
case 12:
this.$ = $$[$0-2];
break;
case 14:
$$[$0].push($$[$0-2]); this.$= $$[$0]; 
break;
case 15: case 16:
this.$ = new Declaracion($$[$0],$$[$0-1],_$[$0-1].first_line,_$[$0-1].first_column);
break;
case 17:
this.$ = new Funcion("main","void",_$[$0-4].first_line,_$[$0-4].first_column,$$[$0]);
break;
case 18:
this.$ = new Funcion($$[$0-4],$$[$0-5],_$[$0-5].first_line,_$[$0-5].first_column,$$[$0],$$[$0-2]);
break;
case 19:
$$[$0].push($$[$0-2]);this.$ = $$[$0];
break;
case 21:
this.$ = [];
break;
case 22:
this.$ = new Parametro($$[$0],$$[$0-1],_$[$0-1].first_line,_$[$0-1].first_column);
break;
case 23: case 109:
this.$ = $$[$0-1];
break;
case 24: case 46: case 49:
this.$ = null;
break;
case 25:
        
        $$[$0-1].push($$[$0]);
        this.$ = $$[$0-1];
    
break;
case 26:
                
        this.$ = [$$[$0]];
    
break;
case 35:
this.$ = new FuncionReturn($$[$0-4],_$[$0-4].first_line,_$[$0-4].first_column,$$[$0-2]);
break;
case 36:
this.$ = new Switch($$[$0-2],$$[$0],_$[$0-4].first_line,_$[$0-4].first_column);
break;
case 38:
this.$= [];
break;
case 39:

            if ($$[$0-1] != null){
                $$[$0-2].push($$[$0-1]);
            }
            this.$ = $$[$0-2];
        
break;
case 42:
this.$ = new SwitchCaso($$[$0-2],$$[$0],_$[$0-3].first_line,_$[$0-3].first_column);
break;
case 43:

            if ($$[$0] != null){
                $$[$0-1].push($$[$0]);
            }
            this.$ = $$[$0-1];
        
break;
case 44:

            if ($$[$0] == null){
                this.$ = [];
            }else{
                this.$ = [$$[$0]];
            }
        
break;
case 45:
this.$ = new SwitchCaso('DEFAULT',$$[$0],_$[$0-2].first_line,_$[$0-2].first_column);
break;
case 47:
this.$ = new Break(_$[$0-1].first_line,_$[$0-1].first_column);
break;
case 48:
this.$ = new Continue(_$[$0-1].first_line,_$[$0-1].first_column);
break;
case 50:
this.$ = new Declaracion($$[$0-1],$$[$0-2],_$[$0-2].first_line,_$[$0-2].first_column,null);
break;
case 51:
this.$ = new Declaracion($$[$0-2],$$[$0-3],_$[$0-3].first_line,_$[$0-3].first_column,$$[$0-1]);
break;
case 52:
this.$ = new Asignacion($$[$0-2],_$[$0-2].first_line,_$[$0-2].first_column,$$[$0-1]);
break;
case 53:
this.$ = new Print($$[$0-2],_$[$0-4].first_line,_$[$0-4].first_column,false);
break;
case 54:
this.$ = new Print($$[$0-2],_$[$0-4].first_line,_$[$0-4].first_column,true);
break;
case 57: case 72:
this.$ = [$$[$0]]
break;
case 63:
this.$ = new For(_$[$0-8].first_line,_$[$0-8].first_column,$$[$0],$$[$0-6],$$[$0-4],$$[$0-2]);
break;
case 64: case 65: case 66:
this.$ = new Forin(_$[$0-4].first_line,_$[$0-4].first_column,$$[$0],$$[$0-3],$$[$0-1]);
break;
case 67:
this.$ = new While(_$[$0-4].first_line,_$[$0-4].first_column,$$[$0],$$[$0-2]);
break;
case 68:
this.$ = new DoWhile(_$[$0-5].first_line,_$[$0-5].first_column,$$[$0-4],$$[$0-1]);
break;
case 69:
this.$ = new Declaracion($$[$0-1],$$[$0-2],_$[$0-2].first_line,_$[$0-2].first_column,$$[$0]);
break;
case 70:
this.$ = new Asignacion($$[$0-1],_$[$0-1].first_line,_$[$0-1].first_column,$$[$0]);
break;
case 71:
this.$ = $$[$0-1]
break;
case 73:
$$[$0-2].push($$[$0-1]);this.$ = $$[$0-2];
break;
case 74:
this.$ = new ArrbegEnd($$[$0-5],_$[$0-5].first_line,_$[$0-5].first_column,$$[$0-3],$$[$0-1]);
break;
case 75:
let beg = new Primitivo("begin", _$[$0-5].first_line, _$[$0-5].first_column); this.$ = new ArrbegEnd($$[$0-5],_$[$0-5].first_line,_$[$0-5].first_column,beg,$$[$0-1]);
break;
case 76:
let beg1 = new Primitivo("begin", _$[$0-5].first_line, _$[$0-5].first_column); let end1 = new Primitivo("end", _$[$0-5].first_line, _$[$0-5].first_column); this.$ = new ArrbegEnd($$[$0-5],_$[$0-5].first_line,_$[$0-5].first_column,beg1,end1);
break;
case 77:
let beg2 = new Primitivo("end", _$[$0-5].first_line, _$[$0-5].first_column); this.$ = new ArrbegEnd($$[$0-5],_$[$0-5].first_line,_$[$0-5].first_column,$$[$0-3],beg2);
break;
case 78:
this.$ = Tipo.STRING;
break;
case 79:
this.$ = Tipo.DOUBLE;
break;
case 80:
this.$ = Tipo.INT;
break;
case 81:
this.$ = Tipo.BOOL;
break;
case 82:
this.$ = Tipo.CHAR;
break;
case 84:
 $$[$0].push($$[$0-2]);this.$ = $$[$0];
break;
case 94:
this.$ = new Operacion($$[$0-2],$$[$0],Operador.AND, _$[$0-2].first_line, _$[$0-2].first_column);
break;
case 95:
this.$ = new Operacion($$[$0-2],$$[$0],Operador.OR, _$[$0-2].first_line, _$[$0-2].first_column);
break;
case 96:
this.$ = new Operacion($$[$0-2],$$[$0],Operador.IGUAL_IGUAL, _$[$0-2].first_line, _$[$0-2].first_column);
break;
case 97:
this.$ = new Operacion($$[$0-2],$$[$0],Operador.DIFERENTE_QUE, _$[$0-2].first_line, _$[$0-2].first_column);
break;
case 98:
this.$ = new Operacion($$[$0-2],$$[$0],Operador.MAYOR_IGUA_QUE, _$[$0-2].first_line, _$[$0-2].first_column);
break;
case 99:
this.$ = new Operacion($$[$0-2],$$[$0],Operador.MENOR_IGUA_QUE, _$[$0-2].first_line, _$[$0-2].first_column);
break;
case 100:
this.$ = new Operacion($$[$0-2],$$[$0],Operador.MENOR_QUE, _$[$0-2].first_line, _$[$0-2].first_column);
break;
case 101:
this.$ = new Operacion($$[$0-2],$$[$0],Operador.MAYOR_QUE, _$[$0-2].first_line, _$[$0-2].first_column);
break;
case 102:
this.$ = new Operacion($$[$0-2],$$[$0],Operador.MULTIPLICACION, _$[$0-2].first_line, _$[$0-2].first_column);
break;
case 103:
this.$ = new Operacion($$[$0-2],$$[$0],Operador.DIVISION, _$[$0-2].first_line, _$[$0-2].first_column);
break;
case 104:
this.$ = new Operacion($$[$0-2],$$[$0],Operador.SUMA, _$[$0-2].first_line, _$[$0-2].first_column);
break;
case 105:
this.$ = new Operacion($$[$0-2],$$[$0],Operador.RESTA, _$[$0-2].first_line, _$[$0-2].first_column);
break;
case 106:
this.$ = new Operacion($$[$0-2],$$[$0],Operador.AMPERSON, _$[$0-2].first_line, _$[$0-2].first_column);
break;
case 107:
this.$ = new Operacion($$[$0-2],$$[$0],Operador.ELEVADO, _$[$0-2].first_line, _$[$0-2].first_column);
break;
case 108:
this.$ = new Operacion($$[$0-2],$$[$0],Operador.MODULO, _$[$0-2].first_line, _$[$0-2].first_column);
break;
case 110:
this.$ = new Operacion($$[$0-1],$$[$01],Operador.MENOS_UNARIO, _$[$0-1].first_line, _$[$0-1].first_column);
break;
case 111:
this.$ = new Operacion($$[$0-1],$$[$01],Operador.NOT, _$[$0-1].first_line, _$[$0-1].first_column);
break;
case 112:
this.$ = new Operacion($$[$0-1],null,Operador.INCREMENTO, _$[$0-1].first_line, _$[$0-1].first_column);
break;
case 113:
this.$ = new Operacion($$[$0-1],null,Operador.DECREMENTO, _$[$0-1].first_line, _$[$0-1].first_column);
break;
case 114:
this.$ = new Operacion($$[$0-3],$$[$0-1],Operador.POW, _$[$0-5].first_line, _$[$0-5].first_column);
break;
case 115:
this.$ = new Operacion($$[$0-1],null,Operador.SQRT, _$[$0-3].first_line, _$[$0-3].first_column);
break;
case 116:
this.$ = new Operacion($$[$0-1],null,Operador.SIN, _$[$0-3].first_line, _$[$0-3].first_column);
break;
case 117:
this.$ = new Operacion($$[$0-1],null,Operador.COS, _$[$0-3].first_line, _$[$0-3].first_column);
break;
case 118:
this.$ = new Operacion($$[$0-1],null,Operador.TAN, _$[$0-3].first_line, _$[$0-3].first_column);
break;
case 119:
this.$ = new Primitivo(false, _$[$0].first_line, _$[$0].first_column);
break;
case 120:
this.$ = new Primitivo(true, _$[$0].first_line, _$[$0].first_column);
break;
case 121: case 122:
this.$ = new Primitivo(Number($$[$0]), _$[$0].first_line, _$[$0].first_column);
break;
case 123: case 124:
this.$ = new Primitivo($$[$0], _$[$0].first_line, _$[$0].first_column);
break;
case 125:
this.$ = new AccesoVariable($$[$0], _$[$0].first_line, _$[$0].first_column);
break;
}
},
table: [{2:$V0,3:1,4:[1,2],5:3,6:4,7:5,8:6,9:7,10:8,11:$V1,12:$V2,20:10,21:$V3,49:11,70:$V4,71:$V5,72:$V6,73:$V7,74:$V8},{1:[3]},{1:[2,1]},{2:$V0,4:[1,20],6:21,7:5,8:6,9:7,10:8,11:$V1,12:$V2,20:10,21:$V3,49:11,70:$V4,71:$V5,72:$V6,73:$V7,74:$V8},o($V9,[2,4]),o($V9,[2,5]),o($V9,[2,6]),o($V9,[2,7]),o($V9,[2,8]),o($V9,[2,9]),{12:[1,23],49:22},{50:24,75:$Va},{22:[1,26]},{12:[1,27]},{12:[2,78]},{12:[2,79]},{12:[2,80]},{12:[2,81]},{12:[2,82]},o($Vb,$Vc,{19:$Vd}),{1:[2,2]},o($V9,[2,3]),{16:[1,29],50:30,75:$Va},o($Vb,$Vc,{19:$Vd,23:[1,31]}),{16:[1,32]},{12:$Ve,23:$Vf,37:33,76:34,77:35,78:36,79:37,80:38,81:39,82:40,95:$Vg,99:$Vh,102:$Vi,103:$Vj,104:$Vk,105:$Vl,106:$Vm,107:$Vn,108:$Vo,109:$Vp,110:$Vq,111:$Vr,112:$Vs},{23:[1,56]},{13:57,14:[1,58]},{12:$V2,49:59},o($Vt,[2,50]),{16:[1,60]},{20:63,24:$Vu,26:61,27:62,70:$V4,71:$V5,72:$V6,73:$V7,74:$V8},o($Vt,[2,52]),{16:[2,85],83:$Vv,84:$Vw,85:$Vx,86:$Vy,87:$Vz,88:$VA,89:$VB,90:$VC,91:$VD,92:$VE,93:$VF,94:$VG,95:$VH,96:$VI,97:$VJ,98:$VK,100:$VL,101:$VM},o($VN,[2,86]),o($VN,[2,87]),o($VN,[2,88]),o($VN,[2,89]),o($VN,[2,90]),o($VN,[2,91]),o($VN,[2,92]),o($VN,[2,119]),o($VN,[2,120]),o($VN,[2,121]),o($VN,[2,122]),o($VN,[2,123]),o($VN,[2,124]),o($VN,[2,125]),{12:$Ve,23:$Vf,37:82,76:34,77:35,78:36,79:37,80:38,81:39,82:40,95:$Vg,99:$Vh,102:$Vi,103:$Vj,104:$Vk,105:$Vl,106:$Vm,107:$Vn,108:$Vo,109:$Vp,110:$Vq,111:$Vr,112:$Vs},{12:$Ve,23:$Vf,37:83,76:34,77:35,78:36,79:37,80:38,81:39,82:40,95:$Vg,99:$Vh,102:$Vi,103:$Vj,104:$Vk,105:$Vl,106:$Vm,107:$Vn,108:$Vo,109:$Vp,110:$Vq,111:$Vr,112:$Vs},{12:$Ve,23:$Vf,37:84,76:34,77:35,78:36,79:37,80:38,81:39,82:40,95:$Vg,99:$Vh,102:$Vi,103:$Vj,104:$Vk,105:$Vl,106:$Vm,107:$Vn,108:$Vo,109:$Vp,110:$Vq,111:$Vr,112:$Vs},{23:[1,85]},{23:[1,86]},{23:[1,87]},{23:[1,88]},{23:[1,89]},{24:[1,90]},o($V9,[2,10]),{12:$VO,15:[1,91],17:92,18:93,20:94,70:$V4,71:$V5,72:$V6,73:$V7,74:$V8},o($Vb,[2,84]),o($Vt,[2,51]),{24:[1,96]},{19:[1,97],24:[2,20]},{12:[1,98]},{12:$Ve,23:$Vf,37:99,76:34,77:35,78:36,79:37,80:38,81:39,82:40,95:$Vg,99:$Vh,102:$Vi,103:$Vj,104:$Vk,105:$Vl,106:$Vm,107:$Vn,108:$Vo,109:$Vp,110:$Vq,111:$Vr,112:$Vs},{12:$Ve,23:$Vf,37:100,76:34,77:35,78:36,79:37,80:38,81:39,82:40,95:$Vg,99:$Vh,102:$Vi,103:$Vj,104:$Vk,105:$Vl,106:$Vm,107:$Vn,108:$Vo,109:$Vp,110:$Vq,111:$Vr,112:$Vs},{12:$Ve,23:$Vf,37:101,76:34,77:35,78:36,79:37,80:38,81:39,82:40,95:$Vg,99:$Vh,102:$Vi,103:$Vj,104:$Vk,105:$Vl,106:$Vm,107:$Vn,108:$Vo,109:$Vp,110:$Vq,111:$Vr,112:$Vs},{12:$Ve,23:$Vf,37:102,76:34,77:35,78:36,79:37,80:38,81:39,82:40,95:$Vg,99:$Vh,102:$Vi,103:$Vj,104:$Vk,105:$Vl,106:$Vm,107:$Vn,108:$Vo,109:$Vp,110:$Vq,111:$Vr,112:$Vs},{12:$Ve,23:$Vf,37:103,76:34,77:35,78:36,79:37,80:38,81:39,82:40,95:$Vg,99:$Vh,102:$Vi,103:$Vj,104:$Vk,105:$Vl,106:$Vm,107:$Vn,108:$Vo,109:$Vp,110:$Vq,111:$Vr,112:$Vs},{12:$Ve,23:$Vf,37:104,76:34,77:35,78:36,79:37,80:38,81:39,82:40,95:$Vg,99:$Vh,102:$Vi,103:$Vj,104:$Vk,105:$Vl,106:$Vm,107:$Vn,108:$Vo,109:$Vp,110:$Vq,111:$Vr,112:$Vs},{12:$Ve,23:$Vf,37:105,76:34,77:35,78:36,79:37,80:38,81:39,82:40,95:$Vg,99:$Vh,102:$Vi,103:$Vj,104:$Vk,105:$Vl,106:$Vm,107:$Vn,108:$Vo,109:$Vp,110:$Vq,111:$Vr,112:$Vs},{12:$Ve,23:$Vf,37:106,76:34,77:35,78:36,79:37,80:38,81:39,82:40,95:$Vg,99:$Vh,102:$Vi,103:$Vj,104:$Vk,105:$Vl,106:$Vm,107:$Vn,108:$Vo,109:$Vp,110:$Vq,111:$Vr,112:$Vs},{12:$Ve,23:$Vf,37:107,76:34,77:35,78:36,79:37,80:38,81:39,82:40,95:$Vg,99:$Vh,102:$Vi,103:$Vj,104:$Vk,105:$Vl,106:$Vm,107:$Vn,108:$Vo,109:$Vp,110:$Vq,111:$Vr,112:$Vs},{12:$Ve,23:$Vf,37:108,76:34,77:35,78:36,79:37,80:38,81:39,82:40,95:$Vg,99:$Vh,102:$Vi,103:$Vj,104:$Vk,105:$Vl,106:$Vm,107:$Vn,108:$Vo,109:$Vp,110:$Vq,111:$Vr,112:$Vs},{12:$Ve,23:$Vf,37:109,76:34,77:35,78:36,79:37,80:38,81:39,82:40,95:$Vg,99:$Vh,102:$Vi,103:$Vj,104:$Vk,105:$Vl,106:$Vm,107:$Vn,108:$Vo,109:$Vp,110:$Vq,111:$Vr,112:$Vs},{12:$Ve,23:$Vf,37:110,76:34,77:35,78:36,79:37,80:38,81:39,82:40,95:$Vg,99:$Vh,102:$Vi,103:$Vj,104:$Vk,105:$Vl,106:$Vm,107:$Vn,108:$Vo,109:$Vp,110:$Vq,111:$Vr,112:$Vs},{12:$Ve,23:$Vf,37:111,76:34,77:35,78:36,79:37,80:38,81:39,82:40,95:$Vg,99:$Vh,102:$Vi,103:$Vj,104:$Vk,105:$Vl,106:$Vm,107:$Vn,108:$Vo,109:$Vp,110:$Vq,111:$Vr,112:$Vs},{12:$Ve,23:$Vf,37:112,76:34,77:35,78:36,79:37,80:38,81:39,82:40,95:$Vg,99:$Vh,102:$Vi,103:$Vj,104:$Vk,105:$Vl,106:$Vm,107:$Vn,108:$Vo,109:$Vp,110:$Vq,111:$Vr,112:$Vs},{12:$Ve,23:$Vf,37:113,76:34,77:35,78:36,79:37,80:38,81:39,82:40,95:$Vg,99:$Vh,102:$Vi,103:$Vj,104:$Vk,105:$Vl,106:$Vm,107:$Vn,108:$Vo,109:$Vp,110:$Vq,111:$Vr,112:$Vs},{12:$Ve,23:$Vf,37:114,76:34,77:35,78:36,79:37,80:38,81:39,82:40,95:$Vg,99:$Vh,102:$Vi,103:$Vj,104:$Vk,105:$Vl,106:$Vm,107:$Vn,108:$Vo,109:$Vp,110:$Vq,111:$Vr,112:$Vs},o($VN,[2,112]),o($VN,[2,113]),{24:[1,115],83:$Vv,84:$Vw,85:$Vx,86:$Vy,87:$Vz,88:$VA,89:$VB,90:$VC,91:$VD,92:$VE,93:$VF,94:$VG,95:$VH,96:$VI,97:$VJ,98:$VK,100:$VL,101:$VM},o($VP,[2,110],{100:$VL,101:$VM}),o($VP,[2,111],{100:$VL,101:$VM}),{12:$Ve,23:$Vf,37:116,76:34,77:35,78:36,79:37,80:38,81:39,82:40,95:$Vg,99:$Vh,102:$Vi,103:$Vj,104:$Vk,105:$Vl,106:$Vm,107:$Vn,108:$Vo,109:$Vp,110:$Vq,111:$Vr,112:$Vs},{12:$Ve,23:$Vf,37:117,76:34,77:35,78:36,79:37,80:38,81:39,82:40,95:$Vg,99:$Vh,102:$Vi,103:$Vj,104:$Vk,105:$Vl,106:$Vm,107:$Vn,108:$Vo,109:$Vp,110:$Vq,111:$Vr,112:$Vs},{12:$Ve,23:$Vf,37:118,76:34,77:35,78:36,79:37,80:38,81:39,82:40,95:$Vg,99:$Vh,102:$Vi,103:$Vj,104:$Vk,105:$Vl,106:$Vm,107:$Vn,108:$Vo,109:$Vp,110:$Vq,111:$Vr,112:$Vs},{12:$Ve,23:$Vf,37:119,76:34,77:35,78:36,79:37,80:38,81:39,82:40,95:$Vg,99:$Vh,102:$Vi,103:$Vj,104:$Vk,105:$Vl,106:$Vm,107:$Vn,108:$Vo,109:$Vp,110:$Vq,111:$Vr,112:$Vs},{12:$Ve,23:$Vf,37:120,76:34,77:35,78:36,79:37,80:38,81:39,82:40,95:$Vg,99:$Vh,102:$Vi,103:$Vj,104:$Vk,105:$Vl,106:$Vm,107:$Vn,108:$Vo,109:$Vp,110:$Vq,111:$Vr,112:$Vs},{14:$VQ,25:121},{16:[1,123]},{15:[1,124]},{15:[2,13],19:[1,125]},{12:[1,126]},{12:[1,127]},{14:$VQ,25:128},{20:63,24:$Vu,26:129,27:62,70:$V4,71:$V5,72:$V6,73:$V7,74:$V8},o([19,24],[2,22]),o([16,19,24,43,67,84,85],[2,94],{83:$Vv,86:$Vy,87:$Vz,88:$VA,89:$VB,90:$VC,91:$VD,92:$VE,93:$VF,94:$VG,95:$VH,96:$VI,97:$VJ,98:$VK,100:$VL,101:$VM}),o([16,19,24,43,67,85],[2,95],{83:$Vv,84:$Vw,86:$Vy,87:$Vz,88:$VA,89:$VB,90:$VC,91:$VD,92:$VE,93:$VF,94:$VG,95:$VH,96:$VI,97:$VJ,98:$VK,100:$VL,101:$VM}),o($VR,[2,102],{83:$Vv,97:$VJ,100:$VL,101:$VM}),o($VR,[2,103],{83:$Vv,97:$VJ,100:$VL,101:$VM}),o($VS,[2,104],{83:$Vv,92:$VE,93:$VF,97:$VJ,98:$VK,100:$VL,101:$VM}),o($VS,[2,105],{83:$Vv,92:$VE,93:$VF,97:$VJ,98:$VK,100:$VL,101:$VM}),o($VS,[2,106],{83:$Vv,92:$VE,93:$VF,97:$VJ,98:$VK,100:$VL,101:$VM}),o($VP,[2,107],{100:$VL,101:$VM}),o($VR,[2,108],{83:$Vv,97:$VJ,100:$VL,101:$VM}),o($VT,[2,96],{83:$Vv,92:$VE,93:$VF,94:$VG,95:$VH,96:$VI,97:$VJ,98:$VK,100:$VL,101:$VM}),o($VT,[2,97],{83:$Vv,92:$VE,93:$VF,94:$VG,95:$VH,96:$VI,97:$VJ,98:$VK,100:$VL,101:$VM}),o($VT,[2,98],{83:$Vv,92:$VE,93:$VF,94:$VG,95:$VH,96:$VI,97:$VJ,98:$VK,100:$VL,101:$VM}),o($VT,[2,99],{83:$Vv,92:$VE,93:$VF,94:$VG,95:$VH,96:$VI,97:$VJ,98:$VK,100:$VL,101:$VM}),o($VT,[2,100],{83:$Vv,92:$VE,93:$VF,94:$VG,95:$VH,96:$VI,97:$VJ,98:$VK,100:$VL,101:$VM}),o($VT,[2,101],{83:$Vv,92:$VE,93:$VF,94:$VG,95:$VH,96:$VI,97:$VJ,98:$VK,100:$VL,101:$VM}),{43:[1,130],83:$Vv,84:$Vw,85:$Vx,86:$Vy,87:$Vz,88:$VA,89:$VB,90:$VC,91:$VD,92:$VE,93:$VF,94:$VG,95:$VH,96:$VI,97:$VJ,98:$VK,100:$VL,101:$VM},o($VN,[2,109]),{19:[1,131],83:$Vv,84:$Vw,85:$Vx,86:$Vy,87:$Vz,88:$VA,89:$VB,90:$VC,91:$VD,92:$VE,93:$VF,94:$VG,95:$VH,96:$VI,97:$VJ,98:$VK,100:$VL,101:$VM},{24:[1,132],83:$Vv,84:$Vw,85:$Vx,86:$Vy,87:$Vz,88:$VA,89:$VB,90:$VC,91:$VD,92:$VE,93:$VF,94:$VG,95:$VH,96:$VI,97:$VJ,98:$VK,100:$VL,101:$VM},{24:[1,133],83:$Vv,84:$Vw,85:$Vx,86:$Vy,87:$Vz,88:$VA,89:$VB,90:$VC,91:$VD,92:$VE,93:$VF,94:$VG,95:$VH,96:$VI,97:$VJ,98:$VK,100:$VL,101:$VM},{24:[1,134],83:$Vv,84:$Vw,85:$Vx,86:$Vy,87:$Vz,88:$VA,89:$VB,90:$VC,91:$VD,92:$VE,93:$VF,94:$VG,95:$VH,96:$VI,97:$VJ,98:$VK,100:$VL,101:$VM},{24:[1,135],83:$Vv,84:$Vw,85:$Vx,86:$Vy,87:$Vz,88:$VA,89:$VB,90:$VC,91:$VD,92:$VE,93:$VF,94:$VG,95:$VH,96:$VI,97:$VJ,98:$VK,100:$VL,101:$VM},o($V9,[2,17]),{2:$VU,7:139,8:140,12:$VV,15:[1,137],20:147,28:136,29:138,30:141,31:142,32:143,33:144,34:145,35:146,36:$VW,49:11,51:$VX,52:$VY,53:$VZ,58:$V_,63:$V$,64:$V01,70:$V4,71:$V5,72:$V6,73:$V7,74:$V8},o($V9,[2,11]),{16:[1,157]},{12:$VO,17:158,18:93,20:94,70:$V4,71:$V5,72:$V6,73:$V7,74:$V8},o($V11,[2,15]),o($V11,[2,16]),o($V9,[2,18]),{24:[2,19]},{12:$Ve,23:$Vf,37:159,76:34,77:35,78:36,79:37,80:38,81:39,82:40,95:$Vg,99:$Vh,102:$Vi,103:$Vj,104:$Vk,105:$Vl,106:$Vm,107:$Vn,108:$Vo,109:$Vp,110:$Vq,111:$Vr,112:$Vs},{12:$Ve,23:$Vf,37:160,76:34,77:35,78:36,79:37,80:38,81:39,82:40,95:$Vg,99:$Vh,102:$Vi,103:$Vj,104:$Vk,105:$Vl,106:$Vm,107:$Vn,108:$Vo,109:$Vp,110:$Vq,111:$Vr,112:$Vs},o($VN,[2,115]),o($VN,[2,116]),o($VN,[2,117]),o($VN,[2,118]),{2:$VU,7:139,8:140,12:$VV,15:[1,161],20:147,29:162,30:141,31:142,32:143,33:144,34:145,35:146,36:$VW,49:11,51:$VX,52:$VY,53:$VZ,58:$V_,63:$V$,64:$V01,70:$V4,71:$V5,72:$V6,73:$V7,74:$V8},o($V21,[2,24]),o($V31,[2,26]),o($V31,[2,27]),o($V31,[2,28]),o($V31,[2,29]),o($V31,[2,30]),o($V31,[2,31]),o($V31,[2,32]),o($V31,[2,33]),o($V31,[2,34]),{12:$V2,49:22},{23:[1,163]},{23:[1,164]},{23:[1,165]},{12:[1,167],23:[1,166]},{23:[1,168]},{14:$VQ,25:169},{23:[1,170]},o($V31,[2,37]),{19:$Vd,23:[1,171],75:$Vc},o($V9,[2,12]),{15:[2,14]},o($VP,[2,93],{100:$VL,101:$VM}),{24:[1,172],83:$Vv,84:$Vw,85:$Vx,86:$Vy,87:$Vz,88:$VA,89:$VB,90:$VC,91:$VD,92:$VE,93:$VF,94:$VG,95:$VH,96:$VI,97:$VJ,98:$VK,100:$VL,101:$VM},o($V21,[2,23]),o($V31,[2,25]),{12:$Ve,23:$Vf,37:173,76:34,77:35,78:36,79:37,80:38,81:39,82:40,95:$Vg,99:$Vh,102:$Vi,103:$Vj,104:$Vk,105:$Vl,106:$Vm,107:$Vn,108:$Vo,109:$Vp,110:$Vq,111:$Vr,112:$Vs},{12:$Ve,23:$Vf,37:174,76:34,77:35,78:36,79:37,80:38,81:39,82:40,95:$Vg,99:$Vh,102:$Vi,103:$Vj,104:$Vk,105:$Vl,106:$Vm,107:$Vn,108:$Vo,109:$Vp,110:$Vq,111:$Vr,112:$Vs},{12:$Ve,23:$Vf,37:175,76:34,77:35,78:36,79:37,80:38,81:39,82:40,95:$Vg,99:$Vh,102:$Vi,103:$Vj,104:$Vk,105:$Vl,106:$Vm,107:$Vn,108:$Vo,109:$Vp,110:$Vq,111:$Vr,112:$Vs},{12:$V2,20:177,49:178,59:176,70:$V4,71:$V5,72:$V6,73:$V7,74:$V8},{60:[1,179]},{12:$Ve,23:$Vf,37:180,76:34,77:35,78:36,79:37,80:38,81:39,82:40,95:$Vg,99:$Vh,102:$Vi,103:$Vj,104:$Vk,105:$Vl,106:$Vm,107:$Vn,108:$Vo,109:$Vp,110:$Vq,111:$Vr,112:$Vs},{63:[1,181]},{12:$Ve,23:$Vf,37:182,76:34,77:35,78:36,79:37,80:38,81:39,82:40,95:$Vg,99:$Vh,102:$Vi,103:$Vj,104:$Vk,105:$Vl,106:$Vm,107:$Vn,108:$Vo,109:$Vp,110:$Vq,111:$Vr,112:$Vs},{20:63,24:$Vu,26:183,27:62,70:$V4,71:$V5,72:$V6,73:$V7,74:$V8},o($VN,[2,114]),{24:[1,184],83:$Vv,84:$Vw,85:$Vx,86:$Vy,87:$Vz,88:$VA,89:$VB,90:$VC,91:$VD,92:$VE,93:$VF,94:$VG,95:$VH,96:$VI,97:$VJ,98:$VK,100:$VL,101:$VM},{24:[1,185],83:$Vv,84:$Vw,85:$Vx,86:$Vy,87:$Vz,88:$VA,89:$VB,90:$VC,91:$VD,92:$VE,93:$VF,94:$VG,95:$VH,96:$VI,97:$VJ,98:$VK,100:$VL,101:$VM},{24:[1,186],83:$Vv,84:$Vw,85:$Vx,86:$Vy,87:$Vz,88:$VA,89:$VB,90:$VC,91:$VD,92:$VE,93:$VF,94:$VG,95:$VH,96:$VI,97:$VJ,98:$VK,100:$VL,101:$VM},{16:[1,187]},{12:$V2,49:188},{50:189,75:$Va},{12:[1,190],61:191,62:192,65:[1,193]},{24:[1,194],83:$Vv,84:$Vw,85:$Vx,86:$Vy,87:$Vz,88:$VA,89:$VB,90:$VC,91:$VD,92:$VE,93:$VF,94:$VG,95:$VH,96:$VI,97:$VJ,98:$VK,100:$VL,101:$VM},{23:[1,195]},{24:[1,196],83:$Vv,84:$Vw,85:$Vx,86:$Vy,87:$Vz,88:$VA,89:$VB,90:$VC,91:$VD,92:$VE,93:$VF,94:$VG,95:$VH,96:$VI,97:$VJ,98:$VK,100:$VL,101:$VM},{24:[1,197]},{16:[1,198]},{16:[1,199]},{2:$VU,7:139,8:140,12:$VV,14:$VQ,20:147,25:200,29:201,30:141,31:142,32:143,33:144,34:145,35:146,36:$VW,49:11,51:$VX,52:$VY,53:$VZ,58:$V_,63:$V$,64:$V01,70:$V4,71:$V5,72:$V6,73:$V7,74:$V8},{12:$Ve,23:$Vf,37:202,76:34,77:35,78:36,79:37,80:38,81:39,82:40,95:$Vg,99:$Vh,102:$Vi,103:$Vj,104:$Vk,105:$Vl,106:$Vm,107:$Vn,108:$Vo,109:$Vp,110:$Vq,111:$Vr,112:$Vs},{50:203,75:$Va},{16:[2,70]},{14:$VQ,25:204,65:[1,205]},{14:$VQ,25:206},{14:$VQ,25:207},{12:$Ve,23:$Vf,37:209,66:208,76:34,77:35,78:36,79:37,80:38,81:39,82:40,95:$Vg,99:$Vh,102:$Vi,103:$Vj,104:$Vk,105:$Vl,106:$Vm,107:$Vn,108:$Vo,109:$Vp,110:$Vq,111:$Vr,112:$Vs},{14:$VQ,25:210},{12:$Ve,23:$Vf,37:211,76:34,77:35,78:36,79:37,80:38,81:39,82:40,95:$Vg,99:$Vh,102:$Vi,103:$Vj,104:$Vk,105:$Vl,106:$Vm,107:$Vn,108:$Vo,109:$Vp,110:$Vq,111:$Vr,112:$Vs},{14:[1,213],38:212},{16:[1,214]},o($V31,[2,53]),o($V31,[2,54]),o($V31,$V41,{54:215,56:$V51,57:$V61}),o($V31,[2,56]),{16:[1,218],83:$Vv,84:$Vw,85:$Vx,86:$Vy,87:$Vz,88:$VA,89:$VB,90:$VC,91:$VD,92:$VE,93:$VF,94:$VG,95:$VH,96:$VI,97:$VJ,98:$VK,100:$VL,101:$VM},{16:[2,69]},o($V31,[2,64]),{12:$Ve,23:$Vf,37:219,68:[1,220],76:34,77:35,78:36,79:37,80:38,81:39,82:40,95:$Vg,99:$Vh,102:$Vi,103:$Vj,104:$Vk,105:$Vl,106:$Vm,107:$Vn,108:$Vo,109:$Vp,110:$Vq,111:$Vr,112:$Vs},o($V31,[2,65]),o($V31,[2,66]),{19:[1,222],67:[1,221]},o($V71,[2,72],{83:$Vv,84:$Vw,85:$Vx,86:$Vy,87:$Vz,88:$VA,89:$VB,90:$VC,91:$VD,92:$VE,93:$VF,94:$VG,95:$VH,96:$VI,97:$VJ,98:$VK,100:$VL,101:$VM}),o($V31,[2,67]),{24:[1,223],83:$Vv,84:$Vw,85:$Vx,86:$Vy,87:$Vz,88:$VA,89:$VB,90:$VC,91:$VD,92:$VE,93:$VF,94:$VG,95:$VH,96:$VI,97:$VJ,98:$VK,100:$VL,101:$VM},o($V31,[2,36]),{15:[1,224],39:225,41:226,42:$V81},o($V31,[2,35]),o($V31,[2,55]),{2:$VU,7:139,8:140,12:$VV,14:$VQ,20:147,25:228,29:230,30:141,31:142,32:143,33:144,34:145,35:146,36:$VW,49:11,51:$VX,52:$VY,53:$VZ,55:229,58:$V_,63:$V$,64:$V01,70:$V4,71:$V5,72:$V6,73:$V7,74:$V8},{23:[1,231]},{12:$Ve,23:$Vf,37:232,76:34,77:35,78:36,79:37,80:38,81:39,82:40,95:$Vg,99:$Vh,102:$Vi,103:$Vj,104:$Vk,105:$Vl,106:$Vm,107:$Vn,108:$Vo,109:$Vp,110:$Vq,111:$Vr,112:$Vs},{43:[1,233],83:$Vv,84:$Vw,85:$Vx,86:$Vy,87:$Vz,88:$VA,89:$VB,90:$VC,91:$VD,92:$VE,93:$VF,94:$VG,95:$VH,96:$VI,97:$VJ,98:$VK,100:$VL,101:$VM},{43:[1,234]},{14:[2,71]},{12:$Ve,23:$Vf,37:235,76:34,77:35,78:36,79:37,80:38,81:39,82:40,95:$Vg,99:$Vh,102:$Vi,103:$Vj,104:$Vk,105:$Vl,106:$Vm,107:$Vn,108:$Vo,109:$Vp,110:$Vq,111:$Vr,112:$Vs},o($V31,[2,68]),o($V31,[2,38]),{15:[2,46],40:236,41:237,42:$V81,46:[1,238]},o($V91,[2,41]),{12:$Ve,23:$Vf,37:239,76:34,77:35,78:36,79:37,80:38,81:39,82:40,95:$Vg,99:$Vh,102:$Vi,103:$Vj,104:$Vk,105:$Vl,106:$Vm,107:$Vn,108:$Vo,109:$Vp,110:$Vq,111:$Vr,112:$Vs},o($V31,[2,58]),o($V31,[2,59]),o($V31,[2,57]),{12:$Ve,23:$Vf,37:240,76:34,77:35,78:36,79:37,80:38,81:39,82:40,95:$Vg,99:$Vh,102:$Vi,103:$Vj,104:$Vk,105:$Vl,106:$Vm,107:$Vn,108:$Vo,109:$Vp,110:$Vq,111:$Vr,112:$Vs},{24:[1,241],83:$Vv,84:$Vw,85:$Vx,86:$Vy,87:$Vz,88:$VA,89:$VB,90:$VC,91:$VD,92:$VE,93:$VF,94:$VG,95:$VH,96:$VI,97:$VJ,98:$VK,100:$VL,101:$VM},{12:$Ve,23:$Vf,37:242,69:[1,243],76:34,77:35,78:36,79:37,80:38,81:39,82:40,95:$Vg,99:$Vh,102:$Vi,103:$Vj,104:$Vk,105:$Vl,106:$Vm,107:$Vn,108:$Vo,109:$Vp,110:$Vq,111:$Vr,112:$Vs},{12:$Ve,23:$Vf,37:244,69:[1,245],76:34,77:35,78:36,79:37,80:38,81:39,82:40,95:$Vg,99:$Vh,102:$Vi,103:$Vj,104:$Vk,105:$Vl,106:$Vm,107:$Vn,108:$Vo,109:$Vp,110:$Vq,111:$Vr,112:$Vs},o($V71,[2,73],{83:$Vv,84:$Vw,85:$Vx,86:$Vy,87:$Vz,88:$VA,89:$VB,90:$VC,91:$VD,92:$VE,93:$VF,94:$VG,95:$VH,96:$VI,97:$VJ,98:$VK,100:$VL,101:$VM}),{15:[1,246]},o($V91,[2,40]),{43:[1,247]},{43:[1,248],83:$Vv,84:$Vw,85:$Vx,86:$Vy,87:$Vz,88:$VA,89:$VB,90:$VC,91:$VD,92:$VE,93:$VF,94:$VG,95:$VH,96:$VI,97:$VJ,98:$VK,100:$VL,101:$VM},{24:[1,249],83:$Vv,84:$Vw,85:$Vx,86:$Vy,87:$Vz,88:$VA,89:$VB,90:$VC,91:$VD,92:$VE,93:$VF,94:$VG,95:$VH,96:$VI,97:$VJ,98:$VK,100:$VL,101:$VM},{14:$VQ,25:250},{67:[1,251],83:$Vv,84:$Vw,85:$Vx,86:$Vy,87:$Vz,88:$VA,89:$VB,90:$VC,91:$VD,92:$VE,93:$VF,94:$VG,95:$VH,96:$VI,97:$VJ,98:$VK,100:$VL,101:$VM},{67:[1,252]},{67:[1,253],83:$Vv,84:$Vw,85:$Vx,86:$Vy,87:$Vz,88:$VA,89:$VB,90:$VC,91:$VD,92:$VE,93:$VF,94:$VG,95:$VH,96:$VI,97:$VJ,98:$VK,100:$VL,101:$VM},{67:[1,254]},o($V31,[2,39]),{2:$VU,7:139,8:140,12:$VV,15:$Va1,20:147,28:256,29:138,30:141,31:142,32:143,33:144,34:145,35:146,36:$VW,44:255,45:257,47:$Vb1,48:$Vc1,49:11,51:$VX,52:$VY,53:$VZ,58:$V_,63:$V$,64:$V01,70:$V4,71:$V5,72:$V6,73:$V7,74:$V8},o($V91,$Va1,{49:11,29:138,7:139,8:140,30:141,31:142,32:143,33:144,34:145,35:146,20:147,28:256,45:257,44:260,2:$VU,12:$VV,36:$VW,47:$Vb1,48:$Vc1,51:$VX,52:$VY,53:$VZ,58:$V_,63:$V$,64:$V01,70:$V4,71:$V5,72:$V6,73:$V7,74:$V8}),{2:$VU,7:139,8:140,12:$VV,14:$VQ,20:147,25:261,29:230,30:141,31:142,32:143,33:144,34:145,35:146,36:$VW,49:11,51:$VX,52:$VY,53:$VZ,55:262,58:$V_,63:$V$,64:$V01,70:$V4,71:$V5,72:$V6,73:$V7,74:$V8},o($V31,[2,63]),{14:[2,74]},{14:[2,77]},{14:[2,75]},{14:[2,76]},{15:[2,45]},o($V91,$Va1,{49:11,7:139,8:140,30:141,31:142,32:143,33:144,34:145,35:146,20:147,29:162,45:263,2:$VU,12:$VV,36:$VW,47:$Vb1,48:$Vc1,51:$VX,52:$VY,53:$VZ,58:$V_,63:$V$,64:$V01,70:$V4,71:$V5,72:$V6,73:$V7,74:$V8}),o($V91,[2,44]),{16:[1,264]},{16:[1,265]},o($V91,[2,42]),o($V31,$V41,{54:266,56:$V51,57:$V61}),o($V31,[2,61]),o($V91,[2,43]),o($V91,[2,47]),o($V91,[2,48]),o($V31,[2,60])],
defaultActions: {2:[2,1],14:[2,78],15:[2,79],16:[2,80],17:[2,81],18:[2,82],20:[2,2],129:[2,19],158:[2,14],189:[2,70],203:[2,69],221:[2,71],251:[2,74],252:[2,77],253:[2,75],254:[2,76],255:[2,45]},
parseError: function parseError (str, hash) {
    if (hash.recoverable) {
        this.trace(str);
    } else {
        var error = new Error(str);
        error.hash = hash;
        throw error;
    }
},
parse: function parse (input) {
    var self = this,
        stack = [0],
        tstack = [], // token stack
        vstack = [null], // semantic value stack
        lstack = [], // location stack
        table = this.table,
        yytext = '',
        yylineno = 0,
        yyleng = 0,
        recovering = 0,
        TERROR = 2,
        EOF = 1;

    var args = lstack.slice.call(arguments, 1);

    //this.reductionCount = this.shiftCount = 0;

    var lexer = Object.create(this.lexer);
    var sharedState = { yy: {} };
    // copy state
    for (var k in this.yy) {
      if (Object.prototype.hasOwnProperty.call(this.yy, k)) {
        sharedState.yy[k] = this.yy[k];
      }
    }

    lexer.setInput(input, sharedState.yy);
    sharedState.yy.lexer = lexer;
    sharedState.yy.parser = this;
    if (typeof lexer.yylloc == 'undefined') {
        lexer.yylloc = {};
    }
    var yyloc = lexer.yylloc;
    lstack.push(yyloc);

    var ranges = lexer.options && lexer.options.ranges;

    if (typeof sharedState.yy.parseError === 'function') {
        this.parseError = sharedState.yy.parseError;
    } else {
        this.parseError = Object.getPrototypeOf(this).parseError;
    }

    function popStack (n) {
        stack.length = stack.length - 2 * n;
        vstack.length = vstack.length - n;
        lstack.length = lstack.length - n;
    }

_token_stack:
    var lex = function () {
        var token;
        token = lexer.lex() || EOF;
        // if token isn't its numeric value, convert
        if (typeof token !== 'number') {
            token = self.symbols_[token] || token;
        }
        return token;
    }

    var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;
    while (true) {
        // retreive state number from top of stack
        state = stack[stack.length - 1];

        // use default actions if available
        if (this.defaultActions[state]) {
            action = this.defaultActions[state];
        } else {
            if (symbol === null || typeof symbol == 'undefined') {
                symbol = lex();
            }
            // read action for current state and first input
            action = table[state] && table[state][symbol];
        }

_handle_error:
        // handle parse error
        if (typeof action === 'undefined' || !action.length || !action[0]) {
            var error_rule_depth;
            var errStr = '';

            // Return the rule stack depth where the nearest error rule can be found.
            // Return FALSE when no error recovery rule was found.
            function locateNearestErrorRecoveryRule(state) {
                var stack_probe = stack.length - 1;
                var depth = 0;

                // try to recover from error
                for(;;) {
                    // check for error recovery rule in this state
                    if ((TERROR.toString()) in table[state]) {
                        return depth;
                    }
                    if (state === 0 || stack_probe < 2) {
                        return false; // No suitable error recovery rule available.
                    }
                    stack_probe -= 2; // popStack(1): [symbol, action]
                    state = stack[stack_probe];
                    ++depth;
                }
            }

            if (!recovering) {
                // first see if there's any chance at hitting an error recovery rule:
                error_rule_depth = locateNearestErrorRecoveryRule(state);

                // Report error
                expected = [];
                for (p in table[state]) {
                    if (this.terminals_[p] && p > TERROR) {
                        expected.push("'"+this.terminals_[p]+"'");
                    }
                }
                if (lexer.showPosition) {
                    errStr = 'Parse error on line '+(yylineno+1)+":\n"+lexer.showPosition()+"\nExpecting "+expected.join(', ') + ", got '" + (this.terminals_[symbol] || symbol)+ "'";
                } else {
                    errStr = 'Parse error on line '+(yylineno+1)+": Unexpected " +
                                  (symbol == EOF ? "end of input" :
                                              ("'"+(this.terminals_[symbol] || symbol)+"'"));
                }
                this.parseError(errStr, {
                    text: lexer.match,
                    token: this.terminals_[symbol] || symbol,
                    line: lexer.yylineno,
                    loc: yyloc,
                    expected: expected,
                    recoverable: (error_rule_depth !== false)
                });
            } else if (preErrorSymbol !== EOF) {
                error_rule_depth = locateNearestErrorRecoveryRule(state);
            }

            // just recovered from another error
            if (recovering == 3) {
                if (symbol === EOF || preErrorSymbol === EOF) {
                    throw new Error(errStr || 'Parsing halted while starting to recover from another error.');
                }

                // discard current lookahead and grab another
                yyleng = lexer.yyleng;
                yytext = lexer.yytext;
                yylineno = lexer.yylineno;
                yyloc = lexer.yylloc;
                symbol = lex();
            }

            // try to recover from error
            if (error_rule_depth === false) {
                throw new Error(errStr || 'Parsing halted. No suitable error recovery rule available.');
            }
            popStack(error_rule_depth);

            preErrorSymbol = (symbol == TERROR ? null : symbol); // save the lookahead token
            symbol = TERROR;         // insert generic error symbol as new lookahead
            state = stack[stack.length-1];
            action = table[state] && table[state][TERROR];
            recovering = 3; // allow 3 real symbols to be shifted before reporting a new error
        }

        // this shouldn't happen, unless resolve defaults are off
        if (action[0] instanceof Array && action.length > 1) {
            throw new Error('Parse Error: multiple actions possible at state: '+state+', token: '+symbol);
        }

        switch (action[0]) {
            case 1: // shift
                //this.shiftCount++;

                stack.push(symbol);
                vstack.push(lexer.yytext);
                lstack.push(lexer.yylloc);
                stack.push(action[1]); // push state
                symbol = null;
                if (!preErrorSymbol) { // normal execution/no error
                    yyleng = lexer.yyleng;
                    yytext = lexer.yytext;
                    yylineno = lexer.yylineno;
                    yyloc = lexer.yylloc;
                    if (recovering > 0) {
                        recovering--;
                    }
                } else {
                    // error just occurred, resume old lookahead f/ before error
                    symbol = preErrorSymbol;
                    preErrorSymbol = null;
                }
                break;

            case 2:
                // reduce
                //this.reductionCount++;

                len = this.productions_[action[1]][1];

                // perform semantic action
                yyval.$ = vstack[vstack.length-len]; // default to $$ = $1
                // default location, uses first token for firsts, last for lasts
                yyval._$ = {
                    first_line: lstack[lstack.length-(len||1)].first_line,
                    last_line: lstack[lstack.length-1].last_line,
                    first_column: lstack[lstack.length-(len||1)].first_column,
                    last_column: lstack[lstack.length-1].last_column
                };
                if (ranges) {
                  yyval._$.range = [lstack[lstack.length-(len||1)].range[0], lstack[lstack.length-1].range[1]];
                }
                r = this.performAction.apply(yyval, [yytext, yyleng, yylineno, sharedState.yy, action[1], vstack, lstack].concat(args));

                if (typeof r !== 'undefined') {
                    return r;
                }

                // pop off stack
                if (len) {
                    stack = stack.slice(0,-1*len*2);
                    vstack = vstack.slice(0, -1*len);
                    lstack = lstack.slice(0, -1*len);
                }

                stack.push(this.productions_[action[1]][0]);    // push nonterminal (reduce)
                vstack.push(yyval.$);
                lstack.push(yyval._$);
                // goto new state = table[STATE][NONTERMINAL]
                newState = table[stack[stack.length-2]][stack[stack.length-1]];
                stack.push(newState);
                break;

            case 3:
                // accept
                return true;
        }

    }

    return true;
}};

    //const {ErrorCom} = require(['../ts/ErrorCom']);
    /*---CLASES IMPORTADAS---*/
    const {Tipo} = require("../dist/AST/Tipo");
    const {Print} = require("../dist/Instrucciones/Print");
    const {Declaracion} = require("../dist/Instrucciones/Declaracion");    
    const {Asignacion} = require("../dist/Instrucciones/Asignacion");
    const {While} = require("../dist/Instrucciones/While");
    const {DoWhile} = require("../dist/Instrucciones/DoWhile");
    const {Funcion} = require("../dist/Instrucciones/Funcion");
    const {Struct} = require("../dist/Instrucciones/Struct");
    const {Switch} = require("../dist/Instrucciones/Switch");
    const {SwitchCaso} = require("../dist/Instrucciones/SwitchCaso");
    const {Break} = require("../dist/Instrucciones/Break");
    const {Continue} = require("../dist/Instrucciones/Continue");
    const {FuncionReturn} = require("../dist/Instrucciones/FuncionReturn");
    const {Parametro} = require("../dist/Instrucciones/Parametro");
    const {For} = require("../dist/Instrucciones/For");
    const {Forin} = require("../dist/Instrucciones/Forin");
    const {Primitivo} = require("../dist/Expresiones/Primitivo");
    const {AccesoVariable} = require("../dist/Expresiones/AccesoVariable");
    const {ArrbegEnd} = require("../dist/Expresiones/ArrbegEnd");
    const {Operacion, Operador} = require("../dist/Expresiones/Operacion");
    const {Objeto} = require("../dist/Expresiones/Objeto");
    const {Atributo} = require("../dist/Expresiones/Atributo");

    /*---CODIGO INCRUSTADO---*/
    var errores = [
        "Se esperaba una instruccion como : "
    ];

    function genError(desc,linea,columna,val){
        //let errorCom = new ErrorCom("Sintactico",linea,columna,errores[desc],val);
        return errorCom;
    }
/* generated by jison-lex 0.3.4 */
var lexer = (function(){
var lexer = ({

EOF:1,

parseError:function parseError(str, hash) {
        if (this.yy.parser) {
            this.yy.parser.parseError(str, hash);
        } else {
            throw new Error(str);
        }
    },

// resets the lexer, sets new input
setInput:function (input, yy) {
        this.yy = yy || this.yy || {};
        this._input = input;
        this._more = this._backtrack = this.done = false;
        this.yylineno = this.yyleng = 0;
        this.yytext = this.matched = this.match = '';
        this.conditionStack = ['INITIAL'];
        this.yylloc = {
            first_line: 1,
            first_column: 0,
            last_line: 1,
            last_column: 0
        };
        if (this.options.ranges) {
            this.yylloc.range = [0,0];
        }
        this.offset = 0;
        return this;
    },

// consumes and returns one char from the input
input:function () {
        var ch = this._input[0];
        this.yytext += ch;
        this.yyleng++;
        this.offset++;
        this.match += ch;
        this.matched += ch;
        var lines = ch.match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno++;
            this.yylloc.last_line++;
        } else {
            this.yylloc.last_column++;
        }
        if (this.options.ranges) {
            this.yylloc.range[1]++;
        }

        this._input = this._input.slice(1);
        return ch;
    },

// unshifts one char (or a string) into the input
unput:function (ch) {
        var len = ch.length;
        var lines = ch.split(/(?:\r\n?|\n)/g);

        this._input = ch + this._input;
        this.yytext = this.yytext.substr(0, this.yytext.length - len);
        //this.yyleng -= len;
        this.offset -= len;
        var oldLines = this.match.split(/(?:\r\n?|\n)/g);
        this.match = this.match.substr(0, this.match.length - 1);
        this.matched = this.matched.substr(0, this.matched.length - 1);

        if (lines.length - 1) {
            this.yylineno -= lines.length - 1;
        }
        var r = this.yylloc.range;

        this.yylloc = {
            first_line: this.yylloc.first_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.first_column,
            last_column: lines ?
                (lines.length === oldLines.length ? this.yylloc.first_column : 0)
                 + oldLines[oldLines.length - lines.length].length - lines[0].length :
              this.yylloc.first_column - len
        };

        if (this.options.ranges) {
            this.yylloc.range = [r[0], r[0] + this.yyleng - len];
        }
        this.yyleng = this.yytext.length;
        return this;
    },

// When called from action, caches matched text and appends it on next action
more:function () {
        this._more = true;
        return this;
    },

// When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.
reject:function () {
        if (this.options.backtrack_lexer) {
            this._backtrack = true;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });

        }
        return this;
    },

// retain first n characters of the match
less:function (n) {
        this.unput(this.match.slice(n));
    },

// displays already matched input, i.e. for error messages
pastInput:function () {
        var past = this.matched.substr(0, this.matched.length - this.match.length);
        return (past.length > 20 ? '...':'') + past.substr(-20).replace(/\n/g, "");
    },

// displays upcoming input, i.e. for error messages
upcomingInput:function () {
        var next = this.match;
        if (next.length < 20) {
            next += this._input.substr(0, 20-next.length);
        }
        return (next.substr(0,20) + (next.length > 20 ? '...' : '')).replace(/\n/g, "");
    },

// displays the character position where the lexing error occurred, i.e. for error messages
showPosition:function () {
        var pre = this.pastInput();
        var c = new Array(pre.length + 1).join("-");
        return pre + this.upcomingInput() + "\n" + c + "^";
    },

// test the lexed token: return FALSE when not a match, otherwise return token
test_match:function(match, indexed_rule) {
        var token,
            lines,
            backup;

        if (this.options.backtrack_lexer) {
            // save context
            backup = {
                yylineno: this.yylineno,
                yylloc: {
                    first_line: this.yylloc.first_line,
                    last_line: this.last_line,
                    first_column: this.yylloc.first_column,
                    last_column: this.yylloc.last_column
                },
                yytext: this.yytext,
                match: this.match,
                matches: this.matches,
                matched: this.matched,
                yyleng: this.yyleng,
                offset: this.offset,
                _more: this._more,
                _input: this._input,
                yy: this.yy,
                conditionStack: this.conditionStack.slice(0),
                done: this.done
            };
            if (this.options.ranges) {
                backup.yylloc.range = this.yylloc.range.slice(0);
            }
        }

        lines = match[0].match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno += lines.length;
        }
        this.yylloc = {
            first_line: this.yylloc.last_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.last_column,
            last_column: lines ?
                         lines[lines.length - 1].length - lines[lines.length - 1].match(/\r?\n?/)[0].length :
                         this.yylloc.last_column + match[0].length
        };
        this.yytext += match[0];
        this.match += match[0];
        this.matches = match;
        this.yyleng = this.yytext.length;
        if (this.options.ranges) {
            this.yylloc.range = [this.offset, this.offset += this.yyleng];
        }
        this._more = false;
        this._backtrack = false;
        this._input = this._input.slice(match[0].length);
        this.matched += match[0];
        token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);
        if (this.done && this._input) {
            this.done = false;
        }
        if (token) {
            return token;
        } else if (this._backtrack) {
            // recover context
            for (var k in backup) {
                this[k] = backup[k];
            }
            return false; // rule action called reject() implying the next rule should be tested instead.
        }
        return false;
    },

// return next match in input
next:function () {
        if (this.done) {
            return this.EOF;
        }
        if (!this._input) {
            this.done = true;
        }

        var token,
            match,
            tempMatch,
            index;
        if (!this._more) {
            this.yytext = '';
            this.match = '';
        }
        var rules = this._currentRules();
        for (var i = 0; i < rules.length; i++) {
            tempMatch = this._input.match(this.rules[rules[i]]);
            if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
                match = tempMatch;
                index = i;
                if (this.options.backtrack_lexer) {
                    token = this.test_match(tempMatch, rules[i]);
                    if (token !== false) {
                        return token;
                    } else if (this._backtrack) {
                        match = false;
                        continue; // rule action called reject() implying a rule MISmatch.
                    } else {
                        // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
                        return false;
                    }
                } else if (!this.options.flex) {
                    break;
                }
            }
        }
        if (match) {
            token = this.test_match(match, rules[index]);
            if (token !== false) {
                return token;
            }
            // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
            return false;
        }
        if (this._input === "") {
            return this.EOF;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });
        }
    },

// return next match that has a token
lex:function lex () {
        var r = this.next();
        if (r) {
            return r;
        } else {
            return this.lex();
        }
    },

// activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)
begin:function begin (condition) {
        this.conditionStack.push(condition);
    },

// pop the previously active lexer condition state off the condition stack
popState:function popState () {
        var n = this.conditionStack.length - 1;
        if (n > 0) {
            return this.conditionStack.pop();
        } else {
            return this.conditionStack[0];
        }
    },

// produce the lexer rule set which is active for the currently active lexer condition state
_currentRules:function _currentRules () {
        if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {
            return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;
        } else {
            return this.conditions["INITIAL"].rules;
        }
    },

// return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available
topState:function topState (n) {
        n = this.conditionStack.length - 1 - Math.abs(n || 0);
        if (n >= 0) {
            return this.conditionStack[n];
        } else {
            return "INITIAL";
        }
    },

// alias for begin(condition)
pushState:function pushState (condition) {
        this.begin(condition);
    },

// return the number of states currently on the stack
stateStackSize:function stateStackSize() {
        return this.conditionStack.length;
    },
options: {"ranges":true},
performAction: function anonymous(yy,yy_,$avoiding_name_collisions,YY_START) {
var YYSTATE=YY_START;
switch($avoiding_name_collisions) {
case 0:/* skip comments */
break;
case 1:this.begin('comment');
break;
case 2:this.popState();
break;
case 3:/* skip comment content*/
break;
case 4:/* skip whitespace */
break;
case 5:return 14; 
break;
case 6:return 15;
break;
case 7:return 23;
break;
case 8:return 24;
break;
case 9:return 65;
break;
case 10:return 67;
break;
case 11:return 19;
break;
case 12:return 43;
break;
case 13:return 16;
break;
case 14:return "PRINTLN";
break;
case 15:return "PRINT";
break;
case 16:return 21;
break;
case 17:return 22;
break;
case 18:return 53;
break;
case 19:return 57;
break;
case 20:return 56;
break;
case 21:return 63;
break;
case 22:return 64;
break;
case 23:return 58;
break;
case 24:return 47;
break;
case 25:return 48;
break;
case 26:return 36;
break;
case 27:return 42;
break;
case 28:return 46;
break;
case 29:return 108;
break;
case 30:return 107;
break;
case 31:return 'STR_RETURN';
break;
case 32:return 73;
break;
case 33:return 72;
break;
case 34:return 71;
break;
case 35:return 74;
break;
case 36:return 70;
break;
case 37:return 11;
break;
case 38:return 68;
break;
case 39:return 69;
break;
case 40:return 'STR_FUNCTION';
break;
case 41:return 60;
break;
case 42:return 102;
break;
case 43:return 103;
break;
case 44:return 104;
break;
case 45:return 105;
break;
case 46:return 106;
break;
case 47:return 'STR_PARSE';
break;
case 48:return 'STR_TOINT';
break;
case 49:return 'STR_TODOUBLE';
break;
case 50:return 'STR_string';
break;
case 51:return 'STR_TYPEOF';
break;
case 52:return 'STR_PUSH';
break;
case 53:return 'STR_POP';
break;
case 54:return 'CHARPOS';
break;
case 55:return 'SUBSTRING';
break;
case 56:return 'LENGTH';
break;
case 57:return 'UPPERCASE';
break;
case 58:return 'LOWERCASE';
break;
case 59:return 89;
break;
case 60:return 90;
break;
case 61:return 86;
break;
case 62:return 88;
break;
case 63:return 91;
break;
case 64:return 87;
break;
case 65:return 85;
break;
case 66:return 84;
break;
case 67:return 96;
break;
case 68:return 99;
break;
case 69:return 75;
break;
case 70:return 'OP_MASIG';
break;
case 71:return 'OP_RESIG';
break;
case 72:return 'OP_PORIG';
break;
case 73:return 'OP_DIVIG';
break;
case 74:return 'OP_MODIG';
break;
case 75:return 100;
break;
case 76:return 94;
break;
case 77:return 101;
break;
case 78:return 95;
break;
case 79:return 92;
break;
case 80:return 93;
break;
case 81:return 98;
break;
case 82:return 'OP_CALL';
break;
case 83:return 97;
break;
case 84:return 83;
break;
case 85:return 'OP_HASH';
break;
case 86:return 'STR_NULL';
break;
case 87:return 12;
break;
case 88:return 12;
break;
case 89:return 110;
break;
case 90:return 109;
break;
case 91:yy_.yytext = yy_.yytext.slice(1,-1); return 111;
break;
case 92:yy_.yytext = yy_.yytext.slice(1,-1); return 111;
break;
case 93:return 112;
break;
case 94:return 112;
break;
case 95:return 4;
break;
case 96:return 'INVALID';
break;
}
},
rules: [/^(?:\/\/.*)/,/^(?:\/\*)/,/^(?:\*\/)/,/^(?:.)/,/^(?:\s+)/,/^(?:\{)/,/^(?:\})/,/^(?:\()/,/^(?:\))/,/^(?:\[)/,/^(?:\])/,/^(?:,)/,/^(?::)/,/^(?:;)/,/^(?:println\b)/,/^(?:print\b)/,/^(?:void\b)/,/^(?:main\b)/,/^(?:if\b)/,/^(?:elseif\b)/,/^(?:else\b)/,/^(?:while\b)/,/^(?:do\b)/,/^(?:for\b)/,/^(?:break\b)/,/^(?:continue\b)/,/^(?:switch\b)/,/^(?:case\b)/,/^(?:default\b)/,/^(?:true\b)/,/^(?:false\b)/,/^(?:return\b)/,/^(?:boolean\b)/,/^(?:int\b)/,/^(?:double\b)/,/^(?:char\b)/,/^(?:String\b)/,/^(?:struct\b)/,/^(?:begin\b)/,/^(?:end\b)/,/^(?:function\b)/,/^(?:in\b)/,/^(?:pow\b)/,/^(?:sqrt\b)/,/^(?:sin\b)/,/^(?:cos\b)/,/^(?:tan\b)/,/^(?:parse\b)/,/^(?:toInt\b)/,/^(?:toDouble\b)/,/^(?:string\b)/,/^(?:typeof\b)/,/^(?:push\b)/,/^(?:pop\b)/,/^(?:caracterOfPosition\b)/,/^(?:subString\b)/,/^(?:length\b)/,/^(?:toUppercase\b)/,/^(?:toLowercase\b)/,/^(?:<=)/,/^(?:<)/,/^(?:==)/,/^(?:>=)/,/^(?:>)/,/^(?:!=)/,/^(?:\|\|)/,/^(?:&&)/,/^(?:&)/,/^(?:!)/,/^(?:=)/,/^(?:\+=)/,/^(?:-=)/,/^(?:\*=)/,/^(?:\/=)/,/^(?:%=)/,/^(?:\+\+)/,/^(?:\+)/,/^(?:--)/,/^(?:-)/,/^(?:\*)/,/^(?:\/)/,/^(?:%)/,/^(?:\.)/,/^(?:\^)/,/^(?:\?)/,/^(?:#)/,/^(?:null\b)/,/^(?:[A-Z][a-zA-Z0-9_]*)/,/^(?:[a-zA-Z][a-zA-Z0-9_]*)/,/^(?:(((0|([1-9])([0-9])*))\.((0|([1-9])([0-9])*))?(([Ee][+-]?((0|([1-9])([0-9])*))))?[fFdD]?|\.((0|([1-9])([0-9])*))(([Ee][+-]?((0|([1-9])([0-9])*))))?[fFdD]?|((0|([1-9])([0-9])*))(([Ee][+-]?((0|([1-9])([0-9])*))))[fFdD]?|((0|([1-9])([0-9])*))(([Ee][+-]?((0|([1-9])([0-9])*))))?[fFdD])(?=([^\w]|$)))/,/^(?:((0|([1-9])([0-9])*)))/,/^(?:"")/,/^(?:"([^"]|(\\.))*")/,/^(?:\\'([^']|(\\.))*\\')/,/^(?:\\'\\')/,/^(?:$)/,/^(?:.)/],
conditions: {"comment":{"rules":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96],"inclusive":true},"INITIAL":{"rules":[0,1,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96],"inclusive":true}}
});
return lexer;
})();
parser.lexer = lexer;
function Parser () {
  this.yy = {};
}
Parser.prototype = parser;parser.Parser = Parser;
return new Parser;
})();


if (typeof require !== 'undefined' && typeof exports !== 'undefined') {
exports.parser = Gramatica;
exports.Parser = Gramatica.Parser;
exports.parse = function () { return Gramatica.parse.apply(Gramatica, arguments); };
exports.main = function commonjsMain (args) {
    if (!args[1]) {
        console.log('Usage: '+args[0]+' FILE');
        process.exit(1);
    }
    var source = require('fs').readFileSync(require('path').normalize(args[1]), "utf8");
    return exports.parser.parse(source);
};
if (typeof module !== 'undefined' && require.main === module) {
  exports.main(process.argv.slice(1));
}
}
/* parser generated by jison 0.4.18 */
/*
  Returns a Parser object of the following structure:

  Parser: {
    yy: {}
  }

  Parser.prototype: {
    yy: {},
    trace: function(),
    symbols_: {associative list: name ==> number},
    terminals_: {associative list: number ==> name},
    productions_: [...],
    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),
    table: [...],
    defaultActions: {...},
    parseError: function(str, hash),
    parse: function(input),

    lexer: {
        EOF: 1,
        parseError: function(str, hash),
        setInput: function(input),
        input: function(),
        unput: function(str),
        more: function(),
        less: function(n),
        pastInput: function(),
        upcomingInput: function(),
        showPosition: function(),
        test_match: function(regex_match_array, rule_index),
        next: function(),
        lex: function(),
        begin: function(condition),
        popState: function(),
        _currentRules: function(),
        topState: function(),
        pushState: function(condition),

        options: {
            ranges: boolean           (optional: true ==> token location info will include a .range[] member)
            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)
            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)
        },

        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),
        rules: [...],
        conditions: {associative list: name ==> set},
    }
  }


  token location info (@$, _$, etc.): {
    first_line: n,
    last_line: n,
    first_column: n,
    last_column: n,
    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)
  }


  the parseError function receives a 'hash' object with these members for lexer and parser errors: {
    text:        (matched text)
    token:       (the produced terminal token, if any)
    line:        (yylineno)
  }
  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {
    loc:         (yylloc)
    expected:    (string describing the set of expected tokens)
    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)
  }
*/
var Gramatica = (function(){
var o=function(k,v,o,l){for(o=o||{},l=k.length;l--;o[k[l]]=v);return o},$V0=[1,13],$V1=[1,12],$V2=[1,9],$V3=[1,11],$V4=[1,14],$V5=[1,15],$V6=[1,16],$V7=[1,17],$V8=[1,18],$V9=[2,4,10,11,20,90,91,92,93,94],$Va=[1,24],$Vb=[1,25],$Vc=[1,26],$Vd=[2,4,10,11,14,20,46,47,48,49,55,60,63,70,72,74,80,84,85,90,91,92,93,94],$Ve=[1,32],$Vf=[1,31],$Vg=[2,11,27,50],$Vh=[1,37],$Vi=[1,35],$Vj=[1,36],$Vk=[2,15,18,96],$Vl=[2,116],$Vm=[1,40],$Vn=[1,55],$Vo=[1,62],$Vp=[1,64],$Vq=[1,65],$Vr=[1,66],$Vs=[1,67],$Vt=[1,68],$Vu=[1,69],$Vv=[1,70],$Vw=[1,71],$Vx=[1,75],$Vy=[1,76],$Vz=[1,77],$VA=[1,78],$VB=[1,56],$VC=[1,57],$VD=[1,58],$VE=[1,59],$VF=[1,60],$VG=[1,61],$VH=[1,63],$VI=[1,88],$VJ=[1,87],$VK=[18,23],$VL=[2,23],$VM=[1,95],$VN=[2,11,13,15,18,23,28,50,61,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127],$VO=[18,28],$VP=[1,116],$VQ=[1,115],$VR=[1,100],$VS=[1,101],$VT=[1,109],$VU=[1,110],$VV=[1,111],$VW=[1,112],$VX=[1,113],$VY=[1,114],$VZ=[1,102],$V_=[1,103],$V$=[1,104],$V01=[1,105],$V11=[1,106],$V21=[1,107],$V31=[1,108],$V41=[15,18,23,28,50,61,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127],$V51=[15,18,23,28,50,53,54,61,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127],$V61=[14,18],$V71=[1,143],$V81=[2,29],$V91=[1,175],$Va1=[15,18,23,28,61,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127],$Vb1=[1,189],$Vc1=[1,188],$Vd1=[15,18,23,28,61,112,114],$Ve1=[15,18,23,28,61,112,113,114,115,116,117,118,119,120,121,122,123,124,125,127],$Vf1=[15,18,23,28,61,112,113,114,115,116,117,118,119,120,123,124,125],$Vg1=[15,18,23,28,61,112,113,114,115,116,117,118,119,120],$Vh1=[1,204],$Vi1=[1,206],$Vj1=[1,234],$Vk1=[1,236],$Vl1=[1,248],$Vm1=[1,246],$Vn1=[1,247],$Vo1=[1,245],$Vp1=[1,244],$Vq1=[1,238],$Vr1=[1,239],$Vs1=[1,240],$Vt1=[1,241],$Vu1=[1,242],$Vv1=[1,243],$Vw1=[2,4,10,11,14,20,46,47,48,49,55,60,63,70,72,74,77,79,80,84,85,90,91,92,93,94],$Vx1=[2,11,14,46,47,48,49,55,60,63,70,72,74,80,84,85,90,91,92,93,94],$Vy1=[2,96],$Vz1=[2,121],$VA1=[1,303],$VB1=[2,13,15,18,23,28,50,61,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127],$VC1=[1,325],$VD1=[1,328],$VE1=[2,87],$VF1=[2,92],$VG1=[1,366],$VH1=[1,368],$VI1=[1,375],$VJ1=[14,60,63];
var parser = {trace: function trace () { },
yy: {},
symbols_: {"error":2,"ini":3,"EOF":4,"instrucciones":5,"instruccion":6,"declaracion_bloque":7,"asignacion_funcion":8,"struct_declaracion":9,"STR_STRUCT":10,"ID_VAR":11,"cuerpo_struct":12,"BRACKI":13,"BRACKD":14,"PUNTCOMA":15,"contenido_struct":16,"declaracion_struct":17,"COMA":18,"tiposVar":19,"VOID":20,"MAIN":21,"PARI":22,"PARD":23,"cuerpoFuncion":24,"parametros_funcion":25,"parametro_funcion":26,"CORCHI":27,"CORCHD":28,"parametros_funcion_return":29,"parametro_funcion_return":30,"expresion":31,"instrucciones_funciones":32,"instruccion_funcion":33,"asignacion_bloque":34,"print_bloque":35,"if_bloque":36,"for_bloque":37,"while_bloque":38,"switch_bloque":39,"funcion_return":40,"incremento_decremento":41,"funciones_arreglo":42,"returns_bloque":43,"rompimientos_bloque":44,"graficar_bloque":45,"STR_GRAFICAR":46,"BREAK":47,"CONTINUE":48,"STR_RETURN":49,"OP_CALL":50,"STR_PUSH":51,"STR_POP":52,"OP_INCR":53,"OP_DECR":54,"STR_SWITCH":55,"switch_cuerpo":56,"casos_switch":57,"opcional_default":58,"caso_switch":59,"STR_CASE":60,"DOSPUNT":61,"contenido_caso":62,"STR_DEFAULT":63,"opcional_break":64,"nombreVars":65,"asignacion":66,"declaracion_arreglo":67,"arr_decl":68,"nombreAtributos":69,"PRINT":70,"expresiones_print":71,"PRINTLN":72,"expresion_print":73,"STR_IF":74,"sinos_bloque":75,"instruccion_devuelta":76,"STR_ELSE":77,"sino_si_bloque":78,"STR_ELSEIF":79,"STR_FOR":80,"decl_asign":81,"STR_IN":82,"arr_begin_end":83,"STR_WHILE":84,"STR_DO":85,"parametros_arreglo":86,"expresion_arreglo":87,"STR_BEGIN":88,"STR_END":89,"STR_STRING":90,"STR_DOUBLE":91,"STR_INTEGER":92,"STR_BOOLEAN":93,"STR_CHAR":94,"nombreAtributos_prima":95,"OP_IGUAL":96,"primitivas":97,"logicas":98,"operadores":99,"relacionales":100,"expresion_ternario":101,"incr_decr":102,"nativas":103,"expresion_arr_arreglo":104,"expresion_atributos":105,"otras_nativas":106,"LENGTH":107,"UPPERCASE":108,"LOWERCASE":109,"CHARPOS":110,"SUBSTRING":111,"OP_TER":112,"OP_AND":113,"OP_OR":114,"OP_DOBIG":115,"OP_DIF":116,"OP_MAYIG":117,"OP_MENIG":118,"OP_MEN":119,"OP_MAY":120,"OP_MULT":121,"OP_DIVI":122,"OP_SUMA":123,"OP_RESTA":124,"OP_AMP":125,"OP_ELV":126,"OP_MOD":127,"OP_NEG":128,"STR_POW":129,"STR_SQRT":130,"STR_SIN":131,"STR_COS":132,"STR_TAN":133,"STR_PARSE":134,"STR_TOINT":135,"STR_TODOUBLE":136,"STR_string":137,"STR_TYPEOF":138,"STR_FALSE":139,"STR_TRUE":140,"ENTERO":141,"FLOTANTE":142,"STRINGL":143,"CHARL":144,"STR_NULL":145,"$accept":0,"$end":1},
terminals_: {2:"error",4:"EOF",10:"STR_STRUCT",11:"ID_VAR",13:"BRACKI",14:"BRACKD",15:"PUNTCOMA",18:"COMA",20:"VOID",21:"MAIN",22:"PARI",23:"PARD",27:"CORCHI",28:"CORCHD",46:"STR_GRAFICAR",47:"BREAK",48:"CONTINUE",49:"STR_RETURN",50:"OP_CALL",51:"STR_PUSH",52:"STR_POP",53:"OP_INCR",54:"OP_DECR",55:"STR_SWITCH",60:"STR_CASE",61:"DOSPUNT",63:"STR_DEFAULT",70:"PRINT",72:"PRINTLN",74:"STR_IF",77:"STR_ELSE",79:"STR_ELSEIF",80:"STR_FOR",82:"STR_IN",84:"STR_WHILE",85:"STR_DO",88:"STR_BEGIN",89:"STR_END",90:"STR_STRING",91:"STR_DOUBLE",92:"STR_INTEGER",93:"STR_BOOLEAN",94:"STR_CHAR",96:"OP_IGUAL",107:"LENGTH",108:"UPPERCASE",109:"LOWERCASE",110:"CHARPOS",111:"SUBSTRING",112:"OP_TER",113:"OP_AND",114:"OP_OR",115:"OP_DOBIG",116:"OP_DIF",117:"OP_MAYIG",118:"OP_MENIG",119:"OP_MEN",120:"OP_MAY",121:"OP_MULT",122:"OP_DIVI",123:"OP_SUMA",124:"OP_RESTA",125:"OP_AMP",126:"OP_ELV",127:"OP_MOD",128:"OP_NEG",129:"STR_POW",130:"STR_SQRT",131:"STR_SIN",132:"STR_COS",133:"STR_TAN",134:"STR_PARSE",135:"STR_TOINT",136:"STR_TODOUBLE",137:"STR_string",138:"STR_TYPEOF",139:"STR_FALSE",140:"STR_TRUE",141:"ENTERO",142:"FLOTANTE",143:"STRINGL",144:"CHARL",145:"STR_NULL"},
productions_: [0,[3,1],[3,2],[5,2],[5,1],[6,1],[6,1],[6,1],[9,3],[9,2],[12,3],[12,4],[12,1],[16,1],[16,3],[17,2],[17,2],[17,1],[8,5],[8,6],[8,6],[25,3],[25,1],[25,0],[26,2],[26,4],[26,1],[29,3],[29,1],[29,0],[30,1],[24,3],[24,2],[24,1],[32,2],[32,1],[33,1],[33,1],[33,1],[33,1],[33,1],[33,1],[33,1],[33,1],[33,1],[33,1],[33,1],[33,1],[33,1],[33,2],[45,4],[44,2],[44,2],[43,2],[43,3],[42,7],[42,6],[41,3],[41,3],[40,5],[39,5],[39,1],[56,2],[56,4],[56,1],[57,2],[57,1],[59,4],[62,1],[58,3],[58,0],[64,2],[64,2],[64,0],[7,3],[7,4],[7,4],[7,1],[67,4],[67,5],[34,3],[34,6],[35,5],[35,5],[35,2],[71,2],[73,3],[73,0],[36,6],[76,1],[75,2],[75,2],[75,0],[78,5],[37,9],[37,5],[37,5],[37,5],[38,5],[38,6],[81,3],[81,2],[68,3],[68,2],[86,1],[86,3],[87,1],[83,6],[83,6],[83,6],[83,6],[19,1],[19,1],[19,1],[19,1],[19,1],[65,1],[65,3],[65,1],[69,2],[95,3],[95,0],[66,2],[66,1],[31,1],[31,1],[31,1],[31,1],[31,1],[31,1],[31,1],[31,1],[31,1],[31,1],[31,1],[104,1],[104,4],[104,1],[105,3],[105,5],[105,5],[105,5],[105,5],[105,6],[105,8],[101,5],[98,3],[98,3],[100,3],[100,3],[100,3],[100,3],[100,3],[100,3],[99,3],[99,3],[99,3],[99,3],[99,3],[99,3],[99,3],[99,3],[99,2],[99,2],[102,2],[102,2],[103,6],[103,4],[103,4],[103,4],[103,4],[106,6],[106,4],[106,4],[106,4],[106,4],[97,1],[97,1],[97,1],[97,1],[97,1],[97,1],[97,1],[97,4],[97,1]],
performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */) {
/* this == yyval */

var $0 = $$.length - 1;
switch (yystate) {
case 1:
console.log("EOF encontrado");return [];
break;
case 2:
this.$ = $$[$0-1];return reiniciarArrays(this.$);
break;
case 3: case 65:
$$[$0-1].push($$[$0]); this.$ = $$[$0-1];
break;
case 4: case 13: case 22: case 28: case 66: case 116:
this.$ = [$$[$0]];
break;
case 5: case 6: case 7: case 36: case 37: case 38: case 39: case 40: case 41: case 42: case 43: case 44: case 45: case 46: case 47: case 48: case 68: case 77: case 106: case 122: case 124: case 125: case 126: case 127: case 128: case 129: case 130: case 131: case 132: case 133: case 137:
this.$ = $$[$0];
break;
case 8:
this.$ = new Struct($$[$0-1],$$[$0],_$[$0-2].first_line,_$[$0-2].first_column); 
break;
case 9: case 49: case 84:
genError(yytext,_$[$0-1].first_line,_$[$0-1].first_column);
break;
case 10:
this.$ = []; 
break;
case 11:
this.$ = $$[$0-2];
break;
case 12: case 17: case 26: case 33: case 61: case 64: case 118: case 123: case 134:
genError(yytext,_$[$0].first_line,_$[$0].first_column);
break;
case 14:
$$[$0-2].push($$[$0]); this.$= $$[$0-2]; 
break;
case 15: case 16:
this.$ = new Declaracion($$[$0],$$[$0-1],_$[$0-1].first_line,_$[$0-1].first_column,null);
break;
case 18:
this.$ = new Funcion("main","void",_$[$0-4].first_line,_$[$0-4].first_column,$$[$0],[]);
break;
case 19: case 20:
this.$ = new Funcion($$[$0-4],$$[$0-5],_$[$0-5].first_line,_$[$0-5].first_column,$$[$0],$$[$0-2]);
break;
case 21: case 27: case 105:
$$[$0-2].push($$[$0]);this.$ = $$[$0-2];
break;
case 23: case 29: case 87: case 92: case 103: case 121:
this.$ = [];
break;
case 24:
this.$ = new Parametro($$[$0],$$[$0-1],_$[$0-1].first_line,_$[$0-1].first_column,false);
break;
case 25:
this.$ = new Parametro($$[$0],$$[$0-3],_$[$0-3].first_line,_$[$0-3].first_column,true);
break;
case 30:
this.$ = new ParametroReturn($$[$0],_$[$0].first_line,_$[$0].first_column);
break;
case 31: case 161:
this.$ = $$[$0-1];
break;
case 32: case 70: case 73:
this.$ = null;
break;
case 34:
        
        $$[$0-1].push($$[$0]);
        this.$ = $$[$0-1];
    
break;
case 35:
                
        this.$ = [$$[$0]];
    
break;
case 50:
this.$ = new GraficarTS();
break;
case 51: case 71:
this.$ = new Break(_$[$0-1].first_line,_$[$0-1].first_column);
break;
case 52: case 72:
this.$ = new Continue(_$[$0-1].first_line,_$[$0-1].first_column);
break;
case 53:
this.$ = new Return(null,_$[$0-1].first_line,_$[$0-1].first_column);
break;
case 54:
this.$ = new Return($$[$0-1],_$[$0-2].first_line,_$[$0-2].first_column);
break;
case 55:
this.$ = new Push($$[$0-6],$$[$0-2],_$[$0-6].first_line, _$[$0-6].first_column);
break;
case 56:
this.$ = new Pop($$[$0-5],_$[$0-5].first_line, _$[$0-5].first_column);
break;
case 57:
   let accVar = new AccesoVariable($$[$0-2], _$[$0-2].first_line, _$[$0-2].first_column);
            let operInDec = new Operacion(accVar,null,Operador.INCREMENTO, _$[$0-2].first_line, _$[$0-2].first_column);
            this.$ = new IncrDecr(operInDec,_$[$0-2].first_line,_$[$0-2].first_column,$$[$0-2]);
        
break;
case 58:
   let accVar1 = new AccesoVariable($$[$0-2], _$[$0-2].first_line, _$[$0-2].first_column);
            let operInDec1 = new Operacion(accVar1,null,Operador.DECREMENTO, _$[$0-2].first_line, _$[$0-2].first_column);
            this.$ = new IncrDecr(operInDec1,_$[$0-2].first_line,_$[$0-2].first_column,$$[$0-2]);
        
break;
case 59:
this.$ = new FuncionReturn($$[$0-4],_$[$0-4].first_line,_$[$0-4].first_column,$$[$0-2]);
break;
case 60:
this.$ = new Switch($$[$0-2],$$[$0],_$[$0-4].first_line,_$[$0-4].first_column);
break;
case 62:
this.$= [];
break;
case 63:

            if ($$[$0-1] != null){
                $$[$0-2].push($$[$0-1]);
            }
            this.$ = $$[$0-2];
        
break;
case 67:
this.$ = new SwitchCaso($$[$0-2],$$[$0],_$[$0-3].first_line,_$[$0-3].first_column);
break;
case 69:
let nul = new Primitivo(null, _$[$0-2].first_line, _$[$0-2].first_column);this.$ = new SwitchCaso(nul,$$[$0],_$[$0-2].first_line,_$[$0-2].first_column);
break;
case 74:
this.$ = new Declaracion($$[$0-1],$$[$0-2],_$[$0-2].first_line,_$[$0-2].first_column,null);
break;
case 75:
this.$ = new Declaracion($$[$0-2],$$[$0-3],_$[$0-3].first_line,_$[$0-3].first_column,$$[$0-1]);
break;
case 76:
this.$ =  new DeclaracionStruct($$[$0-2],$$[$0-3],_$[$0-3].first_line,_$[$0-3].first_column,$$[$0-1]);
break;
case 78:
this.$ = new DeclaracionArray($$[$0-1],$$[$0-3],$$[$0-2],_$[$0-3].first_line,_$[$0-3].first_column,null);
break;
case 79:
this.$ = new DeclaracionArray($$[$0-2],$$[$0-4],$$[$0-3],_$[$0-4].first_line,_$[$0-4].first_column,$$[$0-1]);
break;
case 80:
this.$ = new Asignacion($$[$0-2],_$[$0-2].first_line,_$[$0-2].first_column,$$[$0-1]);
break;
case 81:
this.$ = new AsignacionArray($$[$0-5],$$[$0-3],_$[$0-5].first_line, _$[$0-5].first_column,$$[$0-1]);
break;
case 82:
this.$ = new Print($$[$0-2],_$[$0-4].first_line,_$[$0-4].first_column,false);
break;
case 83:
this.$ = new Print($$[$0-2],_$[$0-4].first_line,_$[$0-4].first_column,true);
break;
case 85:
$$[$0].unshift($$[$0-1]); this.$ = new ConcatenacionString($$[$0],_$[$0-1].first_line,_$[$0-1].first_column);
break;
case 86: case 119: case 120:
$$[$0].unshift($$[$0-1]); this.$ = $$[$0];
break;
case 88:
this.$ = new If(_$[$0-5].first_line,_$[$0-5].first_column,$$[$0-3],$$[$0-1],$$[$0],"if");
break;
case 89: case 104:
this.$ = [$$[$0]]
break;
case 90:
this.$ = [new If(_$[$0-1].first_line,_$[$0-1].first_column,null,$$[$0],[],"else")];
break;
case 91:
$$[$0].push($$[$0-1]); this.$ = $$[$0]
break;
case 93:
this.$ = new If(_$[$0-4].first_line,_$[$0-4].first_column,$$[$0-2],$$[$0],[],"elseif");
break;
case 94:
this.$ = new For(_$[$0-8].first_line,_$[$0-8].first_column,$$[$0],$$[$0-6],$$[$0-4],$$[$0-2]);
break;
case 95: case 96: case 97:
this.$ = new Forin(_$[$0-4].first_line,_$[$0-4].first_column,$$[$0],$$[$0-3],$$[$0-1]);
break;
case 98:
this.$ = new While(_$[$0-4].first_line,_$[$0-4].first_column,$$[$0],$$[$0-2]);
break;
case 99:
this.$ = new DoWhile(_$[$0-5].first_line,_$[$0-5].first_column,$$[$0-4],$$[$0-1]);
break;
case 100:
this.$ = new Declaracion($$[$0-1],$$[$0-2],_$[$0-2].first_line,_$[$0-2].first_column,$$[$0]);
break;
case 101:
this.$ = new Asignacion($$[$0-1],_$[$0-1].first_line,_$[$0-1].first_column,$$[$0]);
break;
case 102:
this.$ = $$[$0-1]
break;
case 107:
this.$ = new ArrbegEnd($$[$0-5],_$[$0-5].first_line,_$[$0-5].first_column,$$[$0-3],$$[$0-1]);
break;
case 108:
let beg = new Primitivo("begin", _$[$0-5].first_line, _$[$0-5].first_column); this.$ = new ArrbegEnd($$[$0-5],_$[$0-5].first_line,_$[$0-5].first_column,beg,$$[$0-1]);
break;
case 109:
let beg1 = new Primitivo("begin", _$[$0-5].first_line, _$[$0-5].first_column); let end1 = new Primitivo("end", _$[$0-5].first_line, _$[$0-5].first_column); this.$ = new ArrbegEnd($$[$0-5],_$[$0-5].first_line,_$[$0-5].first_column,beg1,end1);
break;
case 110:
let beg2 = new Primitivo("end", _$[$0-5].first_line, _$[$0-5].first_column); this.$ = new ArrbegEnd($$[$0-5],_$[$0-5].first_line,_$[$0-5].first_column,$$[$0-3],beg2);
break;
case 111:
this.$ = Tipo.STRING;
break;
case 112:
this.$ = Tipo.DOUBLE;
break;
case 113:
this.$ = Tipo.INT;
break;
case 114:
this.$ = Tipo.BOOL;
break;
case 115:
this.$ = Tipo.CHAR;
break;
case 117:
 $$[$0-2].push($$[$0]);this.$ = $$[$0-2];
break;
case 135:
this.$ = new AccesoArray($$[$0],_$[$0].first_line, _$[$0].first_column);
break;
case 136:
this.$ = new AccesoAtribArray($$[$0-3],$$[$0-1],_$[$0-3].first_line, _$[$0-3].first_column);
break;
case 138:
this.$ = new AccesoAtributo($$[$0-2],$$[$0],_$[$0-2].first_line, _$[$0-2].first_column);
break;
case 139:
this.$ = new OperacionCadena($$[$0-4],null,null,OperadorCadena.LENGTH,_$[$0-4].first_line, _$[$0-4].first_column);
break;
case 140:
this.$ = new OperacionCadena($$[$0-4],null,null,OperadorCadena.POP,_$[$0-4].first_line, _$[$0-4].first_column);
break;
case 141:
this.$ = new OperacionCadena($$[$0-4],null,null,OperadorCadena.UPPERCASE,_$[$0-4].first_line, _$[$0-4].first_column);
break;
case 142:
this.$ = new OperacionCadena($$[$0-4],null,null,OperadorCadena.LOWERCASE,_$[$0-4].first_line, _$[$0-4].first_column);
break;
case 143:
this.$ = new OperacionCadena($$[$0-5],$$[$0-1],null,OperadorCadena.CHARPOS,_$[$0-5].first_line, _$[$0-5].first_column);
break;
case 144:
this.$ = new OperacionCadena($$[$0-7],$$[$0-3],$$[$0-1],OperadorCadena.SUBSTRING,_$[$0-7].first_line, _$[$0-7].first_column);
break;
case 145:
this.$ = new Ternario($$[$0-4],$$[$0-2],$$[$0],_$[$0-4].first_line, _$[$0-4].first_column);
break;
case 146:
this.$ = new Operacion($$[$0-2],$$[$0],Operador.AND, _$[$0-2].first_line, _$[$0-2].first_column);
break;
case 147:
this.$ = new Operacion($$[$0-2],$$[$0],Operador.OR, _$[$0-2].first_line, _$[$0-2].first_column);
break;
case 148:
this.$ = new Operacion($$[$0-2],$$[$0],Operador.IGUAL_IGUAL, _$[$0-2].first_line, _$[$0-2].first_column);
break;
case 149:
this.$ = new Operacion($$[$0-2],$$[$0],Operador.DIFERENTE_QUE, _$[$0-2].first_line, _$[$0-2].first_column);
break;
case 150:
this.$ = new Operacion($$[$0-2],$$[$0],Operador.MAYOR_IGUA_QUE, _$[$0-2].first_line, _$[$0-2].first_column);
break;
case 151:
this.$ = new Operacion($$[$0-2],$$[$0],Operador.MENOR_IGUA_QUE, _$[$0-2].first_line, _$[$0-2].first_column);
break;
case 152:
this.$ = new Operacion($$[$0-2],$$[$0],Operador.MENOR_QUE, _$[$0-2].first_line, _$[$0-2].first_column);
break;
case 153:
this.$ = new Operacion($$[$0-2],$$[$0],Operador.MAYOR_QUE, _$[$0-2].first_line, _$[$0-2].first_column);
break;
case 154:
this.$ = new Operacion($$[$0-2],$$[$0],Operador.MULTIPLICACION, _$[$0-2].first_line, _$[$0-2].first_column);
break;
case 155:
this.$ = new Operacion($$[$0-2],$$[$0],Operador.DIVISION, _$[$0-2].first_line, _$[$0-2].first_column);
break;
case 156:
this.$ = new Operacion($$[$0-2],$$[$0],Operador.SUMA, _$[$0-2].first_line, _$[$0-2].first_column);
break;
case 157:
this.$ = new Operacion($$[$0-2],$$[$0],Operador.RESTA, _$[$0-2].first_line, _$[$0-2].first_column);
break;
case 158:
this.$ = new Operacion($$[$0-2],$$[$0],Operador.AMPERSON, _$[$0-2].first_line, _$[$0-2].first_column);
break;
case 159:
this.$ = new Operacion($$[$0-2],$$[$0],Operador.ELEVADO, _$[$0-2].first_line, _$[$0-2].first_column);
break;
case 160:
this.$ = new Operacion($$[$0-2],$$[$0],Operador.MODULO, _$[$0-2].first_line, _$[$0-2].first_column);
break;
case 162:
this.$ = new Operacion($$[$0],null,Operador.MENOS_UNARIO, _$[$0-1].first_line, _$[$0-1].first_column);
break;
case 163:
this.$ = new Operacion($$[$0],null,Operador.NOT, _$[$0-1].first_line, _$[$0-1].first_column);
break;
case 164:
this.$ = new Operacion($$[$0-1],null,Operador.INCREMENTO, _$[$0-1].first_line, _$[$0-1].first_column);
break;
case 165:
this.$ = new Operacion($$[$0-1],null,Operador.DECREMENTO, _$[$0-1].first_line, _$[$0-1].first_column);
break;
case 166:
this.$ = new Operacion($$[$0-3],$$[$0-1],Operador.POW, _$[$0-5].first_line, _$[$0-5].first_column);
break;
case 167:
this.$ = new Operacion($$[$0-1],null,Operador.SQRT, _$[$0-3].first_line, _$[$0-3].first_column);
break;
case 168:
this.$ = new Operacion($$[$0-1],null,Operador.SIN, _$[$0-3].first_line, _$[$0-3].first_column);
break;
case 169:
this.$ = new Operacion($$[$0-1],null,Operador.COS, _$[$0-3].first_line, _$[$0-3].first_column);
break;
case 170:
this.$ = new Operacion($$[$0-1],null,Operador.TAN, _$[$0-3].first_line, _$[$0-3].first_column);
break;
case 171:
this.$ = new OperacionNativa(OperadorNativa.PARSE,$$[$0-5],$$[$0-1],_$[$0-5].first_line,_$[$0-5].first_column);
break;
case 172:
this.$ = new OperacionNativa(OperadorNativa.TOINT,Tipo.NULL,$$[$0-1],_$[$0-3].first_line,_$[$0-3].first_column);
break;
case 173:
this.$ = new OperacionNativa(OperadorNativa.TODOUBLE,Tipo.NULL,$$[$0-1],_$[$0-3].first_line,_$[$0-3].first_column);
break;
case 174:
this.$ = new OperacionNativa(OperadorNativa.STRING,Tipo.NULL,$$[$0-1],_$[$0-3].first_line,_$[$0-3].first_column);
break;
case 175:
this.$ = new OperacionNativa(OperadorNativa.TYPEOF,Tipo.NULL,$$[$0-1],_$[$0-3].first_line,_$[$0-3].first_column);
break;
case 176:
this.$ = new Primitivo(false, _$[$0].first_line, _$[$0].first_column);
break;
case 177:
this.$ = new Primitivo(true, _$[$0].first_line, _$[$0].first_column);
break;
case 178:
this.$ = new Primitivo(Number($$[$0]), _$[$0].first_line, _$[$0].first_column);
break;
case 179:
let primitivo = new Primitivo(Number($$[$0]), _$[$0].first_line, _$[$0].first_column);primitivo.isFlotante=true;this.$ = primitivo;
break;
case 180: case 181:
this.$ = new Primitivo($$[$0], _$[$0].first_line, _$[$0].first_column);
break;
case 182:
this.$ = new AccesoVariable($$[$0], _$[$0].first_line, _$[$0].first_column);
break;
case 183:
this.$ = new FuncionReturn($$[$0-3],_$[$0-3].first_line,_$[$0-3].first_column,$$[$0-1]);
break;
case 184:
this.$ = new Primitivo(null, _$[$0].first_line, _$[$0].first_column);
break;
}
},
table: [{2:$V0,3:1,4:[1,2],5:3,6:4,7:5,8:6,9:7,10:$V1,11:$V2,19:8,20:$V3,67:10,90:$V4,91:$V5,92:$V6,93:$V7,94:$V8},{1:[3]},{1:[2,1]},{2:$V0,4:[1,19],6:20,7:5,8:6,9:7,10:$V1,11:$V2,19:8,20:$V3,67:10,90:$V4,91:$V5,92:$V6,93:$V7,94:$V8},o($V9,[2,4]),o($V9,[2,5]),o($V9,[2,6]),o($V9,[2,7]),{2:$Va,11:[1,22],27:$Vb,65:21,68:23},{11:$Vc},o($Vd,[2,77]),{11:[1,28],21:[1,27]},{11:[1,29]},{2:$Ve,12:30,13:$Vf},o($Vg,[2,111]),o($Vg,[2,112]),o($Vg,[2,113]),o($Vg,[2,114]),o($Vg,[2,115]),{1:[2,2]},o($V9,[2,3]),{2:$Vh,15:[1,33],18:$Vi,66:34,96:$Vj},o($Vk,$Vl,{22:[1,38]}),{2:$Va,11:$Vm,65:39},o($Vk,[2,118]),{2:$Vn,11:$Vo,19:74,22:$Vp,27:$Vb,28:[1,42],31:44,68:72,83:73,86:41,87:43,90:$V4,91:$V5,92:$V6,93:$V7,94:$V8,97:45,98:46,99:47,100:48,101:49,102:50,103:51,104:52,105:53,106:54,124:$Vq,128:$Vr,129:$Vs,130:$Vt,131:$Vu,132:$Vv,133:$Vw,135:$Vx,136:$Vy,137:$Vz,138:$VA,139:$VB,140:$VC,141:$VD,142:$VE,143:$VF,144:$VG,145:$VH},{2:$Vh,66:79,96:$Vj},{22:[1,80]},{22:[1,81]},{2:$Ve,12:82,13:$Vf},o($V9,[2,9]),{2:$VI,11:$VJ,14:[1,83],16:84,17:85,19:86,90:$V4,91:$V5,92:$V6,93:$V7,94:$V8},o($V9,[2,12]),o($Vd,[2,74]),{15:[1,89]},{11:[1,90]},{2:$Vn,11:$Vo,19:74,22:$Vp,27:$Vb,31:91,68:72,83:73,90:$V4,91:$V5,92:$V6,93:$V7,94:$V8,97:45,98:46,99:47,100:48,101:49,102:50,103:51,104:52,105:53,106:54,124:$Vq,128:$Vr,129:$Vs,130:$Vt,131:$Vu,132:$Vv,133:$Vw,135:$Vx,136:$Vy,137:$Vz,138:$VA,139:$VB,140:$VC,141:$VD,142:$VE,143:$VF,144:$VG,145:$VH},{15:[2,123]},o($VK,$VL,{25:92,26:93,19:94,2:$VM,90:$V4,91:$V5,92:$V6,93:$V7,94:$V8}),{2:$Vh,15:[1,96],18:$Vi,66:97,96:$Vj},o($Vk,$Vl),{18:[1,99],28:[1,98]},o($VN,[2,103]),o($VO,[2,104]),o($VO,[2,106],{50:$VP,112:$VQ,113:$VR,114:$VS,115:$VT,116:$VU,117:$VV,118:$VW,119:$VX,120:$VY,121:$VZ,122:$V_,123:$V$,124:$V01,125:$V11,126:$V21,127:$V31}),o($V41,[2,124],{53:[1,117],54:[1,118]}),o($V41,[2,125]),o($V41,[2,126]),o($V41,[2,127]),o($V41,[2,128]),o($V41,[2,129]),o($V41,[2,130]),o($V41,[2,131]),o($V41,[2,132]),o($V41,[2,133]),o($V41,[2,134]),o($V51,[2,176]),o($V51,[2,177]),o($V51,[2,178]),o($V51,[2,179]),o($V51,[2,180]),o($V51,[2,181]),o($V51,[2,182],{22:[1,119],27:[1,120]}),o($V51,[2,184]),{2:$Vn,11:$Vo,19:74,22:$Vp,27:$Vb,31:121,68:72,83:73,90:$V4,91:$V5,92:$V6,93:$V7,94:$V8,97:45,98:46,99:47,100:48,101:49,102:50,103:51,104:52,105:53,106:54,124:$Vq,128:$Vr,129:$Vs,130:$Vt,131:$Vu,132:$Vv,133:$Vw,135:$Vx,136:$Vy,137:$Vz,138:$VA,139:$VB,140:$VC,141:$VD,142:$VE,143:$VF,144:$VG,145:$VH},{2:$Vn,11:$Vo,19:74,22:$Vp,27:$Vb,31:122,68:72,83:73,90:$V4,91:$V5,92:$V6,93:$V7,94:$V8,97:45,98:46,99:47,100:48,101:49,102:50,103:51,104:52,105:53,106:54,124:$Vq,128:$Vr,129:$Vs,130:$Vt,131:$Vu,132:$Vv,133:$Vw,135:$Vx,136:$Vy,137:$Vz,138:$VA,139:$VB,140:$VC,141:$VD,142:$VE,143:$VF,144:$VG,145:$VH},{2:$Vn,11:$Vo,19:74,22:$Vp,27:$Vb,31:123,68:72,83:73,90:$V4,91:$V5,92:$V6,93:$V7,94:$V8,97:45,98:46,99:47,100:48,101:49,102:50,103:51,104:52,105:53,106:54,124:$Vq,128:$Vr,129:$Vs,130:$Vt,131:$Vu,132:$Vv,133:$Vw,135:$Vx,136:$Vy,137:$Vz,138:$VA,139:$VB,140:$VC,141:$VD,142:$VE,143:$VF,144:$VG,145:$VH},{22:[1,124]},{22:[1,125]},{22:[1,126]},{22:[1,127]},{22:[1,128]},o($V41,[2,135]),o($V41,[2,137]),{50:[1,129]},{22:[1,130]},{22:[1,131]},{22:[1,132]},{22:[1,133]},{15:[1,134]},{23:[1,135]},o($VK,$VL,{26:93,19:94,25:136,2:$VM,90:$V4,91:$V5,92:$V6,93:$V7,94:$V8}),o($V9,[2,8]),{15:[1,137]},{14:[1,138],18:[1,139]},o($V61,[2,13]),{11:[1,140]},{11:[1,141]},o($V61,[2,17]),o($Vd,[2,75]),o($Vk,[2,117]),{15:[2,122],50:$VP,112:$VQ,113:$VR,114:$VS,115:$VT,116:$VU,117:$VV,118:$VW,119:$VX,120:$VY,121:$VZ,122:$V_,123:$V$,124:$V01,125:$V11,126:$V21,127:$V31},{18:$V71,23:[1,142]},o($VK,[2,22]),{11:[1,144],27:[1,145]},o($VK,[2,26]),o($Vd,[2,78]),{15:[1,146]},o($VN,[2,102]),{2:$Vn,11:$Vo,19:74,22:$Vp,27:$Vb,31:44,68:72,83:73,87:147,90:$V4,91:$V5,92:$V6,93:$V7,94:$V8,97:45,98:46,99:47,100:48,101:49,102:50,103:51,104:52,105:53,106:54,124:$Vq,128:$Vr,129:$Vs,130:$Vt,131:$Vu,132:$Vv,133:$Vw,135:$Vx,136:$Vy,137:$Vz,138:$VA,139:$VB,140:$VC,141:$VD,142:$VE,143:$VF,144:$VG,145:$VH},{2:$Vn,11:$Vo,19:74,22:$Vp,27:$Vb,31:148,68:72,83:73,90:$V4,91:$V5,92:$V6,93:$V7,94:$V8,97:45,98:46,99:47,100:48,101:49,102:50,103:51,104:52,105:53,106:54,124:$Vq,128:$Vr,129:$Vs,130:$Vt,131:$Vu,132:$Vv,133:$Vw,135:$Vx,136:$Vy,137:$Vz,138:$VA,139:$VB,140:$VC,141:$VD,142:$VE,143:$VF,144:$VG,145:$VH},{2:$Vn,11:$Vo,19:74,22:$Vp,27:$Vb,31:149,68:72,83:73,90:$V4,91:$V5,92:$V6,93:$V7,94:$V8,97:45,98:46,99:47,100:48,101:49,102:50,103:51,104:52,105:53,106:54,124:$Vq,128:$Vr,129:$Vs,130:$Vt,131:$Vu,132:$Vv,133:$Vw,135:$Vx,136:$Vy,137:$Vz,138:$VA,139:$VB,140:$VC,141:$VD,142:$VE,143:$VF,144:$VG,145:$VH},{2:$Vn,11:$Vo,19:74,22:$Vp,27:$Vb,31:150,68:72,83:73,90:$V4,91:$V5,92:$V6,93:$V7,94:$V8,97:45,98:46,99:47,100:48,101:49,102:50,103:51,104:52,105:53,106:54,124:$Vq,128:$Vr,129:$Vs,130:$Vt,131:$Vu,132:$Vv,133:$Vw,135:$Vx,136:$Vy,137:$Vz,138:$VA,139:$VB,140:$VC,141:$VD,142:$VE,143:$VF,144:$VG,145:$VH},{2:$Vn,11:$Vo,19:74,22:$Vp,27:$Vb,31:151,68:72,83:73,90:$V4,91:$V5,92:$V6,93:$V7,94:$V8,97:45,98:46,99:47,100:48,101:49,102:50,103:51,104:52,105:53,106:54,124:$Vq,128:$Vr,129:$Vs,130:$Vt,131:$Vu,132:$Vv,133:$Vw,135:$Vx,136:$Vy,137:$Vz,138:$VA,139:$VB,140:$VC,141:$VD,142:$VE,143:$VF,144:$VG,145:$VH},{2:$Vn,11:$Vo,19:74,22:$Vp,27:$Vb,31:152,68:72,83:73,90:$V4,91:$V5,92:$V6,93:$V7,94:$V8,97:45,98:46,99:47,100:48,101:49,102:50,103:51,104:52,105:53,106:54,124:$Vq,128:$Vr,129:$Vs,130:$Vt,131:$Vu,132:$Vv,133:$Vw,135:$Vx,136:$Vy,137:$Vz,138:$VA,139:$VB,140:$VC,141:$VD,142:$VE,143:$VF,144:$VG,145:$VH},{2:$Vn,11:$Vo,19:74,22:$Vp,27:$Vb,31:153,68:72,83:73,90:$V4,91:$V5,92:$V6,93:$V7,94:$V8,97:45,98:46,99:47,100:48,101:49,102:50,103:51,104:52,105:53,106:54,124:$Vq,128:$Vr,129:$Vs,130:$Vt,131:$Vu,132:$Vv,133:$Vw,135:$Vx,136:$Vy,137:$Vz,138:$VA,139:$VB,140:$VC,141:$VD,142:$VE,143:$VF,144:$VG,145:$VH},{2:$Vn,11:$Vo,19:74,22:$Vp,27:$Vb,31:154,68:72,83:73,90:$V4,91:$V5,92:$V6,93:$V7,94:$V8,97:45,98:46,99:47,100:48,101:49,102:50,103:51,104:52,105:53,106:54,124:$Vq,128:$Vr,129:$Vs,130:$Vt,131:$Vu,132:$Vv,133:$Vw,135:$Vx,136:$Vy,137:$Vz,138:$VA,139:$VB,140:$VC,141:$VD,142:$VE,143:$VF,144:$VG,145:$VH},{2:$Vn,11:$Vo,19:74,22:$Vp,27:$Vb,31:155,68:72,83:73,90:$V4,91:$V5,92:$V6,93:$V7,94:$V8,97:45,98:46,99:47,100:48,101:49,102:50,103:51,104:52,105:53,106:54,124:$Vq,128:$Vr,129:$Vs,130:$Vt,131:$Vu,132:$Vv,133:$Vw,135:$Vx,136:$Vy,137:$Vz,138:$VA,139:$VB,140:$VC,141:$VD,142:$VE,143:$VF,144:$VG,145:$VH},{2:$Vn,11:$Vo,19:74,22:$Vp,27:$Vb,31:156,68:72,83:73,90:$V4,91:$V5,92:$V6,93:$V7,94:$V8,97:45,98:46,99:47,100:48,101:49,102:50,103:51,104:52,105:53,106:54,124:$Vq,128:$Vr,129:$Vs,130:$Vt,131:$Vu,132:$Vv,133:$Vw,135:$Vx,136:$Vy,137:$Vz,138:$VA,139:$VB,140:$VC,141:$VD,142:$VE,143:$VF,144:$VG,145:$VH},{2:$Vn,11:$Vo,19:74,22:$Vp,27:$Vb,31:157,68:72,83:73,90:$V4,91:$V5,92:$V6,93:$V7,94:$V8,97:45,98:46,99:47,100:48,101:49,102:50,103:51,104:52,105:53,106:54,124:$Vq,128:$Vr,129:$Vs,130:$Vt,131:$Vu,132:$Vv,133:$Vw,135:$Vx,136:$Vy,137:$Vz,138:$VA,139:$VB,140:$VC,141:$VD,142:$VE,143:$VF,144:$VG,145:$VH},{2:$Vn,11:$Vo,19:74,22:$Vp,27:$Vb,31:158,68:72,83:73,90:$V4,91:$V5,92:$V6,93:$V7,94:$V8,97:45,98:46,99:47,100:48,101:49,102:50,103:51,104:52,105:53,106:54,124:$Vq,128:$Vr,129:$Vs,130:$Vt,131:$Vu,132:$Vv,133:$Vw,135:$Vx,136:$Vy,137:$Vz,138:$VA,139:$VB,140:$VC,141:$VD,142:$VE,143:$VF,144:$VG,145:$VH},{2:$Vn,11:$Vo,19:74,22:$Vp,27:$Vb,31:159,68:72,83:73,90:$V4,91:$V5,92:$V6,93:$V7,94:$V8,97:45,98:46,99:47,100:48,101:49,102:50,103:51,104:52,105:53,106:54,124:$Vq,128:$Vr,129:$Vs,130:$Vt,131:$Vu,132:$Vv,133:$Vw,135:$Vx,136:$Vy,137:$Vz,138:$VA,139:$VB,140:$VC,141:$VD,142:$VE,143:$VF,144:$VG,145:$VH},{2:$Vn,11:$Vo,19:74,22:$Vp,27:$Vb,31:160,68:72,83:73,90:$V4,91:$V5,92:$V6,93:$V7,94:$V8,97:45,98:46,99:47,100:48,101:49,102:50,103:51,104:52,105:53,106:54,124:$Vq,128:$Vr,129:$Vs,130:$Vt,131:$Vu,132:$Vv,133:$Vw,135:$Vx,136:$Vy,137:$Vz,138:$VA,139:$VB,140:$VC,141:$VD,142:$VE,143:$VF,144:$VG,145:$VH},{2:$Vn,11:$Vo,19:74,22:$Vp,27:$Vb,31:161,68:72,83:73,90:$V4,91:$V5,92:$V6,93:$V7,94:$V8,97:45,98:46,99:47,100:48,101:49,102:50,103:51,104:52,105:53,106:54,124:$Vq,128:$Vr,129:$Vs,130:$Vt,131:$Vu,132:$Vv,133:$Vw,135:$Vx,136:$Vy,137:$Vz,138:$VA,139:$VB,140:$VC,141:$VD,142:$VE,143:$VF,144:$VG,145:$VH},{2:$Vn,11:$Vo,19:74,22:$Vp,27:$Vb,31:162,68:72,83:73,90:$V4,91:$V5,92:$V6,93:$V7,94:$V8,97:45,98:46,99:47,100:48,101:49,102:50,103:51,104:52,105:53,106:54,124:$Vq,128:$Vr,129:$Vs,130:$Vt,131:$Vu,132:$Vv,133:$Vw,135:$Vx,136:$Vy,137:$Vz,138:$VA,139:$VB,140:$VC,141:$VD,142:$VE,143:$VF,144:$VG,145:$VH},{2:$Vn,11:$Vo,19:74,22:$Vp,27:$Vb,31:163,68:72,83:73,90:$V4,91:$V5,92:$V6,93:$V7,94:$V8,97:45,98:46,99:47,100:48,101:49,102:50,103:51,104:52,105:53,106:54,124:$Vq,128:$Vr,129:$Vs,130:$Vt,131:$Vu,132:$Vv,133:$Vw,135:$Vx,136:$Vy,137:$Vz,138:$VA,139:$VB,140:$VC,141:$VD,142:$VE,143:$VF,144:$VG,145:$VH},{11:[1,164],52:[1,166],107:[1,165],108:[1,167],109:[1,168],110:[1,169],111:[1,170]},o($V41,[2,164]),o($V41,[2,165]),o($VK,$V81,{97:45,98:46,99:47,100:48,101:49,102:50,103:51,104:52,105:53,106:54,68:72,83:73,19:74,29:171,30:172,31:173,2:$Vn,11:$Vo,22:$Vp,27:$Vb,90:$V4,91:$V5,92:$V6,93:$V7,94:$V8,124:$Vq,128:$Vr,129:$Vs,130:$Vt,131:$Vu,132:$Vv,133:$Vw,135:$Vx,136:$Vy,137:$Vz,138:$VA,139:$VB,140:$VC,141:$VD,142:$VE,143:$VF,144:$VG,145:$VH}),{2:$Vn,11:$Vo,19:74,22:$Vp,27:$Vb,31:174,68:72,83:73,88:$V91,90:$V4,91:$V5,92:$V6,93:$V7,94:$V8,97:45,98:46,99:47,100:48,101:49,102:50,103:51,104:52,105:53,106:54,124:$Vq,128:$Vr,129:$Vs,130:$Vt,131:$Vu,132:$Vv,133:$Vw,135:$Vx,136:$Vy,137:$Vz,138:$VA,139:$VB,140:$VC,141:$VD,142:$VE,143:$VF,144:$VG,145:$VH},{23:[1,176],50:$VP,112:$VQ,113:$VR,114:$VS,115:$VT,116:$VU,117:$VV,118:$VW,119:$VX,120:$VY,121:$VZ,122:$V_,123:$V$,124:$V01,125:$V11,126:$V21,127:$V31},o($Va1,[2,162],{50:$VP}),o($Va1,[2,163],{50:$VP}),{2:$Vn,11:$Vo,19:74,22:$Vp,27:$Vb,31:177,68:72,83:73,90:$V4,91:$V5,92:$V6,93:$V7,94:$V8,97:45,98:46,99:47,100:48,101:49,102:50,103:51,104:52,105:53,106:54,124:$Vq,128:$Vr,129:$Vs,130:$Vt,131:$Vu,132:$Vv,133:$Vw,135:$Vx,136:$Vy,137:$Vz,138:$VA,139:$VB,140:$VC,141:$VD,142:$VE,143:$VF,144:$VG,145:$VH},{2:$Vn,11:$Vo,19:74,22:$Vp,27:$Vb,31:178,68:72,83:73,90:$V4,91:$V5,92:$V6,93:$V7,94:$V8,97:45,98:46,99:47,100:48,101:49,102:50,103:51,104:52,105:53,106:54,124:$Vq,128:$Vr,129:$Vs,130:$Vt,131:$Vu,132:$Vv,133:$Vw,135:$Vx,136:$Vy,137:$Vz,138:$VA,139:$VB,140:$VC,141:$VD,142:$VE,143:$VF,144:$VG,145:$VH},{2:$Vn,11:$Vo,19:74,22:$Vp,27:$Vb,31:179,68:72,83:73,90:$V4,91:$V5,92:$V6,93:$V7,94:$V8,97:45,98:46,99:47,100:48,101:49,102:50,103:51,104:52,105:53,106:54,124:$Vq,128:$Vr,129:$Vs,130:$Vt,131:$Vu,132:$Vv,133:$Vw,135:$Vx,136:$Vy,137:$Vz,138:$VA,139:$VB,140:$VC,141:$VD,142:$VE,143:$VF,144:$VG,145:$VH},{2:$Vn,11:$Vo,19:74,22:$Vp,27:$Vb,31:180,68:72,83:73,90:$V4,91:$V5,92:$V6,93:$V7,94:$V8,97:45,98:46,99:47,100:48,101:49,102:50,103:51,104:52,105:53,106:54,124:$Vq,128:$Vr,129:$Vs,130:$Vt,131:$Vu,132:$Vv,133:$Vw,135:$Vx,136:$Vy,137:$Vz,138:$VA,139:$VB,140:$VC,141:$VD,142:$VE,143:$VF,144:$VG,145:$VH},{2:$Vn,11:$Vo,19:74,22:$Vp,27:$Vb,31:181,68:72,83:73,90:$V4,91:$V5,92:$V6,93:$V7,94:$V8,97:45,98:46,99:47,100:48,101:49,102:50,103:51,104:52,105:53,106:54,124:$Vq,128:$Vr,129:$Vs,130:$Vt,131:$Vu,132:$Vv,133:$Vw,135:$Vx,136:$Vy,137:$Vz,138:$VA,139:$VB,140:$VC,141:$VD,142:$VE,143:$VF,144:$VG,145:$VH},{134:[1,182]},{2:$Vn,11:$Vo,19:74,22:$Vp,27:$Vb,31:183,68:72,83:73,90:$V4,91:$V5,92:$V6,93:$V7,94:$V8,97:45,98:46,99:47,100:48,101:49,102:50,103:51,104:52,105:53,106:54,124:$Vq,128:$Vr,129:$Vs,130:$Vt,131:$Vu,132:$Vv,133:$Vw,135:$Vx,136:$Vy,137:$Vz,138:$VA,139:$VB,140:$VC,141:$VD,142:$VE,143:$VF,144:$VG,145:$VH},{2:$Vn,11:$Vo,19:74,22:$Vp,27:$Vb,31:184,68:72,83:73,90:$V4,91:$V5,92:$V6,93:$V7,94:$V8,97:45,98:46,99:47,100:48,101:49,102:50,103:51,104:52,105:53,106:54,124:$Vq,128:$Vr,129:$Vs,130:$Vt,131:$Vu,132:$Vv,133:$Vw,135:$Vx,136:$Vy,137:$Vz,138:$VA,139:$VB,140:$VC,141:$VD,142:$VE,143:$VF,144:$VG,145:$VH},{2:$Vn,11:$Vo,19:74,22:$Vp,27:$Vb,31:185,68:72,83:73,90:$V4,91:$V5,92:$V6,93:$V7,94:$V8,97:45,98:46,99:47,100:48,101:49,102:50,103:51,104:52,105:53,106:54,124:$Vq,128:$Vr,129:$Vs,130:$Vt,131:$Vu,132:$Vv,133:$Vw,135:$Vx,136:$Vy,137:$Vz,138:$VA,139:$VB,140:$VC,141:$VD,142:$VE,143:$VF,144:$VG,145:$VH},{2:$Vn,11:$Vo,19:74,22:$Vp,27:$Vb,31:186,68:72,83:73,90:$V4,91:$V5,92:$V6,93:$V7,94:$V8,97:45,98:46,99:47,100:48,101:49,102:50,103:51,104:52,105:53,106:54,124:$Vq,128:$Vr,129:$Vs,130:$Vt,131:$Vu,132:$Vv,133:$Vw,135:$Vx,136:$Vy,137:$Vz,138:$VA,139:$VB,140:$VC,141:$VD,142:$VE,143:$VF,144:$VG,145:$VH},o($Vd,[2,76]),{2:$Vb1,13:$Vc1,24:187},{18:$V71,23:[1,190]},o($V9,[2,10]),{15:[1,191]},{2:$VI,11:$VJ,17:192,19:86,90:$V4,91:$V5,92:$V6,93:$V7,94:$V8},o($V61,[2,15]),o($V61,[2,16]),{2:$Vb1,13:$Vc1,24:193},{2:$VM,19:94,26:194,90:$V4,91:$V5,92:$V6,93:$V7,94:$V8},o($VK,[2,24]),{28:[1,195]},o($Vd,[2,79]),o($VO,[2,105]),o([15,18,23,28,61,112,113,114],[2,146],{50:$VP,115:$VT,116:$VU,117:$VV,118:$VW,119:$VX,120:$VY,121:$VZ,122:$V_,123:$V$,124:$V01,125:$V11,126:$V21,127:$V31}),o($Vd1,[2,147],{50:$VP,113:$VR,115:$VT,116:$VU,117:$VV,118:$VW,119:$VX,120:$VY,121:$VZ,122:$V_,123:$V$,124:$V01,125:$V11,126:$V21,127:$V31}),o($Ve1,[2,154],{50:$VP,126:$V21}),o($Ve1,[2,155],{50:$VP,126:$V21}),o($Vf1,[2,156],{50:$VP,121:$VZ,122:$V_,126:$V21,127:$V31}),o($Vf1,[2,157],{50:$VP,121:$VZ,122:$V_,126:$V21,127:$V31}),o($Vf1,[2,158],{50:$VP,121:$VZ,122:$V_,126:$V21,127:$V31}),o($Va1,[2,159],{50:$VP}),o($Ve1,[2,160],{50:$VP,126:$V21}),o($Vg1,[2,148],{50:$VP,121:$VZ,122:$V_,123:$V$,124:$V01,125:$V11,126:$V21,127:$V31}),o($Vg1,[2,149],{50:$VP,121:$VZ,122:$V_,123:$V$,124:$V01,125:$V11,126:$V21,127:$V31}),o($Vg1,[2,150],{50:$VP,121:$VZ,122:$V_,123:$V$,124:$V01,125:$V11,126:$V21,127:$V31}),o($Vg1,[2,151],{50:$VP,121:$VZ,122:$V_,123:$V$,124:$V01,125:$V11,126:$V21,127:$V31}),o($Vg1,[2,152],{50:$VP,121:$VZ,122:$V_,123:$V$,124:$V01,125:$V11,126:$V21,127:$V31}),o($Vg1,[2,153],{50:$VP,121:$VZ,122:$V_,123:$V$,124:$V01,125:$V11,126:$V21,127:$V31}),{50:$VP,61:[1,196],112:$VQ,113:$VR,114:$VS,115:$VT,116:$VU,117:$VV,118:$VW,119:$VX,120:$VY,121:$VZ,122:$V_,123:$V$,124:$V01,125:$V11,126:$V21,127:$V31},o($V41,[2,138]),{22:[1,197]},{22:[1,198]},{22:[1,199]},{22:[1,200]},{22:[1,201]},{22:[1,202]},{18:$Vh1,23:[1,203]},o($VK,[2,28]),o($VK,[2,30],{50:$VP,112:$VQ,113:$VR,114:$VS,115:$VT,116:$VU,117:$VV,118:$VW,119:$VX,120:$VY,121:$VZ,122:$V_,123:$V$,124:$V01,125:$V11,126:$V21,127:$V31}),{28:[1,205],50:$VP,61:$Vi1,112:$VQ,113:$VR,114:$VS,115:$VT,116:$VU,117:$VV,118:$VW,119:$VX,120:$VY,121:$VZ,122:$V_,123:$V$,124:$V01,125:$V11,126:$V21,127:$V31},{61:[1,207]},o($V41,[2,161]),{18:[1,208],50:$VP,112:$VQ,113:$VR,114:$VS,115:$VT,116:$VU,117:$VV,118:$VW,119:$VX,120:$VY,121:$VZ,122:$V_,123:$V$,124:$V01,125:$V11,126:$V21,127:$V31},{23:[1,209],50:$VP,112:$VQ,113:$VR,114:$VS,115:$VT,116:$VU,117:$VV,118:$VW,119:$VX,120:$VY,121:$VZ,122:$V_,123:$V$,124:$V01,125:$V11,126:$V21,127:$V31},{23:[1,210],50:$VP,112:$VQ,113:$VR,114:$VS,115:$VT,116:$VU,117:$VV,118:$VW,119:$VX,120:$VY,121:$VZ,122:$V_,123:$V$,124:$V01,125:$V11,126:$V21,127:$V31},{23:[1,211],50:$VP,112:$VQ,113:$VR,114:$VS,115:$VT,116:$VU,117:$VV,118:$VW,119:$VX,120:$VY,121:$VZ,122:$V_,123:$V$,124:$V01,125:$V11,126:$V21,127:$V31},{23:[1,212],50:$VP,112:$VQ,113:$VR,114:$VS,115:$VT,116:$VU,117:$VV,118:$VW,119:$VX,120:$VY,121:$VZ,122:$V_,123:$V$,124:$V01,125:$V11,126:$V21,127:$V31},{22:[1,213]},{23:[1,214],50:$VP,112:$VQ,113:$VR,114:$VS,115:$VT,116:$VU,117:$VV,118:$VW,119:$VX,120:$VY,121:$VZ,122:$V_,123:$V$,124:$V01,125:$V11,126:$V21,127:$V31},{23:[1,215],50:$VP,112:$VQ,113:$VR,114:$VS,115:$VT,116:$VU,117:$VV,118:$VW,119:$VX,120:$VY,121:$VZ,122:$V_,123:$V$,124:$V01,125:$V11,126:$V21,127:$V31},{23:[1,216],50:$VP,112:$VQ,113:$VR,114:$VS,115:$VT,116:$VU,117:$VV,118:$VW,119:$VX,120:$VY,121:$VZ,122:$V_,123:$V$,124:$V01,125:$V11,126:$V21,127:$V31},{23:[1,217],50:$VP,112:$VQ,113:$VR,114:$VS,115:$VT,116:$VU,117:$VV,118:$VW,119:$VX,120:$VY,121:$VZ,122:$V_,123:$V$,124:$V01,125:$V11,126:$V21,127:$V31},o($V9,[2,18]),{2:$Vj1,7:221,11:$Vk1,14:[1,219],19:235,32:218,33:220,34:222,35:223,36:224,37:225,38:226,39:227,40:228,41:229,42:230,43:231,44:232,45:233,46:$Vl1,47:$Vm1,48:$Vn1,49:$Vo1,55:$Vp1,67:10,69:237,70:$Vq1,72:$Vr1,74:$Vs1,80:$Vt1,84:$Vu1,85:$Vv1,90:$V4,91:$V5,92:$V6,93:$V7,94:$V8},o($Vw1,[2,33]),{2:$Vb1,13:$Vc1,24:249},o($V9,[2,11]),o($V61,[2,14]),o($V9,[2,19]),o($VK,[2,21]),{11:[1,250]},{2:$Vn,11:$Vo,19:74,22:$Vp,27:$Vb,31:251,68:72,83:73,90:$V4,91:$V5,92:$V6,93:$V7,94:$V8,97:45,98:46,99:47,100:48,101:49,102:50,103:51,104:52,105:53,106:54,124:$Vq,128:$Vr,129:$Vs,130:$Vt,131:$Vu,132:$Vv,133:$Vw,135:$Vx,136:$Vy,137:$Vz,138:$VA,139:$VB,140:$VC,141:$VD,142:$VE,143:$VF,144:$VG,145:$VH},{23:[1,252]},{23:[1,253]},{23:[1,254]},{23:[1,255]},{2:$Vn,11:$Vo,19:74,22:$Vp,27:$Vb,31:256,68:72,83:73,90:$V4,91:$V5,92:$V6,93:$V7,94:$V8,97:45,98:46,99:47,100:48,101:49,102:50,103:51,104:52,105:53,106:54,124:$Vq,128:$Vr,129:$Vs,130:$Vt,131:$Vu,132:$Vv,133:$Vw,135:$Vx,136:$Vy,137:$Vz,138:$VA,139:$VB,140:$VC,141:$VD,142:$VE,143:$VF,144:$VG,145:$VH},{2:$Vn,11:$Vo,19:74,22:$Vp,27:$Vb,31:257,68:72,83:73,90:$V4,91:$V5,92:$V6,93:$V7,94:$V8,97:45,98:46,99:47,100:48,101:49,102:50,103:51,104:52,105:53,106:54,124:$Vq,128:$Vr,129:$Vs,130:$Vt,131:$Vu,132:$Vv,133:$Vw,135:$Vx,136:$Vy,137:$Vz,138:$VA,139:$VB,140:$VC,141:$VD,142:$VE,143:$VF,144:$VG,145:$VH},o($V51,[2,183]),{2:$Vn,11:$Vo,19:74,22:$Vp,27:$Vb,30:258,31:173,68:72,83:73,90:$V4,91:$V5,92:$V6,93:$V7,94:$V8,97:45,98:46,99:47,100:48,101:49,102:50,103:51,104:52,105:53,106:54,124:$Vq,128:$Vr,129:$Vs,130:$Vt,131:$Vu,132:$Vv,133:$Vw,135:$Vx,136:$Vy,137:$Vz,138:$VA,139:$VB,140:$VC,141:$VD,142:$VE,143:$VF,144:$VG,145:$VH},o($V41,[2,136]),{2:$Vn,11:$Vo,19:74,22:$Vp,27:$Vb,31:259,68:72,83:73,89:[1,260],90:$V4,91:$V5,92:$V6,93:$V7,94:$V8,97:45,98:46,99:47,100:48,101:49,102:50,103:51,104:52,105:53,106:54,124:$Vq,128:$Vr,129:$Vs,130:$Vt,131:$Vu,132:$Vv,133:$Vw,135:$Vx,136:$Vy,137:$Vz,138:$VA,139:$VB,140:$VC,141:$VD,142:$VE,143:$VF,144:$VG,145:$VH},{2:$Vn,11:$Vo,19:74,22:$Vp,27:$Vb,31:261,68:72,83:73,89:[1,262],90:$V4,91:$V5,92:$V6,93:$V7,94:$V8,97:45,98:46,99:47,100:48,101:49,102:50,103:51,104:52,105:53,106:54,124:$Vq,128:$Vr,129:$Vs,130:$Vt,131:$Vu,132:$Vv,133:$Vw,135:$Vx,136:$Vy,137:$Vz,138:$VA,139:$VB,140:$VC,141:$VD,142:$VE,143:$VF,144:$VG,145:$VH},{2:$Vn,11:$Vo,19:74,22:$Vp,27:$Vb,31:263,68:72,83:73,90:$V4,91:$V5,92:$V6,93:$V7,94:$V8,97:45,98:46,99:47,100:48,101:49,102:50,103:51,104:52,105:53,106:54,124:$Vq,128:$Vr,129:$Vs,130:$Vt,131:$Vu,132:$Vv,133:$Vw,135:$Vx,136:$Vy,137:$Vz,138:$VA,139:$VB,140:$VC,141:$VD,142:$VE,143:$VF,144:$VG,145:$VH},o($V41,[2,167]),o($V41,[2,168]),o($V41,[2,169]),o($V41,[2,170]),{2:$Vn,11:$Vo,19:74,22:$Vp,27:$Vb,31:264,68:72,83:73,90:$V4,91:$V5,92:$V6,93:$V7,94:$V8,97:45,98:46,99:47,100:48,101:49,102:50,103:51,104:52,105:53,106:54,124:$Vq,128:$Vr,129:$Vs,130:$Vt,131:$Vu,132:$Vv,133:$Vw,135:$Vx,136:$Vy,137:$Vz,138:$VA,139:$VB,140:$VC,141:$VD,142:$VE,143:$VF,144:$VG,145:$VH},o($V41,[2,172]),o($V41,[2,173]),o($V41,[2,174]),o($V41,[2,175]),{2:$Vj1,7:221,11:$Vk1,14:[1,265],19:235,33:266,34:222,35:223,36:224,37:225,38:226,39:227,40:228,41:229,42:230,43:231,44:232,45:233,46:$Vl1,47:$Vm1,48:$Vn1,49:$Vo1,55:$Vp1,67:10,69:237,70:$Vq1,72:$Vr1,74:$Vs1,80:$Vt1,84:$Vu1,85:$Vv1,90:$V4,91:$V5,92:$V6,93:$V7,94:$V8},o($Vw1,[2,32]),o($Vx1,[2,35]),o($Vx1,[2,36]),o($Vx1,[2,37]),o($Vx1,[2,38]),o($Vx1,[2,39]),o($Vx1,[2,40]),o($Vx1,[2,41]),o($Vx1,[2,42]),o($Vx1,[2,43]),o($Vx1,[2,44]),o($Vx1,[2,45]),o($Vx1,[2,46]),o($Vx1,[2,47]),o($Vx1,[2,48]),o($Vx1,[2,61],{15:[1,267],23:[1,268]}),{2:$Va,11:$Vm,27:$Vb,65:21,68:23},o($Vy1,$Vz1,{95:274,11:$Vc,22:[1,270],27:[1,269],50:[1,273],53:[1,271],54:[1,272]}),{2:$Vh,66:275,96:$Vj},{22:[1,276]},{22:[1,277]},{22:[1,278]},{11:[1,280],22:[1,279]},{22:[1,281]},{2:$Vb1,13:$Vc1,24:282},{22:[1,283]},{2:$Vn,11:$Vo,15:[1,284],19:74,22:$Vp,27:$Vb,31:285,68:72,83:73,90:$V4,91:$V5,92:$V6,93:$V7,94:$V8,97:45,98:46,99:47,100:48,101:49,102:50,103:51,104:52,105:53,106:54,124:$Vq,128:$Vr,129:$Vs,130:$Vt,131:$Vu,132:$Vv,133:$Vw,135:$Vx,136:$Vy,137:$Vz,138:$VA,139:$VB,140:$VC,141:$VD,142:$VE,143:$VF,144:$VG,145:$VH},{15:[1,286]},{15:[1,287]},{22:[1,288]},o($V9,[2,20]),o($VK,[2,25]),o($Vd1,[2,145],{50:$VP,113:$VR,115:$VT,116:$VU,117:$VV,118:$VW,119:$VX,120:$VY,121:$VZ,122:$V_,123:$V$,124:$V01,125:$V11,126:$V21,127:$V31}),o($V41,[2,139]),o($V41,[2,140]),o($V41,[2,141]),o($V41,[2,142]),{23:[1,289],50:$VP,112:$VQ,113:$VR,114:$VS,115:$VT,116:$VU,117:$VV,118:$VW,119:$VX,120:$VY,121:$VZ,122:$V_,123:$V$,124:$V01,125:$V11,126:$V21,127:$V31},{18:[1,290],50:$VP,112:$VQ,113:$VR,114:$VS,115:$VT,116:$VU,117:$VV,118:$VW,119:$VX,120:$VY,121:$VZ,122:$V_,123:$V$,124:$V01,125:$V11,126:$V21,127:$V31},o($VK,[2,27]),{28:[1,291],50:$VP,112:$VQ,113:$VR,114:$VS,115:$VT,116:$VU,117:$VV,118:$VW,119:$VX,120:$VY,121:$VZ,122:$V_,123:$V$,124:$V01,125:$V11,126:$V21,127:$V31},{28:[1,292]},{28:[1,293],50:$VP,112:$VQ,113:$VR,114:$VS,115:$VT,116:$VU,117:$VV,118:$VW,119:$VX,120:$VY,121:$VZ,122:$V_,123:$V$,124:$V01,125:$V11,126:$V21,127:$V31},{28:[1,294]},{23:[1,295],50:$VP,112:$VQ,113:$VR,114:$VS,115:$VT,116:$VU,117:$VV,118:$VW,119:$VX,120:$VY,121:$VZ,122:$V_,123:$V$,124:$V01,125:$V11,126:$V21,127:$V31},{23:[1,296],50:$VP,112:$VQ,113:$VR,114:$VS,115:$VT,116:$VU,117:$VV,118:$VW,119:$VX,120:$VY,121:$VZ,122:$V_,123:$V$,124:$V01,125:$V11,126:$V21,127:$V31},o($Vw1,[2,31]),o($Vx1,[2,34]),o($Vx1,[2,49]),o($Vx1,[2,84]),{2:$Vn,11:$Vo,19:74,22:$Vp,27:$Vb,31:297,68:72,83:73,90:$V4,91:$V5,92:$V6,93:$V7,94:$V8,97:45,98:46,99:47,100:48,101:49,102:50,103:51,104:52,105:53,106:54,124:$Vq,128:$Vr,129:$Vs,130:$Vt,131:$Vu,132:$Vv,133:$Vw,135:$Vx,136:$Vy,137:$Vz,138:$VA,139:$VB,140:$VC,141:$VD,142:$VE,143:$VF,144:$VG,145:$VH},o($VK,$V81,{97:45,98:46,99:47,100:48,101:49,102:50,103:51,104:52,105:53,106:54,68:72,83:73,19:74,30:172,31:173,29:298,2:$Vn,11:$Vo,22:$Vp,27:$Vb,90:$V4,91:$V5,92:$V6,93:$V7,94:$V8,124:$Vq,128:$Vr,129:$Vs,130:$Vt,131:$Vu,132:$Vv,133:$Vw,135:$Vx,136:$Vy,137:$Vz,138:$VA,139:$VB,140:$VC,141:$VD,142:$VE,143:$VF,144:$VG,145:$VH}),{15:[1,299]},{15:[1,300]},{11:$VA1,51:[1,301],52:[1,302]},o($Vy1,[2,119]),{15:[1,304]},{2:$Vn,11:$Vo,19:74,22:$Vp,27:$Vb,31:306,68:72,71:305,83:73,90:$V4,91:$V5,92:$V6,93:$V7,94:$V8,97:45,98:46,99:47,100:48,101:49,102:50,103:51,104:52,105:53,106:54,124:$Vq,128:$Vr,129:$Vs,130:$Vt,131:$Vu,132:$Vv,133:$Vw,135:$Vx,136:$Vy,137:$Vz,138:$VA,139:$VB,140:$VC,141:$VD,142:$VE,143:$VF,144:$VG,145:$VH},{2:$Vn,11:$Vo,19:74,22:$Vp,27:$Vb,31:306,68:72,71:307,83:73,90:$V4,91:$V5,92:$V6,93:$V7,94:$V8,97:45,98:46,99:47,100:48,101:49,102:50,103:51,104:52,105:53,106:54,124:$Vq,128:$Vr,129:$Vs,130:$Vt,131:$Vu,132:$Vv,133:$Vw,135:$Vx,136:$Vy,137:$Vz,138:$VA,139:$VB,140:$VC,141:$VD,142:$VE,143:$VF,144:$VG,145:$VH},{2:$Vn,11:$Vo,19:74,22:$Vp,27:$Vb,31:308,68:72,83:73,90:$V4,91:$V5,92:$V6,93:$V7,94:$V8,97:45,98:46,99:47,100:48,101:49,102:50,103:51,104:52,105:53,106:54,124:$Vq,128:$Vr,129:$Vs,130:$Vt,131:$Vu,132:$Vv,133:$Vw,135:$Vx,136:$Vy,137:$Vz,138:$VA,139:$VB,140:$VC,141:$VD,142:$VE,143:$VF,144:$VG,145:$VH},{11:[1,312],19:310,69:311,81:309,90:$V4,91:$V5,92:$V6,93:$V7,94:$V8},{82:[1,313]},{2:$Vn,11:$Vo,19:74,22:$Vp,27:$Vb,31:314,68:72,83:73,90:$V4,91:$V5,92:$V6,93:$V7,94:$V8,97:45,98:46,99:47,100:48,101:49,102:50,103:51,104:52,105:53,106:54,124:$Vq,128:$Vr,129:$Vs,130:$Vt,131:$Vu,132:$Vv,133:$Vw,135:$Vx,136:$Vy,137:$Vz,138:$VA,139:$VB,140:$VC,141:$VD,142:$VE,143:$VF,144:$VG,145:$VH},{84:[1,315]},{2:$Vn,11:$Vo,19:74,22:$Vp,27:$Vb,31:316,68:72,83:73,90:$V4,91:$V5,92:$V6,93:$V7,94:$V8,97:45,98:46,99:47,100:48,101:49,102:50,103:51,104:52,105:53,106:54,124:$Vq,128:$Vr,129:$Vs,130:$Vt,131:$Vu,132:$Vv,133:$Vw,135:$Vx,136:$Vy,137:$Vz,138:$VA,139:$VB,140:$VC,141:$VD,142:$VE,143:$VF,144:$VG,145:$VH},o($Vx1,[2,53]),{15:[1,317],50:$VP,112:$VQ,113:$VR,114:$VS,115:$VT,116:$VU,117:$VV,118:$VW,119:$VX,120:$VY,121:$VZ,122:$V_,123:$V$,124:$V01,125:$V11,126:$V21,127:$V31},o($Vx1,[2,51]),o($Vx1,[2,52]),{23:[1,318]},o($V41,[2,143]),{2:$Vn,11:$Vo,19:74,22:$Vp,27:$Vb,31:319,68:72,83:73,90:$V4,91:$V5,92:$V6,93:$V7,94:$V8,97:45,98:46,99:47,100:48,101:49,102:50,103:51,104:52,105:53,106:54,124:$Vq,128:$Vr,129:$Vs,130:$Vt,131:$Vu,132:$Vv,133:$Vw,135:$Vx,136:$Vy,137:$Vz,138:$VA,139:$VB,140:$VC,141:$VD,142:$VE,143:$VF,144:$VG,145:$VH},o($VB1,[2,107]),o($VB1,[2,110]),o($VB1,[2,108]),o($VB1,[2,109]),o($V41,[2,166]),o($V41,[2,171]),{28:[1,320],50:$VP,112:$VQ,113:$VR,114:$VS,115:$VT,116:$VU,117:$VV,118:$VW,119:$VX,120:$VY,121:$VZ,122:$V_,123:$V$,124:$V01,125:$V11,126:$V21,127:$V31},{18:$Vh1,23:[1,321]},o($Vx1,[2,57]),o($Vx1,[2,58]),{22:[1,322]},{22:[1,323]},o($Vy1,$Vz1,{95:324,50:$VC1}),o($Vx1,[2,80]),{23:[1,326]},{18:$VD1,23:$VE1,50:$VP,73:327,112:$VQ,113:$VR,114:$VS,115:$VT,116:$VU,117:$VV,118:$VW,119:$VX,120:$VY,121:$VZ,122:$V_,123:$V$,124:$V01,125:$V11,126:$V21,127:$V31},{23:[1,329]},{23:[1,330],50:$VP,112:$VQ,113:$VR,114:$VS,115:$VT,116:$VU,117:$VV,118:$VW,119:$VX,120:$VY,121:$VZ,122:$V_,123:$V$,124:$V01,125:$V11,126:$V21,127:$V31},{15:[1,331]},{2:$Va,11:$Vm,65:332},{2:$Vh,66:333,96:$Vj},o($Vy1,$Vz1,{95:274,50:$VC1}),{11:[1,334],27:$Vb,68:335,83:336},{23:[1,337],50:$VP,112:$VQ,113:$VR,114:$VS,115:$VT,116:$VU,117:$VV,118:$VW,119:$VX,120:$VY,121:$VZ,122:$V_,123:$V$,124:$V01,125:$V11,126:$V21,127:$V31},{22:[1,338]},{23:[1,339],50:$VP,112:$VQ,113:$VR,114:$VS,115:$VT,116:$VU,117:$VV,118:$VW,119:$VX,120:$VY,121:$VZ,122:$V_,123:$V$,124:$V01,125:$V11,126:$V21,127:$V31},o($Vx1,[2,54]),{15:[1,340]},{23:[1,341],50:$VP,112:$VQ,113:$VR,114:$VS,115:$VT,116:$VU,117:$VV,118:$VW,119:$VX,120:$VY,121:$VZ,122:$V_,123:$V$,124:$V01,125:$V11,126:$V21,127:$V31},{2:$Vh,66:342,96:$Vj},{15:[1,343]},{2:$Vn,11:$Vo,19:74,22:$Vp,27:$Vb,31:344,68:72,83:73,90:$V4,91:$V5,92:$V6,93:$V7,94:$V8,97:45,98:46,99:47,100:48,101:49,102:50,103:51,104:52,105:53,106:54,124:$Vq,128:$Vr,129:$Vs,130:$Vt,131:$Vu,132:$Vv,133:$Vw,135:$Vx,136:$Vy,137:$Vz,138:$VA,139:$VB,140:$VC,141:$VD,142:$VE,143:$VF,144:$VG,145:$VH},{23:[1,345]},o($Vy1,[2,120]),{11:$VA1},{15:[1,346]},{23:[2,85]},{2:$Vn,11:$Vo,19:74,22:$Vp,27:$Vb,31:347,68:72,83:73,90:$V4,91:$V5,92:$V6,93:$V7,94:$V8,97:45,98:46,99:47,100:48,101:49,102:50,103:51,104:52,105:53,106:54,124:$Vq,128:$Vr,129:$Vs,130:$Vt,131:$Vu,132:$Vv,133:$Vw,135:$Vx,136:$Vy,137:$Vz,138:$VA,139:$VB,140:$VC,141:$VD,142:$VE,143:$VF,144:$VG,145:$VH},{15:[1,348]},{2:$Vb1,13:$Vc1,24:349},{2:$Vn,11:$Vo,19:74,22:$Vp,27:$Vb,31:350,68:72,83:73,90:$V4,91:$V5,92:$V6,93:$V7,94:$V8,97:45,98:46,99:47,100:48,101:49,102:50,103:51,104:52,105:53,106:54,124:$Vq,128:$Vr,129:$Vs,130:$Vt,131:$Vu,132:$Vv,133:$Vw,135:$Vx,136:$Vy,137:$Vz,138:$VA,139:$VB,140:$VC,141:$VD,142:$VE,143:$VF,144:$VG,145:$VH},{2:$Vh,18:$Vi,66:351,96:$Vj},{15:[2,101]},{2:$Vb1,13:$Vc1,24:352,27:[1,353]},{2:$Vb1,13:$Vc1,24:354},{2:$Vb1,13:$Vc1,24:355},{2:$Vb1,13:$Vc1,24:356},{2:$Vn,11:$Vo,19:74,22:$Vp,27:$Vb,31:357,68:72,83:73,90:$V4,91:$V5,92:$V6,93:$V7,94:$V8,97:45,98:46,99:47,100:48,101:49,102:50,103:51,104:52,105:53,106:54,124:$Vq,128:$Vr,129:$Vs,130:$Vt,131:$Vu,132:$Vv,133:$Vw,135:$Vx,136:$Vy,137:$Vz,138:$VA,139:$VB,140:$VC,141:$VD,142:$VE,143:$VF,144:$VG,145:$VH},{2:[1,360],13:[1,359],56:358},o($Vx1,[2,50]),o($V41,[2,144]),{15:[1,361]},o($Vx1,[2,59]),{23:[1,362],50:$VP,112:$VQ,113:$VR,114:$VS,115:$VT,116:$VU,117:$VV,118:$VW,119:$VX,120:$VY,121:$VZ,122:$V_,123:$V$,124:$V01,125:$V11,126:$V21,127:$V31},{15:[1,363]},o($Vx1,[2,82]),{18:$VD1,23:$VE1,50:$VP,73:364,112:$VQ,113:$VR,114:$VS,115:$VT,116:$VU,117:$VV,118:$VW,119:$VX,120:$VY,121:$VZ,122:$V_,123:$V$,124:$V01,125:$V11,126:$V21,127:$V31},o($Vx1,[2,83]),o($Vx1,$VF1,{75:365,78:367,77:$VG1,79:$VH1}),{15:[1,369],50:$VP,112:$VQ,113:$VR,114:$VS,115:$VT,116:$VU,117:$VV,118:$VW,119:$VX,120:$VY,121:$VZ,122:$V_,123:$V$,124:$V01,125:$V11,126:$V21,127:$V31},{15:[2,100]},o($Vx1,[2,95]),{2:$Vn,11:$Vo,19:74,22:$Vp,27:$Vb,31:370,68:72,83:73,88:$V91,90:$V4,91:$V5,92:$V6,93:$V7,94:$V8,97:45,98:46,99:47,100:48,101:49,102:50,103:51,104:52,105:53,106:54,124:$Vq,128:$Vr,129:$Vs,130:$Vt,131:$Vu,132:$Vv,133:$Vw,135:$Vx,136:$Vy,137:$Vz,138:$VA,139:$VB,140:$VC,141:$VD,142:$VE,143:$VF,144:$VG,145:$VH},o($Vx1,$Vy1),o($Vx1,[2,97]),o($Vx1,[2,98]),{23:[1,371],50:$VP,112:$VQ,113:$VR,114:$VS,115:$VT,116:$VU,117:$VV,118:$VW,119:$VX,120:$VY,121:$VZ,122:$V_,123:$V$,124:$V01,125:$V11,126:$V21,127:$V31},o($Vx1,[2,60]),{14:[1,372],57:373,59:374,60:$VI1},o($Vx1,[2,64]),o($Vx1,[2,81]),{15:[1,376]},o($Vx1,[2,56]),{23:[2,86]},o($Vx1,[2,88]),{2:$Vb1,13:$Vc1,24:377},o($Vx1,$VF1,{78:367,75:378,77:$VG1,79:$VH1}),{22:[1,379]},{2:$Vn,11:$Vo,19:74,22:$Vp,27:$Vb,31:380,68:72,83:73,90:$V4,91:$V5,92:$V6,93:$V7,94:$V8,97:45,98:46,99:47,100:48,101:49,102:50,103:51,104:52,105:53,106:54,124:$Vq,128:$Vr,129:$Vs,130:$Vt,131:$Vu,132:$Vv,133:$Vw,135:$Vx,136:$Vy,137:$Vz,138:$VA,139:$VB,140:$VC,141:$VD,142:$VE,143:$VF,144:$VG,145:$VH},{50:$VP,61:$Vi1,112:$VQ,113:$VR,114:$VS,115:$VT,116:$VU,117:$VV,118:$VW,119:$VX,120:$VY,121:$VZ,122:$V_,123:$V$,124:$V01,125:$V11,126:$V21,127:$V31},o($Vx1,[2,99]),o($Vx1,[2,62]),{14:[2,70],58:381,59:382,60:$VI1,63:[1,383]},o($VJ1,[2,66]),{2:$Vn,11:$Vo,19:74,22:$Vp,27:$Vb,31:384,68:72,83:73,90:$V4,91:$V5,92:$V6,93:$V7,94:$V8,97:45,98:46,99:47,100:48,101:49,102:50,103:51,104:52,105:53,106:54,124:$Vq,128:$Vr,129:$Vs,130:$Vt,131:$Vu,132:$Vv,133:$Vw,135:$Vx,136:$Vy,137:$Vz,138:$VA,139:$VB,140:$VC,141:$VD,142:$VE,143:$VF,144:$VG,145:$VH},o($Vx1,[2,55]),o($Vx1,[2,90]),o($Vx1,[2,91]),{2:$Vn,11:$Vo,19:74,22:$Vp,27:$Vb,31:385,68:72,83:73,90:$V4,91:$V5,92:$V6,93:$V7,94:$V8,97:45,98:46,99:47,100:48,101:49,102:50,103:51,104:52,105:53,106:54,124:$Vq,128:$Vr,129:$Vs,130:$Vt,131:$Vu,132:$Vv,133:$Vw,135:$Vx,136:$Vy,137:$Vz,138:$VA,139:$VB,140:$VC,141:$VD,142:$VE,143:$VF,144:$VG,145:$VH},{23:[1,386],50:$VP,112:$VQ,113:$VR,114:$VS,115:$VT,116:$VU,117:$VV,118:$VW,119:$VX,120:$VY,121:$VZ,122:$V_,123:$V$,124:$V01,125:$V11,126:$V21,127:$V31},{14:[1,387]},o($VJ1,[2,65]),{61:[1,388]},{50:$VP,61:[1,389],112:$VQ,113:$VR,114:$VS,115:$VT,116:$VU,117:$VV,118:$VW,119:$VX,120:$VY,121:$VZ,122:$V_,123:$V$,124:$V01,125:$V11,126:$V21,127:$V31},{23:[1,390],50:$VP,112:$VQ,113:$VR,114:$VS,115:$VT,116:$VU,117:$VV,118:$VW,119:$VX,120:$VY,121:$VZ,122:$V_,123:$V$,124:$V01,125:$V11,126:$V21,127:$V31},{2:$Vb1,13:$Vc1,24:391},o($Vx1,[2,63]),{2:$Vj1,7:221,11:$Vk1,19:235,32:393,33:220,34:222,35:223,36:224,37:225,38:226,39:227,40:228,41:229,42:230,43:231,44:232,45:233,46:$Vl1,47:$Vm1,48:$Vn1,49:$Vo1,55:$Vp1,62:392,67:10,69:237,70:$Vq1,72:$Vr1,74:$Vs1,80:$Vt1,84:$Vu1,85:$Vv1,90:$V4,91:$V5,92:$V6,93:$V7,94:$V8},{2:$Vj1,7:221,11:$Vk1,19:235,32:393,33:220,34:222,35:223,36:224,37:225,38:226,39:227,40:228,41:229,42:230,43:231,44:232,45:233,46:$Vl1,47:$Vm1,48:$Vn1,49:$Vo1,55:$Vp1,62:394,67:10,69:237,70:$Vq1,72:$Vr1,74:$Vs1,80:$Vt1,84:$Vu1,85:$Vv1,90:$V4,91:$V5,92:$V6,93:$V7,94:$V8},{2:$Vb1,13:$Vc1,24:395},o($Vx1,[2,94]),{14:[2,69]},o($VJ1,[2,68],{67:10,7:221,34:222,35:223,36:224,37:225,38:226,39:227,40:228,41:229,42:230,43:231,44:232,45:233,19:235,69:237,33:266,2:$Vj1,11:$Vk1,46:$Vl1,47:$Vm1,48:$Vn1,49:$Vo1,55:$Vp1,70:$Vq1,72:$Vr1,74:$Vs1,80:$Vt1,84:$Vu1,85:$Vv1,90:$V4,91:$V5,92:$V6,93:$V7,94:$V8}),o($VJ1,[2,67]),o([2,11,14,46,47,48,49,55,60,63,70,72,74,77,79,80,84,85,90,91,92,93,94],[2,93])],
defaultActions: {2:[2,1],19:[2,2],37:[2,123],327:[2,85],333:[2,101],351:[2,100],364:[2,86],392:[2,69]},
parseError: function parseError (str, hash) {
    if (hash.recoverable) {
        this.trace(str);
    } else {
        var error = new Error(str);
        error.hash = hash;
        throw error;
    }
},
parse: function parse (input) {
    var self = this,
        stack = [0],
        tstack = [], // token stack
        vstack = [null], // semantic value stack
        lstack = [], // location stack
        table = this.table,
        yytext = '',
        yylineno = 0,
        yyleng = 0,
        recovering = 0,
        TERROR = 2,
        EOF = 1;

    var args = lstack.slice.call(arguments, 1);

    //this.reductionCount = this.shiftCount = 0;

    var lexer = Object.create(this.lexer);
    var sharedState = { yy: {} };
    // copy state
    for (var k in this.yy) {
      if (Object.prototype.hasOwnProperty.call(this.yy, k)) {
        sharedState.yy[k] = this.yy[k];
      }
    }

    lexer.setInput(input, sharedState.yy);
    sharedState.yy.lexer = lexer;
    sharedState.yy.parser = this;
    if (typeof lexer.yylloc == 'undefined') {
        lexer.yylloc = {};
    }
    var yyloc = lexer.yylloc;
    lstack.push(yyloc);

    var ranges = lexer.options && lexer.options.ranges;

    if (typeof sharedState.yy.parseError === 'function') {
        this.parseError = sharedState.yy.parseError;
    } else {
        this.parseError = Object.getPrototypeOf(this).parseError;
    }

    function popStack (n) {
        stack.length = stack.length - 2 * n;
        vstack.length = vstack.length - n;
        lstack.length = lstack.length - n;
    }

_token_stack:
    var lex = function () {
        var token;
        token = lexer.lex() || EOF;
        // if token isn't its numeric value, convert
        if (typeof token !== 'number') {
            token = self.symbols_[token] || token;
        }
        return token;
    }

    var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;
    while (true) {
        // retreive state number from top of stack
        state = stack[stack.length - 1];

        // use default actions if available
        if (this.defaultActions[state]) {
            action = this.defaultActions[state];
        } else {
            if (symbol === null || typeof symbol == 'undefined') {
                symbol = lex();
            }
            // read action for current state and first input
            action = table[state] && table[state][symbol];
        }

_handle_error:
        // handle parse error
        if (typeof action === 'undefined' || !action.length || !action[0]) {
            var error_rule_depth;
            var errStr = '';

            // Return the rule stack depth where the nearest error rule can be found.
            // Return FALSE when no error recovery rule was found.
            function locateNearestErrorRecoveryRule(state) {
                var stack_probe = stack.length - 1;
                var depth = 0;

                // try to recover from error
                for(;;) {
                    // check for error recovery rule in this state
                    if ((TERROR.toString()) in table[state]) {
                        return depth;
                    }
                    if (state === 0 || stack_probe < 2) {
                        return false; // No suitable error recovery rule available.
                    }
                    stack_probe -= 2; // popStack(1): [symbol, action]
                    state = stack[stack_probe];
                    ++depth;
                }
            }

            if (!recovering) {
                // first see if there's any chance at hitting an error recovery rule:
                error_rule_depth = locateNearestErrorRecoveryRule(state);

                // Report error
                expected = [];
                for (p in table[state]) {
                    if (this.terminals_[p] && p > TERROR) {
                        expected.push("'"+this.terminals_[p]+"'");
                    }
                }
                if (lexer.showPosition) {
                    errStr = 'Parse error on line '+(yylineno+1)+":\n"+lexer.showPosition()+"\nExpecting "+expected.join(', ') + ", got '" + (this.terminals_[symbol] || symbol)+ "'";
                } else {
                    errStr = 'Parse error on line '+(yylineno+1)+": Unexpected " +
                                  (symbol == EOF ? "end of input" :
                                              ("'"+(this.terminals_[symbol] || symbol)+"'"));
                }
                this.parseError(errStr, {
                    text: lexer.match,
                    token: this.terminals_[symbol] || symbol,
                    line: lexer.yylineno,
                    loc: yyloc,
                    expected: expected,
                    recoverable: (error_rule_depth !== false)
                });
            } else if (preErrorSymbol !== EOF) {
                error_rule_depth = locateNearestErrorRecoveryRule(state);
            }

            // just recovered from another error
            if (recovering == 3) {
                if (symbol === EOF || preErrorSymbol === EOF) {
                    throw new Error(errStr || 'Parsing halted while starting to recover from another error.');
                }

                // discard current lookahead and grab another
                yyleng = lexer.yyleng;
                yytext = lexer.yytext;
                yylineno = lexer.yylineno;
                yyloc = lexer.yylloc;
                symbol = lex();
            }

            // try to recover from error
            if (error_rule_depth === false) {
                throw new Error(errStr || 'Parsing halted. No suitable error recovery rule available.');
            }
            popStack(error_rule_depth);

            preErrorSymbol = (symbol == TERROR ? null : symbol); // save the lookahead token
            symbol = TERROR;         // insert generic error symbol as new lookahead
            state = stack[stack.length-1];
            action = table[state] && table[state][TERROR];
            recovering = 3; // allow 3 real symbols to be shifted before reporting a new error
        }

        // this shouldn't happen, unless resolve defaults are off
        if (action[0] instanceof Array && action.length > 1) {
            throw new Error('Parse Error: multiple actions possible at state: '+state+', token: '+symbol);
        }

        switch (action[0]) {
            case 1: // shift
                //this.shiftCount++;

                stack.push(symbol);
                vstack.push(lexer.yytext);
                lstack.push(lexer.yylloc);
                stack.push(action[1]); // push state
                symbol = null;
                if (!preErrorSymbol) { // normal execution/no error
                    yyleng = lexer.yyleng;
                    yytext = lexer.yytext;
                    yylineno = lexer.yylineno;
                    yyloc = lexer.yylloc;
                    if (recovering > 0) {
                        recovering--;
                    }
                } else {
                    // error just occurred, resume old lookahead f/ before error
                    symbol = preErrorSymbol;
                    preErrorSymbol = null;
                }
                break;

            case 2:
                // reduce
                //this.reductionCount++;

                len = this.productions_[action[1]][1];

                // perform semantic action
                yyval.$ = vstack[vstack.length-len]; // default to $$ = $1
                // default location, uses first token for firsts, last for lasts
                yyval._$ = {
                    first_line: lstack[lstack.length-(len||1)].first_line,
                    last_line: lstack[lstack.length-1].last_line,
                    first_column: lstack[lstack.length-(len||1)].first_column,
                    last_column: lstack[lstack.length-1].last_column
                };
                if (ranges) {
                  yyval._$.range = [lstack[lstack.length-(len||1)].range[0], lstack[lstack.length-1].range[1]];
                }
                r = this.performAction.apply(yyval, [yytext, yyleng, yylineno, sharedState.yy, action[1], vstack, lstack].concat(args));

                if (typeof r !== 'undefined') {
                    return r;
                }

                // pop off stack
                if (len) {
                    stack = stack.slice(0,-1*len*2);
                    vstack = vstack.slice(0, -1*len);
                    lstack = lstack.slice(0, -1*len);
                }

                stack.push(this.productions_[action[1]][0]);    // push nonterminal (reduce)
                vstack.push(yyval.$);
                lstack.push(yyval._$);
                // goto new state = table[STATE][NONTERMINAL]
                newState = table[stack[stack.length-2]][stack[stack.length-1]];
                stack.push(newState);
                break;

            case 3:
                // accept
                return true;
        }

    }

    return true;
}};

    //const {ErrorCom} = require(['../ts/ErrorCom']);
    /*---CLASES IMPORTADAS---*/
    const {Tipo} = require("../dist/AST/Tipo");
    const {Print} = require("../dist/Instrucciones/Print");
    const {Declaracion} = require("../dist/Instrucciones/Declaracion");
    const {DeclaracionArray} = require("../dist/Instrucciones/DeclaracionArray");
    const {Asignacion} = require("../dist/Instrucciones/Asignacion");
    const {While} = require("../dist/Instrucciones/While");
    const {If} = require("../dist/Instrucciones/If");
    const {DoWhile} = require("../dist/Instrucciones/DoWhile");
    const {Funcion} = require("../dist/Instrucciones/Funcion");
    const {Struct} = require("../dist/Instrucciones/Struct");
    const {Switch} = require("../dist/Instrucciones/Switch");
    const {GraficarTS} = require("../dist/Instrucciones/GraficarTS");
    const {Ternario} = require("../dist/Expresiones/Ternario");
    const {AccesoAtributo} = require("../dist/Expresiones/AccesoAtributo");
    const {DeclaracionStruct} = require("../dist/Instrucciones/DeclaracionStruct");
    const {SwitchCaso} = require("../dist/Instrucciones/SwitchCaso");
    const {Break} = require("../dist/Instrucciones/Break");
    const {Return} = require("../dist/Instrucciones/Return");
    const {Continue} = require("../dist/Instrucciones/Continue");
    const {FuncionReturn} = require("../dist/Instrucciones/FuncionReturn");
    const {Parametro} = require("../dist/Instrucciones/Parametro");
    const {ParametroReturn} = require("../dist/Expresiones/ParametroReturn");
    const {For} = require("../dist/Instrucciones/For");
    const {Forin} = require("../dist/Instrucciones/Forin");
    const {Primitivo} = require("../dist/Expresiones/Primitivo");
    const {AccesoVariable} = require("../dist/Expresiones/AccesoVariable");
    const {ArrbegEnd} = require("../dist/Expresiones/ArrbegEnd");
    const {Operacion, Operador} = require("../dist/Expresiones/Operacion");
    const {Objeto} = require("../dist/Expresiones/Objeto");
    const {Atributo} = require("../dist/Expresiones/Atributo");
    const {AccesoArray} = require("../dist/Expresiones/AccesoArray");
    const {AccesoAtribArray} = require("../dist/Expresiones/AccesoAtribArray");
    const {AsignacionArray} = require("../dist/Instrucciones/AsignacionArray");
    const {IncrDecr} = require("../dist/Instrucciones/IncrDecr");
    const {Push} = require("../dist/Instrucciones/Push");
    const {Pop} = require("../dist/Instrucciones/Pop");
    const {OperacionCadena, OperadorCadena} = require("../dist/Expresiones/OperacionCadena");
    const {OperadorNativa, OperacionNativa} = require("../dist/Expresiones/OperacionNativa");
    const {ConcatenacionString} = require("../dist/Expresiones/ConcatenacionString");
    const {ErrorG} = require("../dist/Objetos/ErrorG");

    /*---CODIGO INCRUSTADO---*/
    var errores = [];
    var elementos = [];

    function genError(desc,linea,columna){
        let erro =  new ErrorG('sintactico',desc,linea,columna);
        errores.push(erro);
    }
    function genErrorLex(desc,linea,columna){
        let erro =  new ErrorG('lexico',desc,linea,columna);
        errores.push(erro);
    }

    function reiniciarArrays(instrucciones){
        var elemento = {'id':'instrucciones','cont':instrucciones};
        var elemento1 = {'id':'listaErrores','cont':errores};
        elementos.push(elemento);
        elementos.push(elemento1);
        var aux = elementos;
        elementos = [];
        errores = [];
        return aux;
    }
/* generated by jison-lex 0.3.4 */
var lexer = (function(){
var lexer = ({

EOF:1,

parseError:function parseError(str, hash) {
        if (this.yy.parser) {
            this.yy.parser.parseError(str, hash);
        } else {
            throw new Error(str);
        }
    },

// resets the lexer, sets new input
setInput:function (input, yy) {
        this.yy = yy || this.yy || {};
        this._input = input;
        this._more = this._backtrack = this.done = false;
        this.yylineno = this.yyleng = 0;
        this.yytext = this.matched = this.match = '';
        this.conditionStack = ['INITIAL'];
        this.yylloc = {
            first_line: 1,
            first_column: 0,
            last_line: 1,
            last_column: 0
        };
        if (this.options.ranges) {
            this.yylloc.range = [0,0];
        }
        this.offset = 0;
        return this;
    },

// consumes and returns one char from the input
input:function () {
        var ch = this._input[0];
        this.yytext += ch;
        this.yyleng++;
        this.offset++;
        this.match += ch;
        this.matched += ch;
        var lines = ch.match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno++;
            this.yylloc.last_line++;
        } else {
            this.yylloc.last_column++;
        }
        if (this.options.ranges) {
            this.yylloc.range[1]++;
        }

        this._input = this._input.slice(1);
        return ch;
    },

// unshifts one char (or a string) into the input
unput:function (ch) {
        var len = ch.length;
        var lines = ch.split(/(?:\r\n?|\n)/g);

        this._input = ch + this._input;
        this.yytext = this.yytext.substr(0, this.yytext.length - len);
        //this.yyleng -= len;
        this.offset -= len;
        var oldLines = this.match.split(/(?:\r\n?|\n)/g);
        this.match = this.match.substr(0, this.match.length - 1);
        this.matched = this.matched.substr(0, this.matched.length - 1);

        if (lines.length - 1) {
            this.yylineno -= lines.length - 1;
        }
        var r = this.yylloc.range;

        this.yylloc = {
            first_line: this.yylloc.first_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.first_column,
            last_column: lines ?
                (lines.length === oldLines.length ? this.yylloc.first_column : 0)
                 + oldLines[oldLines.length - lines.length].length - lines[0].length :
              this.yylloc.first_column - len
        };

        if (this.options.ranges) {
            this.yylloc.range = [r[0], r[0] + this.yyleng - len];
        }
        this.yyleng = this.yytext.length;
        return this;
    },

// When called from action, caches matched text and appends it on next action
more:function () {
        this._more = true;
        return this;
    },

// When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.
reject:function () {
        if (this.options.backtrack_lexer) {
            this._backtrack = true;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });

        }
        return this;
    },

// retain first n characters of the match
less:function (n) {
        this.unput(this.match.slice(n));
    },

// displays already matched input, i.e. for error messages
pastInput:function () {
        var past = this.matched.substr(0, this.matched.length - this.match.length);
        return (past.length > 20 ? '...':'') + past.substr(-20).replace(/\n/g, "");
    },

// displays upcoming input, i.e. for error messages
upcomingInput:function () {
        var next = this.match;
        if (next.length < 20) {
            next += this._input.substr(0, 20-next.length);
        }
        return (next.substr(0,20) + (next.length > 20 ? '...' : '')).replace(/\n/g, "");
    },

// displays the character position where the lexing error occurred, i.e. for error messages
showPosition:function () {
        var pre = this.pastInput();
        var c = new Array(pre.length + 1).join("-");
        return pre + this.upcomingInput() + "\n" + c + "^";
    },

// test the lexed token: return FALSE when not a match, otherwise return token
test_match:function(match, indexed_rule) {
        var token,
            lines,
            backup;

        if (this.options.backtrack_lexer) {
            // save context
            backup = {
                yylineno: this.yylineno,
                yylloc: {
                    first_line: this.yylloc.first_line,
                    last_line: this.last_line,
                    first_column: this.yylloc.first_column,
                    last_column: this.yylloc.last_column
                },
                yytext: this.yytext,
                match: this.match,
                matches: this.matches,
                matched: this.matched,
                yyleng: this.yyleng,
                offset: this.offset,
                _more: this._more,
                _input: this._input,
                yy: this.yy,
                conditionStack: this.conditionStack.slice(0),
                done: this.done
            };
            if (this.options.ranges) {
                backup.yylloc.range = this.yylloc.range.slice(0);
            }
        }

        lines = match[0].match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno += lines.length;
        }
        this.yylloc = {
            first_line: this.yylloc.last_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.last_column,
            last_column: lines ?
                         lines[lines.length - 1].length - lines[lines.length - 1].match(/\r?\n?/)[0].length :
                         this.yylloc.last_column + match[0].length
        };
        this.yytext += match[0];
        this.match += match[0];
        this.matches = match;
        this.yyleng = this.yytext.length;
        if (this.options.ranges) {
            this.yylloc.range = [this.offset, this.offset += this.yyleng];
        }
        this._more = false;
        this._backtrack = false;
        this._input = this._input.slice(match[0].length);
        this.matched += match[0];
        token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);
        if (this.done && this._input) {
            this.done = false;
        }
        if (token) {
            return token;
        } else if (this._backtrack) {
            // recover context
            for (var k in backup) {
                this[k] = backup[k];
            }
            return false; // rule action called reject() implying the next rule should be tested instead.
        }
        return false;
    },

// return next match in input
next:function () {
        if (this.done) {
            return this.EOF;
        }
        if (!this._input) {
            this.done = true;
        }

        var token,
            match,
            tempMatch,
            index;
        if (!this._more) {
            this.yytext = '';
            this.match = '';
        }
        var rules = this._currentRules();
        for (var i = 0; i < rules.length; i++) {
            tempMatch = this._input.match(this.rules[rules[i]]);
            if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
                match = tempMatch;
                index = i;
                if (this.options.backtrack_lexer) {
                    token = this.test_match(tempMatch, rules[i]);
                    if (token !== false) {
                        return token;
                    } else if (this._backtrack) {
                        match = false;
                        continue; // rule action called reject() implying a rule MISmatch.
                    } else {
                        // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
                        return false;
                    }
                } else if (!this.options.flex) {
                    break;
                }
            }
        }
        if (match) {
            token = this.test_match(match, rules[index]);
            if (token !== false) {
                return token;
            }
            // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
            return false;
        }
        if (this._input === "") {
            return this.EOF;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });
        }
    },

// return next match that has a token
lex:function lex () {
        var r = this.next();
        if (r) {
            return r;
        } else {
            return this.lex();
        }
    },

// activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)
begin:function begin (condition) {
        this.conditionStack.push(condition);
    },

// pop the previously active lexer condition state off the condition stack
popState:function popState () {
        var n = this.conditionStack.length - 1;
        if (n > 0) {
            return this.conditionStack.pop();
        } else {
            return this.conditionStack[0];
        }
    },

// produce the lexer rule set which is active for the currently active lexer condition state
_currentRules:function _currentRules () {
        if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {
            return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;
        } else {
            return this.conditions["INITIAL"].rules;
        }
    },

// return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available
topState:function topState (n) {
        n = this.conditionStack.length - 1 - Math.abs(n || 0);
        if (n >= 0) {
            return this.conditionStack[n];
        } else {
            return "INITIAL";
        }
    },

// alias for begin(condition)
pushState:function pushState (condition) {
        this.begin(condition);
    },

// return the number of states currently on the stack
stateStackSize:function stateStackSize() {
        return this.conditionStack.length;
    },
options: {"ranges":true},
performAction: function anonymous(yy,yy_,$avoiding_name_collisions,YY_START) {
var YYSTATE=YY_START;
switch($avoiding_name_collisions) {
case 0:/* skip comments */
break;
case 1:this.begin('comment');
break;
case 2:this.popState();
break;
case 3:/* skip comment content*/
break;
case 4:/* skip whitespace */
break;
case 5:return 13; 
break;
case 6:return 14;
break;
case 7:return 22;
break;
case 8:return 23;
break;
case 9:return 27;
break;
case 10:return 28;
break;
case 11:return 18;
break;
case 12:return 61;
break;
case 13:return 15;
break;
case 14:return "PRINTLN";
break;
case 15:return "PRINT";
break;
case 16:return 20;
break;
case 17:return 21;
break;
case 18:return 74;
break;
case 19:return 79;
break;
case 20:return 77;
break;
case 21:return 84;
break;
case 22:return 85;
break;
case 23:return 80;
break;
case 24:return 47;
break;
case 25:return 48;
break;
case 26:return 55;
break;
case 27:return 60;
break;
case 28:return 63;
break;
case 29:return 140;
break;
case 30:return 139;
break;
case 31:return 49;
break;
case 32:return 93;
break;
case 33:return 92;
break;
case 34:return 91;
break;
case 35:return 94;
break;
case 36:return 90;
break;
case 37:return 10;
break;
case 38:return 88;
break;
case 39:return 89;
break;
case 40:return 'STR_FUNCTION';
break;
case 41:return 82;
break;
case 42:return 129;
break;
case 43:return 130;
break;
case 44:return 131;
break;
case 45:return 132;
break;
case 46:return 133;
break;
case 47:return 134;
break;
case 48:return 135;
break;
case 49:return 136;
break;
case 50:return 137;
break;
case 51:return 138;
break;
case 52:return 51;
break;
case 53:return 52;
break;
case 54:return 46;
break;
case 55:return 110;
break;
case 56:return 111;
break;
case 57:return 107;
break;
case 58:return 108;
break;
case 59:return 109;
break;
case 60:return 118;
break;
case 61:return 119;
break;
case 62:return 115;
break;
case 63:return 117;
break;
case 64:return 120;
break;
case 65:return 116;
break;
case 66:return 114;
break;
case 67:return 113;
break;
case 68:return 125;
break;
case 69:return 128;
break;
case 70:return 96;
break;
case 71:return 'OP_MASIG';
break;
case 72:return 'OP_RESIG';
break;
case 73:return 'OP_PORIG';
break;
case 74:return 'OP_DIVIG';
break;
case 75:return 'OP_MODIG';
break;
case 76:return 53;
break;
case 77:return 123;
break;
case 78:return 54;
break;
case 79:return 124;
break;
case 80:return 121;
break;
case 81:return 122;
break;
case 82:return 127;
break;
case 83:return 50;
break;
case 84:return 126;
break;
case 85:return 112;
break;
case 86:return 'OP_HASH';
break;
case 87:return 145;
break;
case 88:return 11;
break;
case 89:return 11;
break;
case 90:return 142;
break;
case 91:return 141;
break;
case 92:yy_.yytext = yy_.yytext.slice(1,-1); return 143;
break;
case 93:yy_.yytext = yy_.yytext.slice(1,-1); return 143;
break;
case 94:return 144;
break;
case 95:return 144;
break;
case 96:return 4;
break;
case 97:genErrorLex('Simbolo no reconocido'+ yy_.yytext,yy_.yylloc.first_line,yy_.yylloc.first_column);
break;
}
},
rules: [/^(?:\/\/.*)/,/^(?:\/\*)/,/^(?:\*\/)/,/^(?:.)/,/^(?:\s+)/,/^(?:\{)/,/^(?:\})/,/^(?:\()/,/^(?:\))/,/^(?:\[)/,/^(?:\])/,/^(?:,)/,/^(?::)/,/^(?:;)/,/^(?:println\b)/,/^(?:print\b)/,/^(?:void\b)/,/^(?:main\b)/,/^(?:if\b)/,/^(?:elseif\b)/,/^(?:else\b)/,/^(?:while\b)/,/^(?:do\b)/,/^(?:for\b)/,/^(?:break\b)/,/^(?:continue\b)/,/^(?:switch\b)/,/^(?:case\b)/,/^(?:default\b)/,/^(?:true\b)/,/^(?:false\b)/,/^(?:return\b)/,/^(?:boolean\b)/,/^(?:int\b)/,/^(?:double\b)/,/^(?:char\b)/,/^(?:String\b)/,/^(?:struct\b)/,/^(?:begin\b)/,/^(?:end\b)/,/^(?:function\b)/,/^(?:in\b)/,/^(?:pow\b)/,/^(?:sqrt\b)/,/^(?:sin\b)/,/^(?:cos\b)/,/^(?:tan\b)/,/^(?:parse\b)/,/^(?:toInt\b)/,/^(?:toDouble\b)/,/^(?:string\b)/,/^(?:typeof\b)/,/^(?:push\b)/,/^(?:pop\b)/,/^(?:graficar_ts\b)/,/^(?:caracterOfPosition\b)/,/^(?:subString\b)/,/^(?:length\b)/,/^(?:toUppercase\b)/,/^(?:toLowercase\b)/,/^(?:<=)/,/^(?:<)/,/^(?:==)/,/^(?:>=)/,/^(?:>)/,/^(?:!=)/,/^(?:\|\|)/,/^(?:&&)/,/^(?:&)/,/^(?:!)/,/^(?:=)/,/^(?:\+=)/,/^(?:-=)/,/^(?:\*=)/,/^(?:\/=)/,/^(?:%=)/,/^(?:\+\+)/,/^(?:\+)/,/^(?:--)/,/^(?:-)/,/^(?:\*)/,/^(?:\/)/,/^(?:%)/,/^(?:\.)/,/^(?:\^)/,/^(?:\?)/,/^(?:#)/,/^(?:null\b)/,/^(?:[A-Z][a-zA-Z0-9_]*)/,/^(?:[a-zA-Z][a-zA-Z0-9_]*)/,/^(?:(((0|([1-9])([0-9])*))\.((0|([1-9])([0-9])*))?(([Ee][+-]?((0|([1-9])([0-9])*))))?[fFdD]?|\.((0|([1-9])([0-9])*))(([Ee][+-]?((0|([1-9])([0-9])*))))?[fFdD]?|((0|([1-9])([0-9])*))(([Ee][+-]?((0|([1-9])([0-9])*))))[fFdD]?|((0|([1-9])([0-9])*))(([Ee][+-]?((0|([1-9])([0-9])*))))?[fFdD])(?=([^\w]|$)))/,/^(?:((0|([1-9])([0-9])*)))/,/^(?:"")/,/^(?:"([^"]|(\\.))*")/,/^(?:\\'([^']|(\\.))*\\')/,/^(?:\\'\\')/,/^(?:$)/,/^(?:.)/],
conditions: {"comment":{"rules":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97],"inclusive":true},"INITIAL":{"rules":[0,1,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97],"inclusive":true}}
});
return lexer;
})();
parser.lexer = lexer;
function Parser () {
  this.yy = {};
}
Parser.prototype = parser;parser.Parser = Parser;
return new Parser;
})();


if (typeof require !== 'undefined' && typeof exports !== 'undefined') {
exports.parser = Gramatica;
exports.Parser = Gramatica.Parser;
exports.parse = function () { return Gramatica.parse.apply(Gramatica, arguments); };
exports.main = function commonjsMain (args) {
    if (!args[1]) {
        console.log('Usage: '+args[0]+' FILE');
        process.exit(1);
    }
    var source = require('fs').readFileSync(require('path').normalize(args[1]), "utf8");
    return exports.parser.parse(source);
};
if (typeof module !== 'undefined' && require.main === module) {
  exports.main(process.argv.slice(1));
}
}
/* parser generated by jison 0.4.18 */
/*
  Returns a Parser object of the following structure:

  Parser: {
    yy: {}
  }

  Parser.prototype: {
    yy: {},
    trace: function(),
    symbols_: {associative list: name ==> number},
    terminals_: {associative list: number ==> name},
    productions_: [...],
    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),
    table: [...],
    defaultActions: {...},
    parseError: function(str, hash),
    parse: function(input),

    lexer: {
        EOF: 1,
        parseError: function(str, hash),
        setInput: function(input),
        input: function(),
        unput: function(str),
        more: function(),
        less: function(n),
        pastInput: function(),
        upcomingInput: function(),
        showPosition: function(),
        test_match: function(regex_match_array, rule_index),
        next: function(),
        lex: function(),
        begin: function(condition),
        popState: function(),
        _currentRules: function(),
        topState: function(),
        pushState: function(condition),

        options: {
            ranges: boolean           (optional: true ==> token location info will include a .range[] member)
            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)
            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)
        },

        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),
        rules: [...],
        conditions: {associative list: name ==> set},
    }
  }


  token location info (@$, _$, etc.): {
    first_line: n,
    last_line: n,
    first_column: n,
    last_column: n,
    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)
  }


  the parseError function receives a 'hash' object with these members for lexer and parser errors: {
    text:        (matched text)
    token:       (the produced terminal token, if any)
    line:        (yylineno)
  }
  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {
    loc:         (yylloc)
    expected:    (string describing the set of expected tokens)
    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)
  }
*/
var Gramatica = (function(){
var o=function(k,v,o,l){for(o=o||{},l=k.length;l--;o[k[l]]=v);return o},$V0=[1,9],$V1=[1,13],$V2=[1,19],$V3=[1,12],$V4=[1,14],$V5=[1,15],$V6=[1,16],$V7=[1,17],$V8=[1,18],$V9=[2,4,11,12,21,68,69,70,71,72],$Va=[1,25],$Vb=[16,73],$Vc=[2,80],$Vd=[1,28],$Ve=[1,45],$Vf=[1,46],$Vg=[1,47],$Vh=[1,40],$Vi=[1,41],$Vj=[1,42],$Vk=[1,43],$Vl=[1,44],$Vm=[2,4,11,12,15,21,35,41,45,46,47,50,51,52,57,62,68,69,70,71,72],$Vn=[2,21],$Vo=[1,71],$Vp=[1,56],$Vq=[1,57],$Vr=[1,65],$Vs=[1,66],$Vt=[1,67],$Vu=[1,68],$Vv=[1,69],$Vw=[1,70],$Vx=[1,58],$Vy=[1,59],$Vz=[1,60],$VA=[1,61],$VB=[1,62],$VC=[1,63],$VD=[1,64],$VE=[1,72],$VF=[1,73],$VG=[16,19,24,42,65,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97],$VH=[1,81],$VI=[16,19,24,42,65,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95],$VJ=[1,103],$VK=[16,19,24,42,65,81,82,83,84,85,86,87,88,89,90,91,92,93,95],$VL=[16,19,24,42,65,81,82,83,84,85,86,87,88,91,92,93],$VM=[16,19,24,42,65,81,82,83,84,85,86,87,88],$VN=[1,129],$VO=[1,128],$VP=[1,123],$VQ=[1,124],$VR=[1,125],$VS=[1,126],$VT=[1,127],$VU=[15,19],$VV=[2,4,11,12,15,21,35,41,45,46,47,50,51,52,55,56,57,62,68,69,70,71,72],$VW=[2,12,15,35,41,45,46,47,50,51,52,57,62,68,69,70,71,72],$VX=[2,60],$VY=[1,179],$VZ=[1,180],$V_=[1,189],$V$=[15,41,45],$V01=[2,47],$V11=[1,220],$V21=[1,221];
var parser = {trace: function trace () { },
yy: {},
symbols_: {"error":2,"ini":3,"EOF":4,"instrucciones":5,"instruccion":6,"declaracion_bloque":7,"asignacion_bloque":8,"asignacion_funcion":9,"struct_declaracion":10,"STR_STRUCT":11,"ID_VAR":12,"cuerpo_struct":13,"BRACKI":14,"BRACKD":15,"PUNTCOMA":16,"contenido_struct":17,"declaracion_struct":18,"COMA":19,"tiposVar":20,"VOID":21,"MAIN":22,"PARI":23,"PARD":24,"cuerpoFuncion":25,"parametros_funcion":26,"parametro_funcion":27,"instrucciones_funciones":28,"instruccion_funcion":29,"print_bloque":30,"if_bloque":31,"for_bloque":32,"while_bloque":33,"switch_bloque":34,"STR_SWITCH":35,"expresion":36,"switch_cuerpo":37,"casos_switch":38,"opcional_default":39,"caso_switch":40,"STR_CASE":41,"DOSPUNT":42,"contenido_caso":43,"opcional_break":44,"STR_DEFAULT":45,"BREAK":46,"CONTINUE":47,"nombreVars":48,"asignacion":49,"PRINT":50,"PRINTLN":51,"STR_IF":52,"sinos_bloque":53,"instruccion_devuelta":54,"STR_ELSE":55,"STR_ELSEIF":56,"STR_FOR":57,"decl_asign":58,"STR_IN":59,"arr_decl":60,"arr_begin_end":61,"STR_WHILE":62,"CORCHI":63,"parametros_arreglo":64,"CORCHD":65,"STR_BEGIN":66,"STR_END":67,"STR_STRING":68,"STR_DOUBLE":69,"STR_INTEGER":70,"STR_BOOLEAN":71,"STR_CHAR":72,"OP_IGUAL":73,"primitivas":74,"logicas":75,"operadores":76,"relacionales":77,"expresion_ternario":78,"incr_decr":79,"OP_TER":80,"OP_AND":81,"OP_OR":82,"OP_DOBIG":83,"OP_DIF":84,"OP_MAYIG":85,"OP_MENIG":86,"OP_MEN":87,"OP_MAY":88,"OP_MULT":89,"OP_DIVI":90,"OP_SUMA":91,"OP_RESTA":92,"OP_AMP":93,"OP_ELV":94,"OP_MOD":95,"OP_INCR":96,"OP_DECR":97,"STR_FALSE":98,"STR_TRUE":99,"ENTERO":100,"FLOTANTE":101,"STRINGL":102,"$accept":0,"$end":1},
terminals_: {2:"error",4:"EOF",11:"STR_STRUCT",12:"ID_VAR",14:"BRACKI",15:"BRACKD",16:"PUNTCOMA",19:"COMA",21:"VOID",22:"MAIN",23:"PARI",24:"PARD",35:"STR_SWITCH",41:"STR_CASE",42:"DOSPUNT",45:"STR_DEFAULT",46:"BREAK",47:"CONTINUE",50:"PRINT",51:"PRINTLN",52:"STR_IF",55:"STR_ELSE",56:"STR_ELSEIF",57:"STR_FOR",59:"STR_IN",62:"STR_WHILE",63:"CORCHI",65:"CORCHD",66:"STR_BEGIN",67:"STR_END",68:"STR_STRING",69:"STR_DOUBLE",70:"STR_INTEGER",71:"STR_BOOLEAN",72:"STR_CHAR",73:"OP_IGUAL",80:"OP_TER",81:"OP_AND",82:"OP_OR",83:"OP_DOBIG",84:"OP_DIF",85:"OP_MAYIG",86:"OP_MENIG",87:"OP_MEN",88:"OP_MAY",89:"OP_MULT",90:"OP_DIVI",91:"OP_SUMA",92:"OP_RESTA",93:"OP_AMP",94:"OP_ELV",95:"OP_MOD",96:"OP_INCR",97:"OP_DECR",98:"STR_FALSE",99:"STR_TRUE",100:"ENTERO",101:"FLOTANTE",102:"STRINGL"},
productions_: [0,[3,1],[3,2],[5,2],[5,1],[6,1],[6,1],[6,1],[6,1],[6,1],[10,3],[13,3],[13,4],[17,1],[17,3],[18,2],[18,2],[9,5],[9,6],[26,3],[26,1],[26,0],[27,2],[25,3],[25,2],[28,2],[28,1],[29,1],[29,1],[29,1],[29,1],[29,1],[29,1],[29,1],[34,5],[34,1],[37,2],[37,4],[38,2],[38,1],[40,4],[43,2],[43,1],[39,3],[39,0],[44,2],[44,2],[44,0],[7,3],[7,4],[8,3],[30,5],[30,5],[31,6],[31,5],[54,1],[53,2],[53,2],[53,6],[53,5],[53,0],[32,9],[32,5],[32,5],[32,5],[33,5],[58,3],[58,2],[60,3],[64,1],[64,3],[61,6],[61,6],[61,6],[61,6],[20,1],[20,1],[20,1],[20,1],[20,1],[48,1],[48,3],[49,2],[36,1],[36,1],[36,1],[36,1],[36,1],[36,1],[78,5],[75,3],[75,3],[77,3],[77,3],[77,3],[77,3],[77,3],[77,3],[76,3],[76,3],[76,3],[76,3],[76,3],[76,3],[76,3],[76,3],[76,2],[79,2],[79,2],[74,1],[74,1],[74,1],[74,1],[74,1],[74,1]],
performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */) {
/* this == yyval */

var $0 = $$.length - 1;
switch (yystate) {
case 1:
console.log("EOF encontrado");return [];
break;
case 2:
this.$ = $$[$0-1];return this.$;
break;
case 3: case 38:
$$[$0-1].push($$[$0]); this.$ = $$[$0-1];
break;
case 4: case 13: case 20: case 39: case 80:
this.$ = [$$[$0]];
break;
case 5: case 6: case 7: case 8: case 27: case 28: case 29: case 30: case 31: case 32: case 33: case 82: case 83: case 84: case 85: case 86: case 87: case 88:
this.$ = $$[$0];
break;
case 10:
this.$ = new Struct($$[$0-1],$$[$0],_$[$0-2].first_line,_$[$0-2].first_column); 
break;
case 11:
this.$ = []; 
break;
case 12:
this.$ = $$[$0-2];
break;
case 14:
$$[$0].push($$[$0-2]); this.$= $$[$0]; 
break;
case 15: case 16:
this.$ = new Declaracion($$[$0],$$[$0-1],_$[$0-1].first_line,_$[$0-1].first_column);
break;
case 17:
this.$ = new Funcion("main","void",_$[$0-4].first_line,_$[$0-4].first_column,$$[$0]);
break;
case 18:
this.$ = new Funcion($$[$0-4],$$[$0-5],_$[$0-5].first_line,_$[$0-5].first_column,$$[$0],$$[$0-2]);
break;
case 19:
$$[$0].push($$[$0-2]);this.$ = $$[$0];
break;
case 21:
this.$ = [];
break;
case 22:
this.$ = new Parametro($$[$0],$$[$0-1],_$[$0-1].first_line,_$[$0-1].first_column);
break;
case 23: case 105:
this.$ = $$[$0-1];
break;
case 24: case 44: case 47:
this.$ = null;
break;
case 25:
        
        $$[$0-1].push($$[$0]);
        this.$ = $$[$0-1];
    
break;
case 26:
                
        this.$ = [$$[$0]];
    
break;
case 34:
this.$ = new Switch($$[$0-2],$$[$0],_$[$0-4].first_line,_$[$0-4].first_column);
break;
case 36:
this.$= [];
break;
case 37:

            if ($$[$0-1] != null){
                $$[$0-2].push($$[$0-1]);
            }
            this.$ = $$[$0-2];
        
break;
case 40:
this.$ = new SwitchCaso($$[$0-2],$$[$0],_$[$0-3].first_line,_$[$0-3].first_column);
break;
case 41:

            if ($$[$0] != null){
                $$[$0-1].push($$[$0]);
            }
            this.$ = $$[$0-1];
        
break;
case 42:

            if ($$[$0] == null){
                this.$ = [];
            }else{
                this.$ = [$$[$0]];
            }
        
break;
case 43:
this.$ = new SwitchCaso('DEFAULT',$$[$0],_$[$0-2].first_line,_$[$0-2].first_column);
break;
case 45:
this.$ = new Break(_$[$0-1].first_line,_$[$0-1].first_column);
break;
case 46:
this.$ = new Continue(_$[$0-1].first_line,_$[$0-1].first_column);
break;
case 48:
this.$ = new Declaracion($$[$0-1],$$[$0-2],_$[$0-2].first_line,_$[$0-2].first_column);
break;
case 49:
this.$ = new Declaracion($$[$0-2],$$[$0-3],_$[$0-3].first_line,_$[$0-3].first_column,$$[$0-1]);
break;
case 50:
this.$ = new Asignacion($$[$0-2],_$[$0-2].first_line,_$[$0-2].first_column,$$[$0-1]);
break;
case 51:
this.$ = new Print($$[$0-2],_$[$0-4].first_line,_$[$0-4].first_column,false);
break;
case 52:
this.$ = new Print($$[$0-2],_$[$0-4].first_line,_$[$0-4].first_column,true);
break;
case 55: case 69:
this.$ = [$$[$0]]
break;
case 61:
this.$ = new For(_$[$0-8].first_line,_$[$0-8].first_column,$$[$0],$$[$0-6],$$[$0-4],$$[$0-2]);
break;
case 62: case 63: case 64:
this.$ = new Forin(_$[$0-4].first_line,_$[$0-4].first_column,$$[$0],$$[$0-3],$$[$0-1]);
break;
case 65:
this.$ = new While(_$[$0-4].first_line,_$[$0-4].first_column,$$[$0],$$[$0-2]);
break;
case 66:
this.$ = new Declaracion($$[$0-1],$$[$0-2],_$[$0-2].first_line,_$[$0-2].first_column,$$[$0]);
break;
case 67:
this.$ = new Asignacion($$[$0-1],_$[$0-1].first_line,_$[$0-1].first_column,$$[$0]);
break;
case 68:
this.$ = $$[$0-1]
break;
case 70:
$$[$0-1].push($$[$0-2]);this.$ = $$[$0-1];
break;
case 71:
this.$ = new ArrbegEnd($$[$0-5],_$[$0-5].first_line,_$[$0-5].first_column,$$[$0-3],$$[$0-1]);
break;
case 72:
let beg = new Primitivo("begin", _$[$0-5].first_line, _$[$0-5].first_column); this.$ = new ArrbegEnd($$[$0-5],_$[$0-5].first_line,_$[$0-5].first_column,beg,$$[$0-1]);
break;
case 73:
let beg1 = new Primitivo("begin", _$[$0-5].first_line, _$[$0-5].first_column); let end1 = new Primitivo("end", _$[$0-5].first_line, _$[$0-5].first_column); this.$ = new ArrbegEnd($$[$0-5],_$[$0-5].first_line,_$[$0-5].first_column,beg1,end1);
break;
case 74:
let beg2 = new Primitivo("end", _$[$0-5].first_line, _$[$0-5].first_column); this.$ = new ArrbegEnd($$[$0-5],_$[$0-5].first_line,_$[$0-5].first_column,$$[$0-3],beg2);
break;
case 75:
this.$ = "STRING";
break;
case 76:
this.$ = "DOUBLE";
break;
case 77:
this.$ = "INTEGER";
break;
case 78:
this.$ = "BOOLEAN";
break;
case 79:
this.$ = "CHAR";
break;
case 81:
 $$[$0].push($$[$0-2]);this.$ = $$[$0];
break;
case 90:
this.$ = new Operacion($$[$0-2],$$[$0],Operador.AND, _$[$0-2].first_line, _$[$0-2].first_column);
break;
case 91:
this.$ = new Operacion($$[$0-2],$$[$0],Operador.OR, _$[$0-2].first_line, _$[$0-2].first_column);
break;
case 92:
this.$ = new Operacion($$[$0-2],$$[$0],Operador.IGUAL_IGUAL, _$[$0-2].first_line, _$[$0-2].first_column);
break;
case 93:
this.$ = new Operacion($$[$0-2],$$[$0],Operador.DIFERENTE_QUE, _$[$0-2].first_line, _$[$0-2].first_column);
break;
case 94:
this.$ = new Operacion($$[$0-2],$$[$0],Operador.MAYOR_IGUA_QUE, _$[$0-2].first_line, _$[$0-2].first_column);
break;
case 95:
this.$ = new Operacion($$[$0-2],$$[$0],Operador.MENOR_IGUA_QUE, _$[$0-2].first_line, _$[$0-2].first_column);
break;
case 96:
this.$ = new Operacion($$[$0-2],$$[$0],Operador.MENOR_QUE, _$[$0-2].first_line, _$[$0-2].first_column);
break;
case 97:
this.$ = new Operacion($$[$0-2],$$[$0],Operador.MAYOR_QUE, _$[$0-2].first_line, _$[$0-2].first_column);
break;
case 98:
this.$ = new Operacion($$[$0-2],$$[$0],Operador.MULTIPLICACION, _$[$0-2].first_line, _$[$0-2].first_column);
break;
case 99:
this.$ = new Operacion($$[$0-2],$$[$0],Operador.DIVISION, _$[$0-2].first_line, _$[$0-2].first_column);
break;
case 100:
this.$ = new Operacion($$[$0-2],$$[$0],Operador.SUMA, _$[$0-2].first_line, _$[$0-2].first_column);
break;
case 101:
this.$ = new Operacion($$[$0-2],$$[$0],Operador.RESTA, _$[$0-2].first_line, _$[$0-2].first_column);
break;
case 102:
this.$ = new Operacion($$[$0-2],$$[$0],Operador.AMPERSON, _$[$0-2].first_line, _$[$0-2].first_column);
break;
case 103:
this.$ = new Operacion($$[$0-2],$$[$0],Operador.ELEVADO, _$[$0-2].first_line, _$[$0-2].first_column);
break;
case 104:
this.$ = new Operacion($$[$0-2],$$[$0],Operador.MODULO, _$[$0-2].first_line, _$[$0-2].first_column);
break;
case 106:
this.$ = new Operacion($$[$0-1],$$[$01],Operador.MENOS_UNARIO, _$[$0-1].first_line, _$[$0-1].first_column);
break;
case 107:
this.$ = new Operacion($$[$0-1],null,Operador.INCREMENTO, _$[$0-1].first_line, _$[$0-1].first_column);
break;
case 108:
this.$ = new Operacion($$[$0-1],null,Operador.DECREMENTO, _$[$0-1].first_line, _$[$0-1].first_column);
break;
case 109:
this.$ = new Primitivo(false, _$[$0].first_line, _$[$0].first_column);
break;
case 110:
this.$ = new Primitivo(true, _$[$0].first_line, _$[$0].first_column);
break;
case 111: case 112:
this.$ = new Primitivo(Number($$[$0]), _$[$0].first_line, _$[$0].first_column);
break;
case 113: case 114:
this.$ = new Primitivo($$[$0], _$[$0].first_line, _$[$0].first_column);
break;
}
},
table: [{2:$V0,3:1,4:[1,2],5:3,6:4,7:5,8:6,9:7,10:8,11:$V1,12:$V2,20:10,21:$V3,48:11,68:$V4,69:$V5,70:$V6,71:$V7,72:$V8},{1:[3]},{1:[2,1]},{2:$V0,4:[1,20],6:21,7:5,8:6,9:7,10:8,11:$V1,12:$V2,20:10,21:$V3,48:11,68:$V4,69:$V5,70:$V6,71:$V7,72:$V8},o($V9,[2,4]),o($V9,[2,5]),o($V9,[2,6]),o($V9,[2,7]),o($V9,[2,8]),o($V9,[2,9]),{12:[1,23],48:22},{49:24,73:$Va},{22:[1,26]},{12:[1,27]},{12:[2,75]},{12:[2,76]},{12:[2,77]},{12:[2,78]},{12:[2,79]},o($Vb,$Vc,{19:$Vd}),{1:[2,2]},o($V9,[2,3]),{16:[1,29],49:30,73:$Va},o($Vb,$Vc,{19:$Vd,23:[1,31]}),{16:[1,32]},{12:$Ve,23:$Vf,36:33,74:34,75:35,76:36,77:37,78:38,79:39,92:$Vg,98:$Vh,99:$Vi,100:$Vj,101:$Vk,102:$Vl},{23:[1,48]},{13:49,14:[1,50]},{12:$V2,48:51},o($Vm,[2,48]),{16:[1,52]},{20:55,24:$Vn,26:53,27:54,68:$V4,69:$V5,70:$V6,71:$V7,72:$V8},o($Vm,[2,50]),{16:[2,82],80:$Vo,81:$Vp,82:$Vq,83:$Vr,84:$Vs,85:$Vt,86:$Vu,87:$Vv,88:$Vw,89:$Vx,90:$Vy,91:$Vz,92:$VA,93:$VB,94:$VC,95:$VD,96:$VE,97:$VF},o($VG,[2,83]),o($VG,[2,84]),o($VG,[2,85]),o($VG,[2,86]),o($VG,[2,87]),o($VG,[2,88]),o($VG,[2,109]),o($VG,[2,110]),o($VG,[2,111]),o($VG,[2,112]),o($VG,[2,113]),o($VG,[2,114]),{12:$Ve,23:$Vf,36:74,74:34,75:35,76:36,77:37,78:38,79:39,92:$Vg,98:$Vh,99:$Vi,100:$Vj,101:$Vk,102:$Vl},{12:$Ve,23:$Vf,36:75,74:34,75:35,76:36,77:37,78:38,79:39,92:$Vg,98:$Vh,99:$Vi,100:$Vj,101:$Vk,102:$Vl},{24:[1,76]},o($V9,[2,10]),{12:$VH,15:[1,77],17:78,18:79,20:80,68:$V4,69:$V5,70:$V6,71:$V7,72:$V8},o($Vb,[2,81]),o($Vm,[2,49]),{24:[1,82]},{19:[1,83],24:[2,20]},{12:[1,84]},{12:$Ve,23:$Vf,36:85,74:34,75:35,76:36,77:37,78:38,79:39,92:$Vg,98:$Vh,99:$Vi,100:$Vj,101:$Vk,102:$Vl},{12:$Ve,23:$Vf,36:86,74:34,75:35,76:36,77:37,78:38,79:39,92:$Vg,98:$Vh,99:$Vi,100:$Vj,101:$Vk,102:$Vl},{12:$Ve,23:$Vf,36:87,74:34,75:35,76:36,77:37,78:38,79:39,92:$Vg,98:$Vh,99:$Vi,100:$Vj,101:$Vk,102:$Vl},{12:$Ve,23:$Vf,36:88,74:34,75:35,76:36,77:37,78:38,79:39,92:$Vg,98:$Vh,99:$Vi,100:$Vj,101:$Vk,102:$Vl},{12:$Ve,23:$Vf,36:89,74:34,75:35,76:36,77:37,78:38,79:39,92:$Vg,98:$Vh,99:$Vi,100:$Vj,101:$Vk,102:$Vl},{12:$Ve,23:$Vf,36:90,74:34,75:35,76:36,77:37,78:38,79:39,92:$Vg,98:$Vh,99:$Vi,100:$Vj,101:$Vk,102:$Vl},{12:$Ve,23:$Vf,36:91,74:34,75:35,76:36,77:37,78:38,79:39,92:$Vg,98:$Vh,99:$Vi,100:$Vj,101:$Vk,102:$Vl},{12:$Ve,23:$Vf,36:92,74:34,75:35,76:36,77:37,78:38,79:39,92:$Vg,98:$Vh,99:$Vi,100:$Vj,101:$Vk,102:$Vl},{12:$Ve,23:$Vf,36:93,74:34,75:35,76:36,77:37,78:38,79:39,92:$Vg,98:$Vh,99:$Vi,100:$Vj,101:$Vk,102:$Vl},{12:$Ve,23:$Vf,36:94,74:34,75:35,76:36,77:37,78:38,79:39,92:$Vg,98:$Vh,99:$Vi,100:$Vj,101:$Vk,102:$Vl},{12:$Ve,23:$Vf,36:95,74:34,75:35,76:36,77:37,78:38,79:39,92:$Vg,98:$Vh,99:$Vi,100:$Vj,101:$Vk,102:$Vl},{12:$Ve,23:$Vf,36:96,74:34,75:35,76:36,77:37,78:38,79:39,92:$Vg,98:$Vh,99:$Vi,100:$Vj,101:$Vk,102:$Vl},{12:$Ve,23:$Vf,36:97,74:34,75:35,76:36,77:37,78:38,79:39,92:$Vg,98:$Vh,99:$Vi,100:$Vj,101:$Vk,102:$Vl},{12:$Ve,23:$Vf,36:98,74:34,75:35,76:36,77:37,78:38,79:39,92:$Vg,98:$Vh,99:$Vi,100:$Vj,101:$Vk,102:$Vl},{12:$Ve,23:$Vf,36:99,74:34,75:35,76:36,77:37,78:38,79:39,92:$Vg,98:$Vh,99:$Vi,100:$Vj,101:$Vk,102:$Vl},{12:$Ve,23:$Vf,36:100,74:34,75:35,76:36,77:37,78:38,79:39,92:$Vg,98:$Vh,99:$Vi,100:$Vj,101:$Vk,102:$Vl},o($VG,[2,107]),o($VG,[2,108]),{24:[1,101],80:$Vo,81:$Vp,82:$Vq,83:$Vr,84:$Vs,85:$Vt,86:$Vu,87:$Vv,88:$Vw,89:$Vx,90:$Vy,91:$Vz,92:$VA,93:$VB,94:$VC,95:$VD,96:$VE,97:$VF},o($VI,[2,106],{96:$VE,97:$VF}),{14:$VJ,25:102},{16:[1,104]},{15:[1,105]},{15:[2,13],19:[1,106]},{12:[1,107]},{12:[1,108]},{14:$VJ,25:109},{20:55,24:$Vn,26:110,27:54,68:$V4,69:$V5,70:$V6,71:$V7,72:$V8},o([19,24],[2,22]),o([16,19,24,42,65,81,82],[2,90],{80:$Vo,83:$Vr,84:$Vs,85:$Vt,86:$Vu,87:$Vv,88:$Vw,89:$Vx,90:$Vy,91:$Vz,92:$VA,93:$VB,94:$VC,95:$VD,96:$VE,97:$VF}),o([16,19,24,42,65,82],[2,91],{80:$Vo,81:$Vp,83:$Vr,84:$Vs,85:$Vt,86:$Vu,87:$Vv,88:$Vw,89:$Vx,90:$Vy,91:$Vz,92:$VA,93:$VB,94:$VC,95:$VD,96:$VE,97:$VF}),o($VK,[2,98],{80:$Vo,94:$VC,96:$VE,97:$VF}),o($VK,[2,99],{80:$Vo,94:$VC,96:$VE,97:$VF}),o($VL,[2,100],{80:$Vo,89:$Vx,90:$Vy,94:$VC,95:$VD,96:$VE,97:$VF}),o($VL,[2,101],{80:$Vo,89:$Vx,90:$Vy,94:$VC,95:$VD,96:$VE,97:$VF}),o($VL,[2,102],{80:$Vo,89:$Vx,90:$Vy,94:$VC,95:$VD,96:$VE,97:$VF}),o($VI,[2,103],{96:$VE,97:$VF}),o($VK,[2,104],{80:$Vo,94:$VC,96:$VE,97:$VF}),o($VM,[2,92],{80:$Vo,89:$Vx,90:$Vy,91:$Vz,92:$VA,93:$VB,94:$VC,95:$VD,96:$VE,97:$VF}),o($VM,[2,93],{80:$Vo,89:$Vx,90:$Vy,91:$Vz,92:$VA,93:$VB,94:$VC,95:$VD,96:$VE,97:$VF}),o($VM,[2,94],{80:$Vo,89:$Vx,90:$Vy,91:$Vz,92:$VA,93:$VB,94:$VC,95:$VD,96:$VE,97:$VF}),o($VM,[2,95],{80:$Vo,89:$Vx,90:$Vy,91:$Vz,92:$VA,93:$VB,94:$VC,95:$VD,96:$VE,97:$VF}),o($VM,[2,96],{80:$Vo,89:$Vx,90:$Vy,91:$Vz,92:$VA,93:$VB,94:$VC,95:$VD,96:$VE,97:$VF}),o($VM,[2,97],{80:$Vo,89:$Vx,90:$Vy,91:$Vz,92:$VA,93:$VB,94:$VC,95:$VD,96:$VE,97:$VF}),{42:[1,111],80:$Vo,81:$Vp,82:$Vq,83:$Vr,84:$Vs,85:$Vt,86:$Vu,87:$Vv,88:$Vw,89:$Vx,90:$Vy,91:$Vz,92:$VA,93:$VB,94:$VC,95:$VD,96:$VE,97:$VF},o($VG,[2,105]),o($V9,[2,17]),{2:$VN,7:115,8:116,12:$V2,15:[1,113],20:122,28:112,29:114,30:117,31:118,32:119,33:120,34:121,35:$VO,48:11,50:$VP,51:$VQ,52:$VR,57:$VS,62:$VT,68:$V4,69:$V5,70:$V6,71:$V7,72:$V8},o($V9,[2,11]),{16:[1,130]},{12:$VH,17:131,18:79,20:80,68:$V4,69:$V5,70:$V6,71:$V7,72:$V8},o($VU,[2,15]),o($VU,[2,16]),o($V9,[2,18]),{24:[2,19]},{12:$Ve,23:$Vf,36:132,74:34,75:35,76:36,77:37,78:38,79:39,92:$Vg,98:$Vh,99:$Vi,100:$Vj,101:$Vk,102:$Vl},{2:$VN,7:115,8:116,12:$V2,15:[1,133],20:122,29:134,30:117,31:118,32:119,33:120,34:121,35:$VO,48:11,50:$VP,51:$VQ,52:$VR,57:$VS,62:$VT,68:$V4,69:$V5,70:$V6,71:$V7,72:$V8},o($VV,[2,24]),o($VW,[2,26]),o($VW,[2,27]),o($VW,[2,28]),o($VW,[2,29]),o($VW,[2,30]),o($VW,[2,31]),o($VW,[2,32]),o($VW,[2,33]),{12:$V2,48:22},{23:[1,135]},{23:[1,136]},{23:[1,137]},{12:[1,139],23:[1,138]},{23:[1,140]},{23:[1,141]},o($VW,[2,35]),o($V9,[2,12]),{15:[2,14]},o($VI,[2,89],{96:$VE,97:$VF}),o($VV,[2,23]),o($VW,[2,25]),{12:$Ve,23:$Vf,36:142,74:34,75:35,76:36,77:37,78:38,79:39,92:$Vg,98:$Vh,99:$Vi,100:$Vj,101:$Vk,102:$Vl},{12:$Ve,23:$Vf,36:143,74:34,75:35,76:36,77:37,78:38,79:39,92:$Vg,98:$Vh,99:$Vi,100:$Vj,101:$Vk,102:$Vl},{12:$Ve,23:$Vf,36:144,74:34,75:35,76:36,77:37,78:38,79:39,92:$Vg,98:$Vh,99:$Vi,100:$Vj,101:$Vk,102:$Vl},{12:$V2,20:146,48:147,58:145,68:$V4,69:$V5,70:$V6,71:$V7,72:$V8},{59:[1,148]},{12:$Ve,23:$Vf,36:149,74:34,75:35,76:36,77:37,78:38,79:39,92:$Vg,98:$Vh,99:$Vi,100:$Vj,101:$Vk,102:$Vl},{12:$Ve,23:$Vf,36:150,74:34,75:35,76:36,77:37,78:38,79:39,92:$Vg,98:$Vh,99:$Vi,100:$Vj,101:$Vk,102:$Vl},{24:[1,151],80:$Vo,81:$Vp,82:$Vq,83:$Vr,84:$Vs,85:$Vt,86:$Vu,87:$Vv,88:$Vw,89:$Vx,90:$Vy,91:$Vz,92:$VA,93:$VB,94:$VC,95:$VD,96:$VE,97:$VF},{24:[1,152],80:$Vo,81:$Vp,82:$Vq,83:$Vr,84:$Vs,85:$Vt,86:$Vu,87:$Vv,88:$Vw,89:$Vx,90:$Vy,91:$Vz,92:$VA,93:$VB,94:$VC,95:$VD,96:$VE,97:$VF},{24:[1,153],80:$Vo,81:$Vp,82:$Vq,83:$Vr,84:$Vs,85:$Vt,86:$Vu,87:$Vv,88:$Vw,89:$Vx,90:$Vy,91:$Vz,92:$VA,93:$VB,94:$VC,95:$VD,96:$VE,97:$VF},{16:[1,154]},{12:$V2,48:155},{49:156,73:$Va},{12:[1,157],60:158,61:159,63:[1,160]},{24:[1,161],80:$Vo,81:$Vp,82:$Vq,83:$Vr,84:$Vs,85:$Vt,86:$Vu,87:$Vv,88:$Vw,89:$Vx,90:$Vy,91:$Vz,92:$VA,93:$VB,94:$VC,95:$VD,96:$VE,97:$VF},{24:[1,162],80:$Vo,81:$Vp,82:$Vq,83:$Vr,84:$Vs,85:$Vt,86:$Vu,87:$Vv,88:$Vw,89:$Vx,90:$Vy,91:$Vz,92:$VA,93:$VB,94:$VC,95:$VD,96:$VE,97:$VF},{16:[1,163]},{16:[1,164]},{2:$VN,7:115,8:116,12:$V2,14:$VJ,20:122,25:165,29:166,30:117,31:118,32:119,33:120,34:121,35:$VO,48:11,50:$VP,51:$VQ,52:$VR,57:$VS,62:$VT,68:$V4,69:$V5,70:$V6,71:$V7,72:$V8},{12:$Ve,23:$Vf,36:167,74:34,75:35,76:36,77:37,78:38,79:39,92:$Vg,98:$Vh,99:$Vi,100:$Vj,101:$Vk,102:$Vl},{49:168,73:$Va},{16:[2,67]},{14:$VJ,25:169,63:[1,170]},{14:$VJ,25:171},{14:$VJ,25:172},{12:$Ve,23:$Vf,36:174,64:173,74:34,75:35,76:36,77:37,78:38,79:39,92:$Vg,98:$Vh,99:$Vi,100:$Vj,101:$Vk,102:$Vl},{14:$VJ,25:175},{14:[1,177],37:176},o($VW,[2,51]),o($VW,[2,52]),o($VW,$VX,{53:178,55:$VY,56:$VZ}),o($VW,[2,54]),{16:[1,181],80:$Vo,81:$Vp,82:$Vq,83:$Vr,84:$Vs,85:$Vt,86:$Vu,87:$Vv,88:$Vw,89:$Vx,90:$Vy,91:$Vz,92:$VA,93:$VB,94:$VC,95:$VD,96:$VE,97:$VF},{16:[2,66]},o($VW,[2,62]),{12:$Ve,23:$Vf,36:182,66:[1,183],74:34,75:35,76:36,77:37,78:38,79:39,92:$Vg,98:$Vh,99:$Vi,100:$Vj,101:$Vk,102:$Vl},o($VW,[2,63]),o($VW,[2,64]),{65:[1,184]},{19:[1,185],65:[2,69],80:$Vo,81:$Vp,82:$Vq,83:$Vr,84:$Vs,85:$Vt,86:$Vu,87:$Vv,88:$Vw,89:$Vx,90:$Vy,91:$Vz,92:$VA,93:$VB,94:$VC,95:$VD,96:$VE,97:$VF},o($VW,[2,65]),o($VW,[2,34]),{15:[1,186],38:187,40:188,41:$V_},o($VW,[2,53]),{2:$VN,7:115,8:116,12:$V2,14:$VJ,20:122,25:190,29:192,30:117,31:118,32:119,33:120,34:121,35:$VO,48:11,50:$VP,51:$VQ,52:$VR,54:191,57:$VS,62:$VT,68:$V4,69:$V5,70:$V6,71:$V7,72:$V8},{23:[1,193]},{12:$Ve,23:$Vf,36:194,74:34,75:35,76:36,77:37,78:38,79:39,92:$Vg,98:$Vh,99:$Vi,100:$Vj,101:$Vk,102:$Vl},{42:[1,195],80:$Vo,81:$Vp,82:$Vq,83:$Vr,84:$Vs,85:$Vt,86:$Vu,87:$Vv,88:$Vw,89:$Vx,90:$Vy,91:$Vz,92:$VA,93:$VB,94:$VC,95:$VD,96:$VE,97:$VF},{42:[1,196]},{14:[2,68]},{12:$Ve,23:$Vf,36:174,64:197,74:34,75:35,76:36,77:37,78:38,79:39,92:$Vg,98:$Vh,99:$Vi,100:$Vj,101:$Vk,102:$Vl},o($VW,[2,36]),{15:[2,44],39:198,40:199,41:$V_,45:[1,200]},o($V$,[2,39]),{12:$Ve,23:$Vf,36:201,74:34,75:35,76:36,77:37,78:38,79:39,92:$Vg,98:$Vh,99:$Vi,100:$Vj,101:$Vk,102:$Vl},o($VW,[2,56]),o($VW,[2,57]),o($VW,[2,55]),{12:$Ve,23:$Vf,36:202,74:34,75:35,76:36,77:37,78:38,79:39,92:$Vg,98:$Vh,99:$Vi,100:$Vj,101:$Vk,102:$Vl},{24:[1,203],80:$Vo,81:$Vp,82:$Vq,83:$Vr,84:$Vs,85:$Vt,86:$Vu,87:$Vv,88:$Vw,89:$Vx,90:$Vy,91:$Vz,92:$VA,93:$VB,94:$VC,95:$VD,96:$VE,97:$VF},{12:$Ve,23:$Vf,36:204,67:[1,205],74:34,75:35,76:36,77:37,78:38,79:39,92:$Vg,98:$Vh,99:$Vi,100:$Vj,101:$Vk,102:$Vl},{12:$Ve,23:$Vf,36:206,67:[1,207],74:34,75:35,76:36,77:37,78:38,79:39,92:$Vg,98:$Vh,99:$Vi,100:$Vj,101:$Vk,102:$Vl},{65:[2,70]},{15:[1,208]},o($V$,[2,38]),{42:[1,209]},{42:[1,210],80:$Vo,81:$Vp,82:$Vq,83:$Vr,84:$Vs,85:$Vt,86:$Vu,87:$Vv,88:$Vw,89:$Vx,90:$Vy,91:$Vz,92:$VA,93:$VB,94:$VC,95:$VD,96:$VE,97:$VF},{24:[1,211],80:$Vo,81:$Vp,82:$Vq,83:$Vr,84:$Vs,85:$Vt,86:$Vu,87:$Vv,88:$Vw,89:$Vx,90:$Vy,91:$Vz,92:$VA,93:$VB,94:$VC,95:$VD,96:$VE,97:$VF},{14:$VJ,25:212},{65:[1,213],80:$Vo,81:$Vp,82:$Vq,83:$Vr,84:$Vs,85:$Vt,86:$Vu,87:$Vv,88:$Vw,89:$Vx,90:$Vy,91:$Vz,92:$VA,93:$VB,94:$VC,95:$VD,96:$VE,97:$VF},{65:[1,214]},{65:[1,215],80:$Vo,81:$Vp,82:$Vq,83:$Vr,84:$Vs,85:$Vt,86:$Vu,87:$Vv,88:$Vw,89:$Vx,90:$Vy,91:$Vz,92:$VA,93:$VB,94:$VC,95:$VD,96:$VE,97:$VF},{65:[1,216]},o($VW,[2,37]),{2:$VN,7:115,8:116,12:$V2,15:$V01,20:122,28:218,29:114,30:117,31:118,32:119,33:120,34:121,35:$VO,43:217,44:219,46:$V11,47:$V21,48:11,50:$VP,51:$VQ,52:$VR,57:$VS,62:$VT,68:$V4,69:$V5,70:$V6,71:$V7,72:$V8},o($V$,$V01,{48:11,29:114,7:115,8:116,30:117,31:118,32:119,33:120,34:121,20:122,28:218,44:219,43:222,2:$VN,12:$V2,35:$VO,46:$V11,47:$V21,50:$VP,51:$VQ,52:$VR,57:$VS,62:$VT,68:$V4,69:$V5,70:$V6,71:$V7,72:$V8}),{2:$VN,7:115,8:116,12:$V2,14:$VJ,20:122,25:223,29:192,30:117,31:118,32:119,33:120,34:121,35:$VO,48:11,50:$VP,51:$VQ,52:$VR,54:224,57:$VS,62:$VT,68:$V4,69:$V5,70:$V6,71:$V7,72:$V8},o($VW,[2,61]),{14:[2,71]},{14:[2,74]},{14:[2,72]},{14:[2,73]},{15:[2,43]},o($V$,$V01,{48:11,7:115,8:116,30:117,31:118,32:119,33:120,34:121,20:122,29:134,44:225,2:$VN,12:$V2,35:$VO,46:$V11,47:$V21,50:$VP,51:$VQ,52:$VR,57:$VS,62:$VT,68:$V4,69:$V5,70:$V6,71:$V7,72:$V8}),o($V$,[2,42]),{16:[1,226]},{16:[1,227]},o($V$,[2,40]),o($VW,$VX,{53:228,55:$VY,56:$VZ}),o($VW,[2,59]),o($V$,[2,41]),o($V$,[2,45]),o($V$,[2,46]),o($VW,[2,58])],
defaultActions: {2:[2,1],14:[2,75],15:[2,76],16:[2,77],17:[2,78],18:[2,79],20:[2,2],110:[2,19],131:[2,14],156:[2,67],168:[2,66],184:[2,68],197:[2,70],213:[2,71],214:[2,74],215:[2,72],216:[2,73],217:[2,43]},
parseError: function parseError (str, hash) {
    if (hash.recoverable) {
        this.trace(str);
    } else {
        var error = new Error(str);
        error.hash = hash;
        throw error;
    }
},
parse: function parse (input) {
    var self = this,
        stack = [0],
        tstack = [], // token stack
        vstack = [null], // semantic value stack
        lstack = [], // location stack
        table = this.table,
        yytext = '',
        yylineno = 0,
        yyleng = 0,
        recovering = 0,
        TERROR = 2,
        EOF = 1;

    var args = lstack.slice.call(arguments, 1);

    //this.reductionCount = this.shiftCount = 0;

    var lexer = Object.create(this.lexer);
    var sharedState = { yy: {} };
    // copy state
    for (var k in this.yy) {
      if (Object.prototype.hasOwnProperty.call(this.yy, k)) {
        sharedState.yy[k] = this.yy[k];
      }
    }

    lexer.setInput(input, sharedState.yy);
    sharedState.yy.lexer = lexer;
    sharedState.yy.parser = this;
    if (typeof lexer.yylloc == 'undefined') {
        lexer.yylloc = {};
    }
    var yyloc = lexer.yylloc;
    lstack.push(yyloc);

    var ranges = lexer.options && lexer.options.ranges;

    if (typeof sharedState.yy.parseError === 'function') {
        this.parseError = sharedState.yy.parseError;
    } else {
        this.parseError = Object.getPrototypeOf(this).parseError;
    }

    function popStack (n) {
        stack.length = stack.length - 2 * n;
        vstack.length = vstack.length - n;
        lstack.length = lstack.length - n;
    }

_token_stack:
    var lex = function () {
        var token;
        token = lexer.lex() || EOF;
        // if token isn't its numeric value, convert
        if (typeof token !== 'number') {
            token = self.symbols_[token] || token;
        }
        return token;
    }

    var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;
    while (true) {
        // retreive state number from top of stack
        state = stack[stack.length - 1];

        // use default actions if available
        if (this.defaultActions[state]) {
            action = this.defaultActions[state];
        } else {
            if (symbol === null || typeof symbol == 'undefined') {
                symbol = lex();
            }
            // read action for current state and first input
            action = table[state] && table[state][symbol];
        }

_handle_error:
        // handle parse error
        if (typeof action === 'undefined' || !action.length || !action[0]) {
            var error_rule_depth;
            var errStr = '';

            // Return the rule stack depth where the nearest error rule can be found.
            // Return FALSE when no error recovery rule was found.
            function locateNearestErrorRecoveryRule(state) {
                var stack_probe = stack.length - 1;
                var depth = 0;

                // try to recover from error
                for(;;) {
                    // check for error recovery rule in this state
                    if ((TERROR.toString()) in table[state]) {
                        return depth;
                    }
                    if (state === 0 || stack_probe < 2) {
                        return false; // No suitable error recovery rule available.
                    }
                    stack_probe -= 2; // popStack(1): [symbol, action]
                    state = stack[stack_probe];
                    ++depth;
                }
            }

            if (!recovering) {
                // first see if there's any chance at hitting an error recovery rule:
                error_rule_depth = locateNearestErrorRecoveryRule(state);

                // Report error
                expected = [];
                for (p in table[state]) {
                    if (this.terminals_[p] && p > TERROR) {
                        expected.push("'"+this.terminals_[p]+"'");
                    }
                }
                if (lexer.showPosition) {
                    errStr = 'Parse error on line '+(yylineno+1)+":\n"+lexer.showPosition()+"\nExpecting "+expected.join(', ') + ", got '" + (this.terminals_[symbol] || symbol)+ "'";
                } else {
                    errStr = 'Parse error on line '+(yylineno+1)+": Unexpected " +
                                  (symbol == EOF ? "end of input" :
                                              ("'"+(this.terminals_[symbol] || symbol)+"'"));
                }
                this.parseError(errStr, {
                    text: lexer.match,
                    token: this.terminals_[symbol] || symbol,
                    line: lexer.yylineno,
                    loc: yyloc,
                    expected: expected,
                    recoverable: (error_rule_depth !== false)
                });
            } else if (preErrorSymbol !== EOF) {
                error_rule_depth = locateNearestErrorRecoveryRule(state);
            }

            // just recovered from another error
            if (recovering == 3) {
                if (symbol === EOF || preErrorSymbol === EOF) {
                    throw new Error(errStr || 'Parsing halted while starting to recover from another error.');
                }

                // discard current lookahead and grab another
                yyleng = lexer.yyleng;
                yytext = lexer.yytext;
                yylineno = lexer.yylineno;
                yyloc = lexer.yylloc;
                symbol = lex();
            }

            // try to recover from error
            if (error_rule_depth === false) {
                throw new Error(errStr || 'Parsing halted. No suitable error recovery rule available.');
            }
            popStack(error_rule_depth);

            preErrorSymbol = (symbol == TERROR ? null : symbol); // save the lookahead token
            symbol = TERROR;         // insert generic error symbol as new lookahead
            state = stack[stack.length-1];
            action = table[state] && table[state][TERROR];
            recovering = 3; // allow 3 real symbols to be shifted before reporting a new error
        }

        // this shouldn't happen, unless resolve defaults are off
        if (action[0] instanceof Array && action.length > 1) {
            throw new Error('Parse Error: multiple actions possible at state: '+state+', token: '+symbol);
        }

        switch (action[0]) {
            case 1: // shift
                //this.shiftCount++;

                stack.push(symbol);
                vstack.push(lexer.yytext);
                lstack.push(lexer.yylloc);
                stack.push(action[1]); // push state
                symbol = null;
                if (!preErrorSymbol) { // normal execution/no error
                    yyleng = lexer.yyleng;
                    yytext = lexer.yytext;
                    yylineno = lexer.yylineno;
                    yyloc = lexer.yylloc;
                    if (recovering > 0) {
                        recovering--;
                    }
                } else {
                    // error just occurred, resume old lookahead f/ before error
                    symbol = preErrorSymbol;
                    preErrorSymbol = null;
                }
                break;

            case 2:
                // reduce
                //this.reductionCount++;

                len = this.productions_[action[1]][1];

                // perform semantic action
                yyval.$ = vstack[vstack.length-len]; // default to $$ = $1
                // default location, uses first token for firsts, last for lasts
                yyval._$ = {
                    first_line: lstack[lstack.length-(len||1)].first_line,
                    last_line: lstack[lstack.length-1].last_line,
                    first_column: lstack[lstack.length-(len||1)].first_column,
                    last_column: lstack[lstack.length-1].last_column
                };
                if (ranges) {
                  yyval._$.range = [lstack[lstack.length-(len||1)].range[0], lstack[lstack.length-1].range[1]];
                }
                r = this.performAction.apply(yyval, [yytext, yyleng, yylineno, sharedState.yy, action[1], vstack, lstack].concat(args));

                if (typeof r !== 'undefined') {
                    return r;
                }

                // pop off stack
                if (len) {
                    stack = stack.slice(0,-1*len*2);
                    vstack = vstack.slice(0, -1*len);
                    lstack = lstack.slice(0, -1*len);
                }

                stack.push(this.productions_[action[1]][0]);    // push nonterminal (reduce)
                vstack.push(yyval.$);
                lstack.push(yyval._$);
                // goto new state = table[STATE][NONTERMINAL]
                newState = table[stack[stack.length-2]][stack[stack.length-1]];
                stack.push(newState);
                break;

            case 3:
                // accept
                return true;
        }

    }

    return true;
}};

    //const {ErrorCom} = require(['../ts/ErrorCom']);
    /*---CLASES IMPORTADAS---*/
    const {Print} = require("../dist/Instrucciones/Print");
    const {Declaracion} = require("../dist/Instrucciones/Declaracion");    
    const {Asignacion} = require("../dist/Instrucciones/Asignacion");
    const {While} = require("../dist/Instrucciones/While");
    const {Funcion} = require("../dist/Instrucciones/Funcion");
    const {Struct} = require("../dist/Instrucciones/Struct");
    const {Switch} = require("../dist/Instrucciones/Switch");
    const {SwitchCaso} = require("../dist/Instrucciones/SwitchCaso");
    const {Break} = require("../dist/Instrucciones/Break");
    const {Continue} = require("../dist/Instrucciones/Continue");
    const {Parametro} = require("../dist/Instrucciones/Parametro");
    const {For} = require("../dist/Instrucciones/For");
    const {Forin} = require("../dist/Instrucciones/Forin");
    const {Primitivo} = require("../dist/Expresiones/Primitivo");
    const {ArrbegEnd} = require("../dist/Expresiones/ArrbegEnd");
    const {Operacion, Operador} = require("../dist/Expresiones/Operacion");
    const {Objeto} = require("../dist/Expresiones/Objeto");
    const {Atributo} = require("../dist/Expresiones/Atributo");

    /*---CODIGO INCRUSTADO---*/
    var errores = [
        "Se esperaba una instruccion como : "
    ];

    function genError(desc,linea,columna,val){
        //let errorCom = new ErrorCom("Sintactico",linea,columna,errores[desc],val);
        return errorCom;
    }
/* generated by jison-lex 0.3.4 */
var lexer = (function(){
var lexer = ({

EOF:1,

parseError:function parseError(str, hash) {
        if (this.yy.parser) {
            this.yy.parser.parseError(str, hash);
        } else {
            throw new Error(str);
        }
    },

// resets the lexer, sets new input
setInput:function (input, yy) {
        this.yy = yy || this.yy || {};
        this._input = input;
        this._more = this._backtrack = this.done = false;
        this.yylineno = this.yyleng = 0;
        this.yytext = this.matched = this.match = '';
        this.conditionStack = ['INITIAL'];
        this.yylloc = {
            first_line: 1,
            first_column: 0,
            last_line: 1,
            last_column: 0
        };
        if (this.options.ranges) {
            this.yylloc.range = [0,0];
        }
        this.offset = 0;
        return this;
    },

// consumes and returns one char from the input
input:function () {
        var ch = this._input[0];
        this.yytext += ch;
        this.yyleng++;
        this.offset++;
        this.match += ch;
        this.matched += ch;
        var lines = ch.match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno++;
            this.yylloc.last_line++;
        } else {
            this.yylloc.last_column++;
        }
        if (this.options.ranges) {
            this.yylloc.range[1]++;
        }

        this._input = this._input.slice(1);
        return ch;
    },

// unshifts one char (or a string) into the input
unput:function (ch) {
        var len = ch.length;
        var lines = ch.split(/(?:\r\n?|\n)/g);

        this._input = ch + this._input;
        this.yytext = this.yytext.substr(0, this.yytext.length - len);
        //this.yyleng -= len;
        this.offset -= len;
        var oldLines = this.match.split(/(?:\r\n?|\n)/g);
        this.match = this.match.substr(0, this.match.length - 1);
        this.matched = this.matched.substr(0, this.matched.length - 1);

        if (lines.length - 1) {
            this.yylineno -= lines.length - 1;
        }
        var r = this.yylloc.range;

        this.yylloc = {
            first_line: this.yylloc.first_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.first_column,
            last_column: lines ?
                (lines.length === oldLines.length ? this.yylloc.first_column : 0)
                 + oldLines[oldLines.length - lines.length].length - lines[0].length :
              this.yylloc.first_column - len
        };

        if (this.options.ranges) {
            this.yylloc.range = [r[0], r[0] + this.yyleng - len];
        }
        this.yyleng = this.yytext.length;
        return this;
    },

// When called from action, caches matched text and appends it on next action
more:function () {
        this._more = true;
        return this;
    },

// When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.
reject:function () {
        if (this.options.backtrack_lexer) {
            this._backtrack = true;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });

        }
        return this;
    },

// retain first n characters of the match
less:function (n) {
        this.unput(this.match.slice(n));
    },

// displays already matched input, i.e. for error messages
pastInput:function () {
        var past = this.matched.substr(0, this.matched.length - this.match.length);
        return (past.length > 20 ? '...':'') + past.substr(-20).replace(/\n/g, "");
    },

// displays upcoming input, i.e. for error messages
upcomingInput:function () {
        var next = this.match;
        if (next.length < 20) {
            next += this._input.substr(0, 20-next.length);
        }
        return (next.substr(0,20) + (next.length > 20 ? '...' : '')).replace(/\n/g, "");
    },

// displays the character position where the lexing error occurred, i.e. for error messages
showPosition:function () {
        var pre = this.pastInput();
        var c = new Array(pre.length + 1).join("-");
        return pre + this.upcomingInput() + "\n" + c + "^";
    },

// test the lexed token: return FALSE when not a match, otherwise return token
test_match:function(match, indexed_rule) {
        var token,
            lines,
            backup;

        if (this.options.backtrack_lexer) {
            // save context
            backup = {
                yylineno: this.yylineno,
                yylloc: {
                    first_line: this.yylloc.first_line,
                    last_line: this.last_line,
                    first_column: this.yylloc.first_column,
                    last_column: this.yylloc.last_column
                },
                yytext: this.yytext,
                match: this.match,
                matches: this.matches,
                matched: this.matched,
                yyleng: this.yyleng,
                offset: this.offset,
                _more: this._more,
                _input: this._input,
                yy: this.yy,
                conditionStack: this.conditionStack.slice(0),
                done: this.done
            };
            if (this.options.ranges) {
                backup.yylloc.range = this.yylloc.range.slice(0);
            }
        }

        lines = match[0].match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno += lines.length;
        }
        this.yylloc = {
            first_line: this.yylloc.last_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.last_column,
            last_column: lines ?
                         lines[lines.length - 1].length - lines[lines.length - 1].match(/\r?\n?/)[0].length :
                         this.yylloc.last_column + match[0].length
        };
        this.yytext += match[0];
        this.match += match[0];
        this.matches = match;
        this.yyleng = this.yytext.length;
        if (this.options.ranges) {
            this.yylloc.range = [this.offset, this.offset += this.yyleng];
        }
        this._more = false;
        this._backtrack = false;
        this._input = this._input.slice(match[0].length);
        this.matched += match[0];
        token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);
        if (this.done && this._input) {
            this.done = false;
        }
        if (token) {
            return token;
        } else if (this._backtrack) {
            // recover context
            for (var k in backup) {
                this[k] = backup[k];
            }
            return false; // rule action called reject() implying the next rule should be tested instead.
        }
        return false;
    },

// return next match in input
next:function () {
        if (this.done) {
            return this.EOF;
        }
        if (!this._input) {
            this.done = true;
        }

        var token,
            match,
            tempMatch,
            index;
        if (!this._more) {
            this.yytext = '';
            this.match = '';
        }
        var rules = this._currentRules();
        for (var i = 0; i < rules.length; i++) {
            tempMatch = this._input.match(this.rules[rules[i]]);
            if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
                match = tempMatch;
                index = i;
                if (this.options.backtrack_lexer) {
                    token = this.test_match(tempMatch, rules[i]);
                    if (token !== false) {
                        return token;
                    } else if (this._backtrack) {
                        match = false;
                        continue; // rule action called reject() implying a rule MISmatch.
                    } else {
                        // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
                        return false;
                    }
                } else if (!this.options.flex) {
                    break;
                }
            }
        }
        if (match) {
            token = this.test_match(match, rules[index]);
            if (token !== false) {
                return token;
            }
            // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
            return false;
        }
        if (this._input === "") {
            return this.EOF;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });
        }
    },

// return next match that has a token
lex:function lex () {
        var r = this.next();
        if (r) {
            return r;
        } else {
            return this.lex();
        }
    },

// activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)
begin:function begin (condition) {
        this.conditionStack.push(condition);
    },

// pop the previously active lexer condition state off the condition stack
popState:function popState () {
        var n = this.conditionStack.length - 1;
        if (n > 0) {
            return this.conditionStack.pop();
        } else {
            return this.conditionStack[0];
        }
    },

// produce the lexer rule set which is active for the currently active lexer condition state
_currentRules:function _currentRules () {
        if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {
            return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;
        } else {
            return this.conditions["INITIAL"].rules;
        }
    },

// return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available
topState:function topState (n) {
        n = this.conditionStack.length - 1 - Math.abs(n || 0);
        if (n >= 0) {
            return this.conditionStack[n];
        } else {
            return "INITIAL";
        }
    },

// alias for begin(condition)
pushState:function pushState (condition) {
        this.begin(condition);
    },

// return the number of states currently on the stack
stateStackSize:function stateStackSize() {
        return this.conditionStack.length;
    },
options: {"ranges":true},
performAction: function anonymous(yy,yy_,$avoiding_name_collisions,YY_START) {
var YYSTATE=YY_START;
switch($avoiding_name_collisions) {
case 0:/* skip comments */
break;
case 1:this.begin('comment');
break;
case 2:this.popState();
break;
case 3:/* skip comment content*/
break;
case 4:/* skip whitespace */
break;
case 5:return 14; 
break;
case 6:return 15;
break;
case 7:return 23;
break;
case 8:return 24;
break;
case 9:return 63;
break;
case 10:return 65;
break;
case 11:return 19;
break;
case 12:return 42;
break;
case 13:return 16;
break;
case 14:return "PRINTLN";
break;
case 15:return "PRINT";
break;
case 16:return 21;
break;
case 17:return 22;
break;
case 18:return 52;
break;
case 19:return 56;
break;
case 20:return 55;
break;
case 21:return 62;
break;
case 22:return 'STR_DO';
break;
case 23:return 57;
break;
case 24:return 46;
break;
case 25:return 47;
break;
case 26:return 35;
break;
case 27:return 41;
break;
case 28:return 45;
break;
case 29:return 99;
break;
case 30:return 98;
break;
case 31:return 'STR_RETURN';
break;
case 32:return 71;
break;
case 33:return 70;
break;
case 34:return 69;
break;
case 35:return 72;
break;
case 36:return 68;
break;
case 37:return 11;
break;
case 38:return 66;
break;
case 39:return 67;
break;
case 40:return 'STR_FUNCTION';
break;
case 41:return 59;
break;
case 42:return 'STR_POW';
break;
case 43:return 'STR_SQRT';
break;
case 44:return 'STR_SIN';
break;
case 45:return 'STR_COS';
break;
case 46:return 'STR_TAN';
break;
case 47:return 'STR_PARSE';
break;
case 48:return 'STR_TOINT';
break;
case 49:return 'STR_TODOUBLE';
break;
case 50:return 'STR_string';
break;
case 51:return 'STR_TYPEOF';
break;
case 52:return 'STR_PUSH';
break;
case 53:return 'STR_POP';
break;
case 54:return 'CHARPOS';
break;
case 55:return 'SUBSTRING';
break;
case 56:return 'LENGTH';
break;
case 57:return 'UPPERCASE';
break;
case 58:return 'LOWERCASE';
break;
case 59:return 86;
break;
case 60:return 87;
break;
case 61:return 83;
break;
case 62:return 85;
break;
case 63:return 88;
break;
case 64:return 84;
break;
case 65:return 82;
break;
case 66:return 81;
break;
case 67:return 93;
break;
case 68:return 'OP_NEG';
break;
case 69:return 73;
break;
case 70:return 'OP_MASIG';
break;
case 71:return 'OP_RESIG';
break;
case 72:return 'OP_PORIG';
break;
case 73:return 'OP_DIVIG';
break;
case 74:return 'OP_MODIG';
break;
case 75:return 96;
break;
case 76:return 91;
break;
case 77:return 97;
break;
case 78:return 92;
break;
case 79:return 89;
break;
case 80:return 90;
break;
case 81:return 95;
break;
case 82:return 'OP_CALL';
break;
case 83:return 94;
break;
case 84:return 80;
break;
case 85:return 'OP_HASH';
break;
case 86:return 'STR_NULL';
break;
case 87:return 12;
break;
case 88:return 12;
break;
case 89:return 101;
break;
case 90:return 100;
break;
case 91:return 102;
break;
case 92:return 102;
break;
case 93:return 'CHARL';
break;
case 94:return 'CHARL';
break;
case 95:return 4;
break;
case 96:return 'INVALID';
break;
}
},
rules: [/^(?:\/\/.*)/,/^(?:\/\*)/,/^(?:\*\/)/,/^(?:.)/,/^(?:\s+)/,/^(?:\{)/,/^(?:\})/,/^(?:\()/,/^(?:\))/,/^(?:\[)/,/^(?:\])/,/^(?:,)/,/^(?::)/,/^(?:;)/,/^(?:println\b)/,/^(?:print\b)/,/^(?:void\b)/,/^(?:main\b)/,/^(?:if\b)/,/^(?:elseif\b)/,/^(?:else\b)/,/^(?:while\b)/,/^(?:do\b)/,/^(?:for\b)/,/^(?:break\b)/,/^(?:continue\b)/,/^(?:switch\b)/,/^(?:case\b)/,/^(?:default\b)/,/^(?:true\b)/,/^(?:false\b)/,/^(?:return\b)/,/^(?:boolean\b)/,/^(?:int\b)/,/^(?:double\b)/,/^(?:char\b)/,/^(?:String\b)/,/^(?:struct\b)/,/^(?:begin\b)/,/^(?:end\b)/,/^(?:function\b)/,/^(?:in\b)/,/^(?:pow\b)/,/^(?:sqrt\b)/,/^(?:sin\b)/,/^(?:cos\b)/,/^(?:tan\b)/,/^(?:parse\b)/,/^(?:toInt\b)/,/^(?:toDouble\b)/,/^(?:string\b)/,/^(?:typeof\b)/,/^(?:push\b)/,/^(?:pop\b)/,/^(?:caracterOfPosition\b)/,/^(?:subString\b)/,/^(?:length\b)/,/^(?:toUppercase\b)/,/^(?:toLowercase\b)/,/^(?:<=)/,/^(?:<)/,/^(?:==)/,/^(?:>=)/,/^(?:>)/,/^(?:!=)/,/^(?:\|\|)/,/^(?:&&)/,/^(?:&)/,/^(?:!)/,/^(?:=)/,/^(?:\+=)/,/^(?:-=)/,/^(?:\*=)/,/^(?:\/=)/,/^(?:%=)/,/^(?:\+\+)/,/^(?:\+)/,/^(?:--)/,/^(?:-)/,/^(?:\*)/,/^(?:\/)/,/^(?:%)/,/^(?:\.)/,/^(?:\^)/,/^(?:\?)/,/^(?:#)/,/^(?:null\b)/,/^(?:[A-Z][a-zA-Z0-9_]*)/,/^(?:[a-zA-Z][a-zA-Z0-9_]*)/,/^(?:(((0|([1-9])([0-9])*))\.((0|([1-9])([0-9])*))?(([Ee][+-]?((0|([1-9])([0-9])*))))?[fFdD]?|\.((0|([1-9])([0-9])*))(([Ee][+-]?((0|([1-9])([0-9])*))))?[fFdD]?|((0|([1-9])([0-9])*))(([Ee][+-]?((0|([1-9])([0-9])*))))[fFdD]?|((0|([1-9])([0-9])*))(([Ee][+-]?((0|([1-9])([0-9])*))))?[fFdD])(?=([^\w]|$)))/,/^(?:((0|([1-9])([0-9])*)))/,/^(?:"")/,/^(?:"([^"]|(\\.))*")/,/^(?:\\'([^']|(\\.))*\\')/,/^(?:\\'\\')/,/^(?:$)/,/^(?:.)/],
conditions: {"comment":{"rules":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96],"inclusive":true},"INITIAL":{"rules":[0,1,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96],"inclusive":true}}
});
return lexer;
})();
parser.lexer = lexer;
function Parser () {
  this.yy = {};
}
Parser.prototype = parser;parser.Parser = Parser;
return new Parser;
})();


if (typeof require !== 'undefined' && typeof exports !== 'undefined') {
exports.parser = Gramatica;
exports.Parser = Gramatica.Parser;
exports.parse = function () { return Gramatica.parse.apply(Gramatica, arguments); };
exports.main = function commonjsMain (args) {
    if (!args[1]) {
        console.log('Usage: '+args[0]+' FILE');
        process.exit(1);
    }
    var source = require('fs').readFileSync(require('path').normalize(args[1]), "utf8");
    return exports.parser.parse(source);
};
if (typeof module !== 'undefined' && require.main === module) {
  exports.main(process.argv.slice(1));
}
}
/* parser generated by jison 0.4.18 */
/*
  Returns a Parser object of the following structure:

  Parser: {
    yy: {}
  }

  Parser.prototype: {
    yy: {},
    trace: function(),
    symbols_: {associative list: name ==> number},
    terminals_: {associative list: number ==> name},
    productions_: [...],
    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),
    table: [...],
    defaultActions: {...},
    parseError: function(str, hash),
    parse: function(input),

    lexer: {
        EOF: 1,
        parseError: function(str, hash),
        setInput: function(input),
        input: function(),
        unput: function(str),
        more: function(),
        less: function(n),
        pastInput: function(),
        upcomingInput: function(),
        showPosition: function(),
        test_match: function(regex_match_array, rule_index),
        next: function(),
        lex: function(),
        begin: function(condition),
        popState: function(),
        _currentRules: function(),
        topState: function(),
        pushState: function(condition),

        options: {
            ranges: boolean           (optional: true ==> token location info will include a .range[] member)
            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)
            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)
        },

        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),
        rules: [...],
        conditions: {associative list: name ==> set},
    }
  }


  token location info (@$, _$, etc.): {
    first_line: n,
    last_line: n,
    first_column: n,
    last_column: n,
    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)
  }


  the parseError function receives a 'hash' object with these members for lexer and parser errors: {
    text:        (matched text)
    token:       (the produced terminal token, if any)
    line:        (yylineno)
  }
  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {
    loc:         (yylloc)
    expected:    (string describing the set of expected tokens)
    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)
  }
*/
var Gramatica = (function(){
var o=function(k,v,o,l){for(o=o||{},l=k.length;l--;o[k[l]]=v);return o},$V0=[1,13],$V1=[1,12],$V2=[1,9],$V3=[1,11],$V4=[1,14],$V5=[1,15],$V6=[1,16],$V7=[1,17],$V8=[1,18],$V9=[2,4,10,11,20,88,89,90,91,92],$Va=[1,24],$Vb=[1,25],$Vc=[1,26],$Vd=[2,4,10,11,14,20,43,44,45,51,56,59,68,70,72,78,82,83,88,89,90,91,92],$Ve=[1,32],$Vf=[1,31],$Vg=[2,11,46,66],$Vh=[1,37],$Vi=[1,35],$Vj=[1,36],$Vk=[2,15,18,94],$Vl=[2,113],$Vm=[1,40],$Vn=[1,55],$Vo=[1,62],$Vp=[1,64],$Vq=[1,65],$Vr=[1,66],$Vs=[1,67],$Vt=[1,68],$Vu=[1,69],$Vv=[1,70],$Vw=[1,71],$Vx=[1,75],$Vy=[1,76],$Vz=[1,77],$VA=[1,78],$VB=[1,56],$VC=[1,57],$VD=[1,58],$VE=[1,59],$VF=[1,60],$VG=[1,61],$VH=[1,63],$VI=[1,88],$VJ=[1,87],$VK=[18,23],$VL=[2,23],$VM=[1,95],$VN=[2,11,13,15,18,23,46,57,67,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125],$VO=[18,67],$VP=[1,116],$VQ=[1,115],$VR=[1,100],$VS=[1,101],$VT=[1,109],$VU=[1,110],$VV=[1,111],$VW=[1,112],$VX=[1,113],$VY=[1,114],$VZ=[1,102],$V_=[1,103],$V$=[1,104],$V01=[1,105],$V11=[1,106],$V21=[1,107],$V31=[1,108],$V41=[15,18,23,46,57,67,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125],$V51=[15,18,23,46,49,50,57,67,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125],$V61=[14,18],$V71=[1,143],$V81=[2,28],$V91=[1,174],$Va1=[15,18,23,57,67,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125],$Vb1=[1,188],$Vc1=[1,187],$Vd1=[15,18,23,57,67,110,112],$Ve1=[15,18,23,57,67,110,111,112,113,114,115,116,117,118,119,120,121,122,123,125],$Vf1=[15,18,23,57,67,110,111,112,113,114,115,116,117,118,121,122,123],$Vg1=[15,18,23,57,67,110,111,112,113,114,115,116,117,118],$Vh1=[1,202],$Vi1=[1,204],$Vj1=[1,231],$Vk1=[1,233],$Vl1=[1,243],$Vm1=[1,244],$Vn1=[1,242],$Vo1=[1,241],$Vp1=[1,235],$Vq1=[1,236],$Vr1=[1,237],$Vs1=[1,238],$Vt1=[1,239],$Vu1=[1,240],$Vv1=[2,4,10,11,14,20,43,44,45,51,56,59,68,70,72,75,77,78,82,83,88,89,90,91,92],$Vw1=[2,11,14,43,44,45,51,56,59,68,70,72,78,82,83,88,89,90,91,92],$Vx1=[2,94],$Vy1=[2,118],$Vz1=[1,297],$VA1=[2,13,15,18,23,46,57,67,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125],$VB1=[1,318],$VC1=[1,321],$VD1=[2,84],$VE1=[2,89],$VF1=[1,358],$VG1=[1,360],$VH1=[1,367],$VI1=[14,56,59];
var parser = {trace: function trace () { },
yy: {},
symbols_: {"error":2,"ini":3,"EOF":4,"instrucciones":5,"instruccion":6,"declaracion_bloque":7,"asignacion_funcion":8,"struct_declaracion":9,"STR_STRUCT":10,"ID_VAR":11,"cuerpo_struct":12,"BRACKI":13,"BRACKD":14,"PUNTCOMA":15,"contenido_struct":16,"declaracion_struct":17,"COMA":18,"tiposVar":19,"VOID":20,"MAIN":21,"PARI":22,"PARD":23,"cuerpoFuncion":24,"parametros_funcion":25,"parametro_funcion":26,"parametros_funcion_return":27,"parametro_funcion_return":28,"expresion":29,"instrucciones_funciones":30,"instruccion_funcion":31,"asignacion_bloque":32,"print_bloque":33,"if_bloque":34,"for_bloque":35,"while_bloque":36,"switch_bloque":37,"funcion_return":38,"incremento_decremento":39,"funciones_arreglo":40,"returns_bloque":41,"rompimientos_bloque":42,"BREAK":43,"CONTINUE":44,"STR_RETURN":45,"OP_CALL":46,"STR_PUSH":47,"STR_POP":48,"OP_INCR":49,"OP_DECR":50,"STR_SWITCH":51,"switch_cuerpo":52,"casos_switch":53,"opcional_default":54,"caso_switch":55,"STR_CASE":56,"DOSPUNT":57,"contenido_caso":58,"STR_DEFAULT":59,"opcional_break":60,"nombreVars":61,"asignacion":62,"declaracion_arreglo":63,"arr_decl":64,"nombreAtributos":65,"CORCHI":66,"CORCHD":67,"PRINT":68,"expresiones_print":69,"PRINTLN":70,"expresion_print":71,"STR_IF":72,"sinos_bloque":73,"instruccion_devuelta":74,"STR_ELSE":75,"sino_si_bloque":76,"STR_ELSEIF":77,"STR_FOR":78,"decl_asign":79,"STR_IN":80,"arr_begin_end":81,"STR_WHILE":82,"STR_DO":83,"parametros_arreglo":84,"expresion_arreglo":85,"STR_BEGIN":86,"STR_END":87,"STR_STRING":88,"STR_DOUBLE":89,"STR_INTEGER":90,"STR_BOOLEAN":91,"STR_CHAR":92,"nombreAtributos_prima":93,"OP_IGUAL":94,"primitivas":95,"logicas":96,"operadores":97,"relacionales":98,"expresion_ternario":99,"incr_decr":100,"nativas":101,"expresion_arr_arreglo":102,"expresion_atributos":103,"otras_nativas":104,"LENGTH":105,"UPPERCASE":106,"LOWERCASE":107,"CHARPOS":108,"SUBSTRING":109,"OP_TER":110,"OP_AND":111,"OP_OR":112,"OP_DOBIG":113,"OP_DIF":114,"OP_MAYIG":115,"OP_MENIG":116,"OP_MEN":117,"OP_MAY":118,"OP_MULT":119,"OP_DIVI":120,"OP_SUMA":121,"OP_RESTA":122,"OP_AMP":123,"OP_ELV":124,"OP_MOD":125,"OP_NEG":126,"STR_POW":127,"STR_SQRT":128,"STR_SIN":129,"STR_COS":130,"STR_TAN":131,"STR_PARSE":132,"STR_TOINT":133,"STR_TODOUBLE":134,"STR_string":135,"STR_TYPEOF":136,"STR_FALSE":137,"STR_TRUE":138,"ENTERO":139,"FLOTANTE":140,"STRINGL":141,"CHARL":142,"STR_NULL":143,"$accept":0,"$end":1},
terminals_: {2:"error",4:"EOF",10:"STR_STRUCT",11:"ID_VAR",13:"BRACKI",14:"BRACKD",15:"PUNTCOMA",18:"COMA",20:"VOID",21:"MAIN",22:"PARI",23:"PARD",43:"BREAK",44:"CONTINUE",45:"STR_RETURN",46:"OP_CALL",47:"STR_PUSH",48:"STR_POP",49:"OP_INCR",50:"OP_DECR",51:"STR_SWITCH",56:"STR_CASE",57:"DOSPUNT",59:"STR_DEFAULT",66:"CORCHI",67:"CORCHD",68:"PRINT",70:"PRINTLN",72:"STR_IF",75:"STR_ELSE",77:"STR_ELSEIF",78:"STR_FOR",80:"STR_IN",82:"STR_WHILE",83:"STR_DO",86:"STR_BEGIN",87:"STR_END",88:"STR_STRING",89:"STR_DOUBLE",90:"STR_INTEGER",91:"STR_BOOLEAN",92:"STR_CHAR",94:"OP_IGUAL",105:"LENGTH",106:"UPPERCASE",107:"LOWERCASE",108:"CHARPOS",109:"SUBSTRING",110:"OP_TER",111:"OP_AND",112:"OP_OR",113:"OP_DOBIG",114:"OP_DIF",115:"OP_MAYIG",116:"OP_MENIG",117:"OP_MEN",118:"OP_MAY",119:"OP_MULT",120:"OP_DIVI",121:"OP_SUMA",122:"OP_RESTA",123:"OP_AMP",124:"OP_ELV",125:"OP_MOD",126:"OP_NEG",127:"STR_POW",128:"STR_SQRT",129:"STR_SIN",130:"STR_COS",131:"STR_TAN",132:"STR_PARSE",133:"STR_TOINT",134:"STR_TODOUBLE",135:"STR_string",136:"STR_TYPEOF",137:"STR_FALSE",138:"STR_TRUE",139:"ENTERO",140:"FLOTANTE",141:"STRINGL",142:"CHARL",143:"STR_NULL"},
productions_: [0,[3,1],[3,2],[5,2],[5,1],[6,1],[6,1],[6,1],[9,3],[9,2],[12,3],[12,4],[12,1],[16,1],[16,3],[17,2],[17,2],[17,1],[8,5],[8,6],[8,6],[25,3],[25,1],[25,0],[26,2],[26,1],[27,3],[27,1],[27,0],[28,1],[24,3],[24,2],[24,1],[30,2],[30,1],[31,1],[31,1],[31,1],[31,1],[31,1],[31,1],[31,1],[31,1],[31,1],[31,1],[31,1],[31,1],[31,2],[42,2],[42,2],[41,2],[41,3],[40,7],[40,6],[39,3],[39,3],[38,5],[37,5],[37,1],[52,2],[52,4],[52,1],[53,2],[53,1],[55,4],[58,1],[54,3],[54,0],[60,2],[60,2],[60,0],[7,3],[7,4],[7,4],[7,1],[63,4],[63,5],[32,3],[32,6],[33,5],[33,5],[33,2],[69,2],[71,3],[71,0],[34,6],[74,1],[73,2],[73,2],[73,0],[76,5],[35,9],[35,5],[35,5],[35,5],[36,5],[36,6],[79,3],[79,2],[64,3],[64,2],[84,1],[84,3],[85,1],[81,6],[81,6],[81,6],[81,6],[19,1],[19,1],[19,1],[19,1],[19,1],[61,1],[61,3],[61,1],[65,2],[93,3],[93,0],[62,2],[62,1],[29,1],[29,1],[29,1],[29,1],[29,1],[29,1],[29,1],[29,1],[29,1],[29,1],[29,1],[102,1],[102,4],[102,1],[103,3],[103,5],[103,5],[103,5],[103,5],[103,6],[103,8],[99,5],[96,3],[96,3],[98,3],[98,3],[98,3],[98,3],[98,3],[98,3],[97,3],[97,3],[97,3],[97,3],[97,3],[97,3],[97,3],[97,3],[97,2],[97,2],[100,2],[100,2],[101,6],[101,4],[101,4],[101,4],[101,4],[104,6],[104,4],[104,4],[104,4],[104,4],[95,1],[95,1],[95,1],[95,1],[95,1],[95,1],[95,1],[95,4],[95,1]],
performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */) {
/* this == yyval */

var $0 = $$.length - 1;
switch (yystate) {
case 1:
console.log("EOF encontrado");return [];
break;
case 2:
this.$ = $$[$0-1];return reiniciarArrays(this.$);
break;
case 3: case 62:
$$[$0-1].push($$[$0]); this.$ = $$[$0-1];
break;
case 4: case 13: case 22: case 27: case 63: case 113:
this.$ = [$$[$0]];
break;
case 5: case 6: case 7: case 35: case 36: case 37: case 38: case 39: case 40: case 41: case 42: case 43: case 44: case 45: case 46: case 65: case 74: case 103: case 119: case 121: case 122: case 123: case 124: case 125: case 126: case 127: case 128: case 129: case 130: case 134:
this.$ = $$[$0];
break;
case 8:
this.$ = new Struct($$[$0-1],$$[$0],_$[$0-2].first_line,_$[$0-2].first_column); 
break;
case 9: case 47: case 81:
genError(yytext,_$[$0-1].first_line,_$[$0-1].first_column);
break;
case 10:
this.$ = []; 
break;
case 11:
this.$ = $$[$0-2];
break;
case 12: case 17: case 25: case 32: case 58: case 61: case 115: case 120: case 131:
genError(yytext,_$[$0].first_line,_$[$0].first_column);
break;
case 14:
$$[$0-2].push($$[$0]); this.$= $$[$0-2]; 
break;
case 15: case 16:
this.$ = new Declaracion($$[$0],$$[$0-1],_$[$0-1].first_line,_$[$0-1].first_column,null);
break;
case 18:
this.$ = new Funcion("main","void",_$[$0-4].first_line,_$[$0-4].first_column,$$[$0],[]);
break;
case 19: case 20:
this.$ = new Funcion($$[$0-4],$$[$0-5],_$[$0-5].first_line,_$[$0-5].first_column,$$[$0],$$[$0-2]);
break;
case 21: case 26: case 102:
$$[$0-2].push($$[$0]);this.$ = $$[$0-2];
break;
case 23: case 28: case 84: case 89: case 100: case 118:
this.$ = [];
break;
case 24:
this.$ = new Parametro($$[$0],$$[$0-1],_$[$0-1].first_line,_$[$0-1].first_column);
break;
case 29:
this.$ = new ParametroReturn($$[$0],_$[$0].first_line,_$[$0].first_column);
break;
case 30: case 158:
this.$ = $$[$0-1];
break;
case 31: case 67: case 70:
this.$ = null;
break;
case 33:
        
        $$[$0-1].push($$[$0]);
        this.$ = $$[$0-1];
    
break;
case 34:
                
        this.$ = [$$[$0]];
    
break;
case 48: case 68:
this.$ = new Break(_$[$0-1].first_line,_$[$0-1].first_column);
break;
case 49: case 69:
this.$ = new Continue(_$[$0-1].first_line,_$[$0-1].first_column);
break;
case 50:
this.$ = new Return(null,_$[$0-1].first_line,_$[$0-1].first_column);
break;
case 51:
this.$ = new Return($$[$0-1],_$[$0-2].first_line,_$[$0-2].first_column);
break;
case 52:
this.$ = new Push($$[$0-6],$$[$0-2],_$[$0-6].first_line, _$[$0-6].first_column);
break;
case 53:
this.$ = new Pop($$[$0-5],_$[$0-5].first_line, _$[$0-5].first_column);
break;
case 54:
   let accVar = new AccesoVariable($$[$0-2], _$[$0-2].first_line, _$[$0-2].first_column);
            let operInDec = new Operacion(accVar,null,Operador.INCREMENTO, _$[$0-2].first_line, _$[$0-2].first_column);
            this.$ = new IncrDecr(operInDec,_$[$0-2].first_line,_$[$0-2].first_column,$$[$0-2]);
        
break;
case 55:
   let accVar1 = new AccesoVariable($$[$0-2], _$[$0-2].first_line, _$[$0-2].first_column);
            let operInDec1 = new Operacion(accVar1,null,Operador.DECREMENTO, _$[$0-2].first_line, _$[$0-2].first_column);
            this.$ = new IncrDecr(operInDec1,_$[$0-2].first_line,_$[$0-2].first_column,$$[$0-2]);
        
break;
case 56:
this.$ = new FuncionReturn($$[$0-4],_$[$0-4].first_line,_$[$0-4].first_column,$$[$0-2]);
break;
case 57:
this.$ = new Switch($$[$0-2],$$[$0],_$[$0-4].first_line,_$[$0-4].first_column);
break;
case 59:
this.$= [];
break;
case 60:

            if ($$[$0-1] != null){
                $$[$0-2].push($$[$0-1]);
            }
            this.$ = $$[$0-2];
        
break;
case 64:
this.$ = new SwitchCaso($$[$0-2],$$[$0],_$[$0-3].first_line,_$[$0-3].first_column);
break;
case 66:
let nul = new Primitivo(null, _$[$0-2].first_line, _$[$0-2].first_column);this.$ = new SwitchCaso(nul,$$[$0],_$[$0-2].first_line,_$[$0-2].first_column);
break;
case 71:
this.$ = new Declaracion($$[$0-1],$$[$0-2],_$[$0-2].first_line,_$[$0-2].first_column,null);
break;
case 72:
this.$ = new Declaracion($$[$0-2],$$[$0-3],_$[$0-3].first_line,_$[$0-3].first_column,$$[$0-1]);
break;
case 73:
this.$ =  new DeclaracionStruct($$[$0-2],$$[$0-3],_$[$0-3].first_line,_$[$0-3].first_column,$$[$0-1]);
break;
case 75:
this.$ = new DeclaracionArray($$[$0-1],$$[$0-3],$$[$0-2],_$[$0-3].first_line,_$[$0-3].first_column,null);
break;
case 76:
this.$ = new DeclaracionArray($$[$0-2],$$[$0-4],$$[$0-3],_$[$0-4].first_line,_$[$0-4].first_column,$$[$0-1]);
break;
case 77:
this.$ = new Asignacion($$[$0-2],_$[$0-2].first_line,_$[$0-2].first_column,$$[$0-1]);
break;
case 78:
this.$ = new AsignacionArray($$[$0-5],$$[$0-3],_$[$0-5].first_line, _$[$0-5].first_column,$$[$0-1]);
break;
case 79:
this.$ = new Print($$[$0-2],_$[$0-4].first_line,_$[$0-4].first_column,false);
break;
case 80:
this.$ = new Print($$[$0-2],_$[$0-4].first_line,_$[$0-4].first_column,true);
break;
case 82:
$$[$0].unshift($$[$0-1]); this.$ = new ConcatenacionString($$[$0],_$[$0-1].first_line,_$[$0-1].first_column);
break;
case 83: case 116: case 117:
$$[$0].unshift($$[$0-1]); this.$ = $$[$0];
break;
case 85:
this.$ = new If(_$[$0-5].first_line,_$[$0-5].first_column,$$[$0-3],$$[$0-1],$$[$0],"if");
break;
case 86: case 101:
this.$ = [$$[$0]]
break;
case 87:
this.$ = [new If(_$[$0-1].first_line,_$[$0-1].first_column,null,$$[$0],[],"else")];
break;
case 88:
$$[$0].push($$[$0-1]); this.$ = $$[$0]
break;
case 90:
this.$ = new If(_$[$0-4].first_line,_$[$0-4].first_column,$$[$0-2],$$[$0],[],"elseif");
break;
case 91:
this.$ = new For(_$[$0-8].first_line,_$[$0-8].first_column,$$[$0],$$[$0-6],$$[$0-4],$$[$0-2]);
break;
case 92: case 93: case 94:
this.$ = new Forin(_$[$0-4].first_line,_$[$0-4].first_column,$$[$0],$$[$0-3],$$[$0-1]);
break;
case 95:
this.$ = new While(_$[$0-4].first_line,_$[$0-4].first_column,$$[$0],$$[$0-2]);
break;
case 96:
this.$ = new DoWhile(_$[$0-5].first_line,_$[$0-5].first_column,$$[$0-4],$$[$0-1]);
break;
case 97:
this.$ = new Declaracion($$[$0-1],$$[$0-2],_$[$0-2].first_line,_$[$0-2].first_column,$$[$0]);
break;
case 98:
this.$ = new Asignacion($$[$0-1],_$[$0-1].first_line,_$[$0-1].first_column,$$[$0]);
break;
case 99:
this.$ = $$[$0-1]
break;
case 104:
this.$ = new ArrbegEnd($$[$0-5],_$[$0-5].first_line,_$[$0-5].first_column,$$[$0-3],$$[$0-1]);
break;
case 105:
let beg = new Primitivo("begin", _$[$0-5].first_line, _$[$0-5].first_column); this.$ = new ArrbegEnd($$[$0-5],_$[$0-5].first_line,_$[$0-5].first_column,beg,$$[$0-1]);
break;
case 106:
let beg1 = new Primitivo("begin", _$[$0-5].first_line, _$[$0-5].first_column); let end1 = new Primitivo("end", _$[$0-5].first_line, _$[$0-5].first_column); this.$ = new ArrbegEnd($$[$0-5],_$[$0-5].first_line,_$[$0-5].first_column,beg1,end1);
break;
case 107:
let beg2 = new Primitivo("end", _$[$0-5].first_line, _$[$0-5].first_column); this.$ = new ArrbegEnd($$[$0-5],_$[$0-5].first_line,_$[$0-5].first_column,$$[$0-3],beg2);
break;
case 108:
this.$ = Tipo.STRING;
break;
case 109:
this.$ = Tipo.DOUBLE;
break;
case 110:
this.$ = Tipo.INT;
break;
case 111:
this.$ = Tipo.BOOL;
break;
case 112:
this.$ = Tipo.CHAR;
break;
case 114:
 $$[$0-2].push($$[$0]);this.$ = $$[$0-2];
break;
case 132:
this.$ = new AccesoArray($$[$0],_$[$0].first_line, _$[$0].first_column);
break;
case 133:
this.$ = new AccesoAtribArray($$[$0-3],$$[$0-1],_$[$0-3].first_line, _$[$0-3].first_column);
break;
case 135:
this.$ = new AccesoAtributo($$[$0-2],$$[$0],_$[$0-2].first_line, _$[$0-2].first_column);
break;
case 136:
this.$ = new OperacionCadena($$[$0-4],null,null,OperadorCadena.LENGTH,_$[$0-4].first_line, _$[$0-4].first_column);
break;
case 137:
this.$ = new OperacionCadena($$[$0-4],null,null,OperadorCadena.POP,_$[$0-4].first_line, _$[$0-4].first_column);
break;
case 138:
this.$ = new OperacionCadena($$[$0-4],null,null,OperadorCadena.UPPERCASE,_$[$0-4].first_line, _$[$0-4].first_column);
break;
case 139:
this.$ = new OperacionCadena($$[$0-4],null,null,OperadorCadena.LOWERCASE,_$[$0-4].first_line, _$[$0-4].first_column);
break;
case 140:
this.$ = new OperacionCadena($$[$0-5],$$[$0-1],null,OperadorCadena.CHARPOS,_$[$0-5].first_line, _$[$0-5].first_column);
break;
case 141:
this.$ = new OperacionCadena($$[$0-7],$$[$0-3],$$[$0-1],OperadorCadena.SUBSTRING,_$[$0-7].first_line, _$[$0-7].first_column);
break;
case 142:
this.$ = new Ternario($$[$0-4],$$[$0-2],$$[$0],_$[$0-4].first_line, _$[$0-4].first_column);
break;
case 143:
this.$ = new Operacion($$[$0-2],$$[$0],Operador.AND, _$[$0-2].first_line, _$[$0-2].first_column);
break;
case 144:
this.$ = new Operacion($$[$0-2],$$[$0],Operador.OR, _$[$0-2].first_line, _$[$0-2].first_column);
break;
case 145:
this.$ = new Operacion($$[$0-2],$$[$0],Operador.IGUAL_IGUAL, _$[$0-2].first_line, _$[$0-2].first_column);
break;
case 146:
this.$ = new Operacion($$[$0-2],$$[$0],Operador.DIFERENTE_QUE, _$[$0-2].first_line, _$[$0-2].first_column);
break;
case 147:
this.$ = new Operacion($$[$0-2],$$[$0],Operador.MAYOR_IGUA_QUE, _$[$0-2].first_line, _$[$0-2].first_column);
break;
case 148:
this.$ = new Operacion($$[$0-2],$$[$0],Operador.MENOR_IGUA_QUE, _$[$0-2].first_line, _$[$0-2].first_column);
break;
case 149:
this.$ = new Operacion($$[$0-2],$$[$0],Operador.MENOR_QUE, _$[$0-2].first_line, _$[$0-2].first_column);
break;
case 150:
this.$ = new Operacion($$[$0-2],$$[$0],Operador.MAYOR_QUE, _$[$0-2].first_line, _$[$0-2].first_column);
break;
case 151:
this.$ = new Operacion($$[$0-2],$$[$0],Operador.MULTIPLICACION, _$[$0-2].first_line, _$[$0-2].first_column);
break;
case 152:
this.$ = new Operacion($$[$0-2],$$[$0],Operador.DIVISION, _$[$0-2].first_line, _$[$0-2].first_column);
break;
case 153:
this.$ = new Operacion($$[$0-2],$$[$0],Operador.SUMA, _$[$0-2].first_line, _$[$0-2].first_column);
break;
case 154:
this.$ = new Operacion($$[$0-2],$$[$0],Operador.RESTA, _$[$0-2].first_line, _$[$0-2].first_column);
break;
case 155:
this.$ = new Operacion($$[$0-2],$$[$0],Operador.AMPERSON, _$[$0-2].first_line, _$[$0-2].first_column);
break;
case 156:
this.$ = new Operacion($$[$0-2],$$[$0],Operador.ELEVADO, _$[$0-2].first_line, _$[$0-2].first_column);
break;
case 157:
this.$ = new Operacion($$[$0-2],$$[$0],Operador.MODULO, _$[$0-2].first_line, _$[$0-2].first_column);
break;
case 159:
this.$ = new Operacion($$[$0],null,Operador.MENOS_UNARIO, _$[$0-1].first_line, _$[$0-1].first_column);
break;
case 160:
this.$ = new Operacion($$[$0],null,Operador.NOT, _$[$0-1].first_line, _$[$0-1].first_column);
break;
case 161:
this.$ = new Operacion($$[$0-1],null,Operador.INCREMENTO, _$[$0-1].first_line, _$[$0-1].first_column);
break;
case 162:
this.$ = new Operacion($$[$0-1],null,Operador.DECREMENTO, _$[$0-1].first_line, _$[$0-1].first_column);
break;
case 163:
this.$ = new Operacion($$[$0-3],$$[$0-1],Operador.POW, _$[$0-5].first_line, _$[$0-5].first_column);
break;
case 164:
this.$ = new Operacion($$[$0-1],null,Operador.SQRT, _$[$0-3].first_line, _$[$0-3].first_column);
break;
case 165:
this.$ = new Operacion($$[$0-1],null,Operador.SIN, _$[$0-3].first_line, _$[$0-3].first_column);
break;
case 166:
this.$ = new Operacion($$[$0-1],null,Operador.COS, _$[$0-3].first_line, _$[$0-3].first_column);
break;
case 167:
this.$ = new Operacion($$[$0-1],null,Operador.TAN, _$[$0-3].first_line, _$[$0-3].first_column);
break;
case 168:
this.$ = new OperacionNativa(OperadorNativa.PARSE,$$[$0-5],$$[$0-1],_$[$0-5].first_line,_$[$0-5].first_column);
break;
case 169:
this.$ = new OperacionNativa(OperadorNativa.TOINT,Tipo.NULL,$$[$0-1],_$[$0-3].first_line,_$[$0-3].first_column);
break;
case 170:
this.$ = new OperacionNativa(OperadorNativa.TODOUBLE,Tipo.NULL,$$[$0-1],_$[$0-3].first_line,_$[$0-3].first_column);
break;
case 171:
this.$ = new OperacionNativa(OperadorNativa.STRING,Tipo.NULL,$$[$0-1],_$[$0-3].first_line,_$[$0-3].first_column);
break;
case 172:
this.$ = new OperacionNativa(OperadorNativa.TYPEOF,Tipo.NULL,$$[$0-1],_$[$0-3].first_line,_$[$0-3].first_column);
break;
case 173:
this.$ = new Primitivo(false, _$[$0].first_line, _$[$0].first_column);
break;
case 174:
this.$ = new Primitivo(true, _$[$0].first_line, _$[$0].first_column);
break;
case 175:
this.$ = new Primitivo(Number($$[$0]), _$[$0].first_line, _$[$0].first_column);
break;
case 176:
let primitivo = new Primitivo(Number($$[$0]), _$[$0].first_line, _$[$0].first_column);primitivo.isFlotante=true;this.$ = primitivo;
break;
case 177: case 178:
this.$ = new Primitivo($$[$0], _$[$0].first_line, _$[$0].first_column);
break;
case 179:
this.$ = new AccesoVariable($$[$0], _$[$0].first_line, _$[$0].first_column);
break;
case 180:
this.$ = new FuncionReturn($$[$0-3],_$[$0-3].first_line,_$[$0-3].first_column,$$[$0-1]);
break;
case 181:
this.$ = new Primitivo(null, _$[$0].first_line, _$[$0].first_column);
break;
}
},
table: [{2:$V0,3:1,4:[1,2],5:3,6:4,7:5,8:6,9:7,10:$V1,11:$V2,19:8,20:$V3,63:10,88:$V4,89:$V5,90:$V6,91:$V7,92:$V8},{1:[3]},{1:[2,1]},{2:$V0,4:[1,19],6:20,7:5,8:6,9:7,10:$V1,11:$V2,19:8,20:$V3,63:10,88:$V4,89:$V5,90:$V6,91:$V7,92:$V8},o($V9,[2,4]),o($V9,[2,5]),o($V9,[2,6]),o($V9,[2,7]),{2:$Va,11:[1,22],61:21,64:23,66:$Vb},{11:$Vc},o($Vd,[2,74]),{11:[1,28],21:[1,27]},{11:[1,29]},{2:$Ve,12:30,13:$Vf},o($Vg,[2,108]),o($Vg,[2,109]),o($Vg,[2,110]),o($Vg,[2,111]),o($Vg,[2,112]),{1:[2,2]},o($V9,[2,3]),{2:$Vh,15:[1,33],18:$Vi,62:34,94:$Vj},o($Vk,$Vl,{22:[1,38]}),{2:$Va,11:$Vm,61:39},o($Vk,[2,115]),{2:$Vn,11:$Vo,19:74,22:$Vp,29:44,64:72,66:$Vb,67:[1,42],81:73,84:41,85:43,88:$V4,89:$V5,90:$V6,91:$V7,92:$V8,95:45,96:46,97:47,98:48,99:49,100:50,101:51,102:52,103:53,104:54,122:$Vq,126:$Vr,127:$Vs,128:$Vt,129:$Vu,130:$Vv,131:$Vw,133:$Vx,134:$Vy,135:$Vz,136:$VA,137:$VB,138:$VC,139:$VD,140:$VE,141:$VF,142:$VG,143:$VH},{2:$Vh,62:79,94:$Vj},{22:[1,80]},{22:[1,81]},{2:$Ve,12:82,13:$Vf},o($V9,[2,9]),{2:$VI,11:$VJ,14:[1,83],16:84,17:85,19:86,88:$V4,89:$V5,90:$V6,91:$V7,92:$V8},o($V9,[2,12]),o($Vd,[2,71]),{15:[1,89]},{11:[1,90]},{2:$Vn,11:$Vo,19:74,22:$Vp,29:91,64:72,66:$Vb,81:73,88:$V4,89:$V5,90:$V6,91:$V7,92:$V8,95:45,96:46,97:47,98:48,99:49,100:50,101:51,102:52,103:53,104:54,122:$Vq,126:$Vr,127:$Vs,128:$Vt,129:$Vu,130:$Vv,131:$Vw,133:$Vx,134:$Vy,135:$Vz,136:$VA,137:$VB,138:$VC,139:$VD,140:$VE,141:$VF,142:$VG,143:$VH},{15:[2,120]},o($VK,$VL,{25:92,26:93,19:94,2:$VM,88:$V4,89:$V5,90:$V6,91:$V7,92:$V8}),{2:$Vh,15:[1,96],18:$Vi,62:97,94:$Vj},o($Vk,$Vl),{18:[1,99],67:[1,98]},o($VN,[2,100]),o($VO,[2,101]),o($VO,[2,103],{46:$VP,110:$VQ,111:$VR,112:$VS,113:$VT,114:$VU,115:$VV,116:$VW,117:$VX,118:$VY,119:$VZ,120:$V_,121:$V$,122:$V01,123:$V11,124:$V21,125:$V31}),o($V41,[2,121],{49:[1,117],50:[1,118]}),o($V41,[2,122]),o($V41,[2,123]),o($V41,[2,124]),o($V41,[2,125]),o($V41,[2,126]),o($V41,[2,127]),o($V41,[2,128]),o($V41,[2,129]),o($V41,[2,130]),o($V41,[2,131]),o($V51,[2,173]),o($V51,[2,174]),o($V51,[2,175]),o($V51,[2,176]),o($V51,[2,177]),o($V51,[2,178]),o($V51,[2,179],{22:[1,119],66:[1,120]}),o($V51,[2,181]),{2:$Vn,11:$Vo,19:74,22:$Vp,29:121,64:72,66:$Vb,81:73,88:$V4,89:$V5,90:$V6,91:$V7,92:$V8,95:45,96:46,97:47,98:48,99:49,100:50,101:51,102:52,103:53,104:54,122:$Vq,126:$Vr,127:$Vs,128:$Vt,129:$Vu,130:$Vv,131:$Vw,133:$Vx,134:$Vy,135:$Vz,136:$VA,137:$VB,138:$VC,139:$VD,140:$VE,141:$VF,142:$VG,143:$VH},{2:$Vn,11:$Vo,19:74,22:$Vp,29:122,64:72,66:$Vb,81:73,88:$V4,89:$V5,90:$V6,91:$V7,92:$V8,95:45,96:46,97:47,98:48,99:49,100:50,101:51,102:52,103:53,104:54,122:$Vq,126:$Vr,127:$Vs,128:$Vt,129:$Vu,130:$Vv,131:$Vw,133:$Vx,134:$Vy,135:$Vz,136:$VA,137:$VB,138:$VC,139:$VD,140:$VE,141:$VF,142:$VG,143:$VH},{2:$Vn,11:$Vo,19:74,22:$Vp,29:123,64:72,66:$Vb,81:73,88:$V4,89:$V5,90:$V6,91:$V7,92:$V8,95:45,96:46,97:47,98:48,99:49,100:50,101:51,102:52,103:53,104:54,122:$Vq,126:$Vr,127:$Vs,128:$Vt,129:$Vu,130:$Vv,131:$Vw,133:$Vx,134:$Vy,135:$Vz,136:$VA,137:$VB,138:$VC,139:$VD,140:$VE,141:$VF,142:$VG,143:$VH},{22:[1,124]},{22:[1,125]},{22:[1,126]},{22:[1,127]},{22:[1,128]},o($V41,[2,132]),o($V41,[2,134]),{46:[1,129]},{22:[1,130]},{22:[1,131]},{22:[1,132]},{22:[1,133]},{15:[1,134]},{23:[1,135]},o($VK,$VL,{26:93,19:94,25:136,2:$VM,88:$V4,89:$V5,90:$V6,91:$V7,92:$V8}),o($V9,[2,8]),{15:[1,137]},{14:[1,138],18:[1,139]},o($V61,[2,13]),{11:[1,140]},{11:[1,141]},o($V61,[2,17]),o($Vd,[2,72]),o($Vk,[2,114]),{15:[2,119],46:$VP,110:$VQ,111:$VR,112:$VS,113:$VT,114:$VU,115:$VV,116:$VW,117:$VX,118:$VY,119:$VZ,120:$V_,121:$V$,122:$V01,123:$V11,124:$V21,125:$V31},{18:$V71,23:[1,142]},o($VK,[2,22]),{11:[1,144]},o($VK,[2,25]),o($Vd,[2,75]),{15:[1,145]},o($VN,[2,99]),{2:$Vn,11:$Vo,19:74,22:$Vp,29:44,64:72,66:$Vb,81:73,85:146,88:$V4,89:$V5,90:$V6,91:$V7,92:$V8,95:45,96:46,97:47,98:48,99:49,100:50,101:51,102:52,103:53,104:54,122:$Vq,126:$Vr,127:$Vs,128:$Vt,129:$Vu,130:$Vv,131:$Vw,133:$Vx,134:$Vy,135:$Vz,136:$VA,137:$VB,138:$VC,139:$VD,140:$VE,141:$VF,142:$VG,143:$VH},{2:$Vn,11:$Vo,19:74,22:$Vp,29:147,64:72,66:$Vb,81:73,88:$V4,89:$V5,90:$V6,91:$V7,92:$V8,95:45,96:46,97:47,98:48,99:49,100:50,101:51,102:52,103:53,104:54,122:$Vq,126:$Vr,127:$Vs,128:$Vt,129:$Vu,130:$Vv,131:$Vw,133:$Vx,134:$Vy,135:$Vz,136:$VA,137:$VB,138:$VC,139:$VD,140:$VE,141:$VF,142:$VG,143:$VH},{2:$Vn,11:$Vo,19:74,22:$Vp,29:148,64:72,66:$Vb,81:73,88:$V4,89:$V5,90:$V6,91:$V7,92:$V8,95:45,96:46,97:47,98:48,99:49,100:50,101:51,102:52,103:53,104:54,122:$Vq,126:$Vr,127:$Vs,128:$Vt,129:$Vu,130:$Vv,131:$Vw,133:$Vx,134:$Vy,135:$Vz,136:$VA,137:$VB,138:$VC,139:$VD,140:$VE,141:$VF,142:$VG,143:$VH},{2:$Vn,11:$Vo,19:74,22:$Vp,29:149,64:72,66:$Vb,81:73,88:$V4,89:$V5,90:$V6,91:$V7,92:$V8,95:45,96:46,97:47,98:48,99:49,100:50,101:51,102:52,103:53,104:54,122:$Vq,126:$Vr,127:$Vs,128:$Vt,129:$Vu,130:$Vv,131:$Vw,133:$Vx,134:$Vy,135:$Vz,136:$VA,137:$VB,138:$VC,139:$VD,140:$VE,141:$VF,142:$VG,143:$VH},{2:$Vn,11:$Vo,19:74,22:$Vp,29:150,64:72,66:$Vb,81:73,88:$V4,89:$V5,90:$V6,91:$V7,92:$V8,95:45,96:46,97:47,98:48,99:49,100:50,101:51,102:52,103:53,104:54,122:$Vq,126:$Vr,127:$Vs,128:$Vt,129:$Vu,130:$Vv,131:$Vw,133:$Vx,134:$Vy,135:$Vz,136:$VA,137:$VB,138:$VC,139:$VD,140:$VE,141:$VF,142:$VG,143:$VH},{2:$Vn,11:$Vo,19:74,22:$Vp,29:151,64:72,66:$Vb,81:73,88:$V4,89:$V5,90:$V6,91:$V7,92:$V8,95:45,96:46,97:47,98:48,99:49,100:50,101:51,102:52,103:53,104:54,122:$Vq,126:$Vr,127:$Vs,128:$Vt,129:$Vu,130:$Vv,131:$Vw,133:$Vx,134:$Vy,135:$Vz,136:$VA,137:$VB,138:$VC,139:$VD,140:$VE,141:$VF,142:$VG,143:$VH},{2:$Vn,11:$Vo,19:74,22:$Vp,29:152,64:72,66:$Vb,81:73,88:$V4,89:$V5,90:$V6,91:$V7,92:$V8,95:45,96:46,97:47,98:48,99:49,100:50,101:51,102:52,103:53,104:54,122:$Vq,126:$Vr,127:$Vs,128:$Vt,129:$Vu,130:$Vv,131:$Vw,133:$Vx,134:$Vy,135:$Vz,136:$VA,137:$VB,138:$VC,139:$VD,140:$VE,141:$VF,142:$VG,143:$VH},{2:$Vn,11:$Vo,19:74,22:$Vp,29:153,64:72,66:$Vb,81:73,88:$V4,89:$V5,90:$V6,91:$V7,92:$V8,95:45,96:46,97:47,98:48,99:49,100:50,101:51,102:52,103:53,104:54,122:$Vq,126:$Vr,127:$Vs,128:$Vt,129:$Vu,130:$Vv,131:$Vw,133:$Vx,134:$Vy,135:$Vz,136:$VA,137:$VB,138:$VC,139:$VD,140:$VE,141:$VF,142:$VG,143:$VH},{2:$Vn,11:$Vo,19:74,22:$Vp,29:154,64:72,66:$Vb,81:73,88:$V4,89:$V5,90:$V6,91:$V7,92:$V8,95:45,96:46,97:47,98:48,99:49,100:50,101:51,102:52,103:53,104:54,122:$Vq,126:$Vr,127:$Vs,128:$Vt,129:$Vu,130:$Vv,131:$Vw,133:$Vx,134:$Vy,135:$Vz,136:$VA,137:$VB,138:$VC,139:$VD,140:$VE,141:$VF,142:$VG,143:$VH},{2:$Vn,11:$Vo,19:74,22:$Vp,29:155,64:72,66:$Vb,81:73,88:$V4,89:$V5,90:$V6,91:$V7,92:$V8,95:45,96:46,97:47,98:48,99:49,100:50,101:51,102:52,103:53,104:54,122:$Vq,126:$Vr,127:$Vs,128:$Vt,129:$Vu,130:$Vv,131:$Vw,133:$Vx,134:$Vy,135:$Vz,136:$VA,137:$VB,138:$VC,139:$VD,140:$VE,141:$VF,142:$VG,143:$VH},{2:$Vn,11:$Vo,19:74,22:$Vp,29:156,64:72,66:$Vb,81:73,88:$V4,89:$V5,90:$V6,91:$V7,92:$V8,95:45,96:46,97:47,98:48,99:49,100:50,101:51,102:52,103:53,104:54,122:$Vq,126:$Vr,127:$Vs,128:$Vt,129:$Vu,130:$Vv,131:$Vw,133:$Vx,134:$Vy,135:$Vz,136:$VA,137:$VB,138:$VC,139:$VD,140:$VE,141:$VF,142:$VG,143:$VH},{2:$Vn,11:$Vo,19:74,22:$Vp,29:157,64:72,66:$Vb,81:73,88:$V4,89:$V5,90:$V6,91:$V7,92:$V8,95:45,96:46,97:47,98:48,99:49,100:50,101:51,102:52,103:53,104:54,122:$Vq,126:$Vr,127:$Vs,128:$Vt,129:$Vu,130:$Vv,131:$Vw,133:$Vx,134:$Vy,135:$Vz,136:$VA,137:$VB,138:$VC,139:$VD,140:$VE,141:$VF,142:$VG,143:$VH},{2:$Vn,11:$Vo,19:74,22:$Vp,29:158,64:72,66:$Vb,81:73,88:$V4,89:$V5,90:$V6,91:$V7,92:$V8,95:45,96:46,97:47,98:48,99:49,100:50,101:51,102:52,103:53,104:54,122:$Vq,126:$Vr,127:$Vs,128:$Vt,129:$Vu,130:$Vv,131:$Vw,133:$Vx,134:$Vy,135:$Vz,136:$VA,137:$VB,138:$VC,139:$VD,140:$VE,141:$VF,142:$VG,143:$VH},{2:$Vn,11:$Vo,19:74,22:$Vp,29:159,64:72,66:$Vb,81:73,88:$V4,89:$V5,90:$V6,91:$V7,92:$V8,95:45,96:46,97:47,98:48,99:49,100:50,101:51,102:52,103:53,104:54,122:$Vq,126:$Vr,127:$Vs,128:$Vt,129:$Vu,130:$Vv,131:$Vw,133:$Vx,134:$Vy,135:$Vz,136:$VA,137:$VB,138:$VC,139:$VD,140:$VE,141:$VF,142:$VG,143:$VH},{2:$Vn,11:$Vo,19:74,22:$Vp,29:160,64:72,66:$Vb,81:73,88:$V4,89:$V5,90:$V6,91:$V7,92:$V8,95:45,96:46,97:47,98:48,99:49,100:50,101:51,102:52,103:53,104:54,122:$Vq,126:$Vr,127:$Vs,128:$Vt,129:$Vu,130:$Vv,131:$Vw,133:$Vx,134:$Vy,135:$Vz,136:$VA,137:$VB,138:$VC,139:$VD,140:$VE,141:$VF,142:$VG,143:$VH},{2:$Vn,11:$Vo,19:74,22:$Vp,29:161,64:72,66:$Vb,81:73,88:$V4,89:$V5,90:$V6,91:$V7,92:$V8,95:45,96:46,97:47,98:48,99:49,100:50,101:51,102:52,103:53,104:54,122:$Vq,126:$Vr,127:$Vs,128:$Vt,129:$Vu,130:$Vv,131:$Vw,133:$Vx,134:$Vy,135:$Vz,136:$VA,137:$VB,138:$VC,139:$VD,140:$VE,141:$VF,142:$VG,143:$VH},{2:$Vn,11:$Vo,19:74,22:$Vp,29:162,64:72,66:$Vb,81:73,88:$V4,89:$V5,90:$V6,91:$V7,92:$V8,95:45,96:46,97:47,98:48,99:49,100:50,101:51,102:52,103:53,104:54,122:$Vq,126:$Vr,127:$Vs,128:$Vt,129:$Vu,130:$Vv,131:$Vw,133:$Vx,134:$Vy,135:$Vz,136:$VA,137:$VB,138:$VC,139:$VD,140:$VE,141:$VF,142:$VG,143:$VH},{11:[1,163],48:[1,165],105:[1,164],106:[1,166],107:[1,167],108:[1,168],109:[1,169]},o($V41,[2,161]),o($V41,[2,162]),o($VK,$V81,{95:45,96:46,97:47,98:48,99:49,100:50,101:51,102:52,103:53,104:54,64:72,81:73,19:74,27:170,28:171,29:172,2:$Vn,11:$Vo,22:$Vp,66:$Vb,88:$V4,89:$V5,90:$V6,91:$V7,92:$V8,122:$Vq,126:$Vr,127:$Vs,128:$Vt,129:$Vu,130:$Vv,131:$Vw,133:$Vx,134:$Vy,135:$Vz,136:$VA,137:$VB,138:$VC,139:$VD,140:$VE,141:$VF,142:$VG,143:$VH}),{2:$Vn,11:$Vo,19:74,22:$Vp,29:173,64:72,66:$Vb,81:73,86:$V91,88:$V4,89:$V5,90:$V6,91:$V7,92:$V8,95:45,96:46,97:47,98:48,99:49,100:50,101:51,102:52,103:53,104:54,122:$Vq,126:$Vr,127:$Vs,128:$Vt,129:$Vu,130:$Vv,131:$Vw,133:$Vx,134:$Vy,135:$Vz,136:$VA,137:$VB,138:$VC,139:$VD,140:$VE,141:$VF,142:$VG,143:$VH},{23:[1,175],46:$VP,110:$VQ,111:$VR,112:$VS,113:$VT,114:$VU,115:$VV,116:$VW,117:$VX,118:$VY,119:$VZ,120:$V_,121:$V$,122:$V01,123:$V11,124:$V21,125:$V31},o($Va1,[2,159],{46:$VP}),o($Va1,[2,160],{46:$VP}),{2:$Vn,11:$Vo,19:74,22:$Vp,29:176,64:72,66:$Vb,81:73,88:$V4,89:$V5,90:$V6,91:$V7,92:$V8,95:45,96:46,97:47,98:48,99:49,100:50,101:51,102:52,103:53,104:54,122:$Vq,126:$Vr,127:$Vs,128:$Vt,129:$Vu,130:$Vv,131:$Vw,133:$Vx,134:$Vy,135:$Vz,136:$VA,137:$VB,138:$VC,139:$VD,140:$VE,141:$VF,142:$VG,143:$VH},{2:$Vn,11:$Vo,19:74,22:$Vp,29:177,64:72,66:$Vb,81:73,88:$V4,89:$V5,90:$V6,91:$V7,92:$V8,95:45,96:46,97:47,98:48,99:49,100:50,101:51,102:52,103:53,104:54,122:$Vq,126:$Vr,127:$Vs,128:$Vt,129:$Vu,130:$Vv,131:$Vw,133:$Vx,134:$Vy,135:$Vz,136:$VA,137:$VB,138:$VC,139:$VD,140:$VE,141:$VF,142:$VG,143:$VH},{2:$Vn,11:$Vo,19:74,22:$Vp,29:178,64:72,66:$Vb,81:73,88:$V4,89:$V5,90:$V6,91:$V7,92:$V8,95:45,96:46,97:47,98:48,99:49,100:50,101:51,102:52,103:53,104:54,122:$Vq,126:$Vr,127:$Vs,128:$Vt,129:$Vu,130:$Vv,131:$Vw,133:$Vx,134:$Vy,135:$Vz,136:$VA,137:$VB,138:$VC,139:$VD,140:$VE,141:$VF,142:$VG,143:$VH},{2:$Vn,11:$Vo,19:74,22:$Vp,29:179,64:72,66:$Vb,81:73,88:$V4,89:$V5,90:$V6,91:$V7,92:$V8,95:45,96:46,97:47,98:48,99:49,100:50,101:51,102:52,103:53,104:54,122:$Vq,126:$Vr,127:$Vs,128:$Vt,129:$Vu,130:$Vv,131:$Vw,133:$Vx,134:$Vy,135:$Vz,136:$VA,137:$VB,138:$VC,139:$VD,140:$VE,141:$VF,142:$VG,143:$VH},{2:$Vn,11:$Vo,19:74,22:$Vp,29:180,64:72,66:$Vb,81:73,88:$V4,89:$V5,90:$V6,91:$V7,92:$V8,95:45,96:46,97:47,98:48,99:49,100:50,101:51,102:52,103:53,104:54,122:$Vq,126:$Vr,127:$Vs,128:$Vt,129:$Vu,130:$Vv,131:$Vw,133:$Vx,134:$Vy,135:$Vz,136:$VA,137:$VB,138:$VC,139:$VD,140:$VE,141:$VF,142:$VG,143:$VH},{132:[1,181]},{2:$Vn,11:$Vo,19:74,22:$Vp,29:182,64:72,66:$Vb,81:73,88:$V4,89:$V5,90:$V6,91:$V7,92:$V8,95:45,96:46,97:47,98:48,99:49,100:50,101:51,102:52,103:53,104:54,122:$Vq,126:$Vr,127:$Vs,128:$Vt,129:$Vu,130:$Vv,131:$Vw,133:$Vx,134:$Vy,135:$Vz,136:$VA,137:$VB,138:$VC,139:$VD,140:$VE,141:$VF,142:$VG,143:$VH},{2:$Vn,11:$Vo,19:74,22:$Vp,29:183,64:72,66:$Vb,81:73,88:$V4,89:$V5,90:$V6,91:$V7,92:$V8,95:45,96:46,97:47,98:48,99:49,100:50,101:51,102:52,103:53,104:54,122:$Vq,126:$Vr,127:$Vs,128:$Vt,129:$Vu,130:$Vv,131:$Vw,133:$Vx,134:$Vy,135:$Vz,136:$VA,137:$VB,138:$VC,139:$VD,140:$VE,141:$VF,142:$VG,143:$VH},{2:$Vn,11:$Vo,19:74,22:$Vp,29:184,64:72,66:$Vb,81:73,88:$V4,89:$V5,90:$V6,91:$V7,92:$V8,95:45,96:46,97:47,98:48,99:49,100:50,101:51,102:52,103:53,104:54,122:$Vq,126:$Vr,127:$Vs,128:$Vt,129:$Vu,130:$Vv,131:$Vw,133:$Vx,134:$Vy,135:$Vz,136:$VA,137:$VB,138:$VC,139:$VD,140:$VE,141:$VF,142:$VG,143:$VH},{2:$Vn,11:$Vo,19:74,22:$Vp,29:185,64:72,66:$Vb,81:73,88:$V4,89:$V5,90:$V6,91:$V7,92:$V8,95:45,96:46,97:47,98:48,99:49,100:50,101:51,102:52,103:53,104:54,122:$Vq,126:$Vr,127:$Vs,128:$Vt,129:$Vu,130:$Vv,131:$Vw,133:$Vx,134:$Vy,135:$Vz,136:$VA,137:$VB,138:$VC,139:$VD,140:$VE,141:$VF,142:$VG,143:$VH},o($Vd,[2,73]),{2:$Vb1,13:$Vc1,24:186},{18:$V71,23:[1,189]},o($V9,[2,10]),{15:[1,190]},{2:$VI,11:$VJ,17:191,19:86,88:$V4,89:$V5,90:$V6,91:$V7,92:$V8},o($V61,[2,15]),o($V61,[2,16]),{2:$Vb1,13:$Vc1,24:192},{2:$VM,19:94,26:193,88:$V4,89:$V5,90:$V6,91:$V7,92:$V8},o($VK,[2,24]),o($Vd,[2,76]),o($VO,[2,102]),o([15,18,23,57,67,110,111,112],[2,143],{46:$VP,113:$VT,114:$VU,115:$VV,116:$VW,117:$VX,118:$VY,119:$VZ,120:$V_,121:$V$,122:$V01,123:$V11,124:$V21,125:$V31}),o($Vd1,[2,144],{46:$VP,111:$VR,113:$VT,114:$VU,115:$VV,116:$VW,117:$VX,118:$VY,119:$VZ,120:$V_,121:$V$,122:$V01,123:$V11,124:$V21,125:$V31}),o($Ve1,[2,151],{46:$VP,124:$V21}),o($Ve1,[2,152],{46:$VP,124:$V21}),o($Vf1,[2,153],{46:$VP,119:$VZ,120:$V_,124:$V21,125:$V31}),o($Vf1,[2,154],{46:$VP,119:$VZ,120:$V_,124:$V21,125:$V31}),o($Vf1,[2,155],{46:$VP,119:$VZ,120:$V_,124:$V21,125:$V31}),o($Va1,[2,156],{46:$VP}),o($Ve1,[2,157],{46:$VP,124:$V21}),o($Vg1,[2,145],{46:$VP,119:$VZ,120:$V_,121:$V$,122:$V01,123:$V11,124:$V21,125:$V31}),o($Vg1,[2,146],{46:$VP,119:$VZ,120:$V_,121:$V$,122:$V01,123:$V11,124:$V21,125:$V31}),o($Vg1,[2,147],{46:$VP,119:$VZ,120:$V_,121:$V$,122:$V01,123:$V11,124:$V21,125:$V31}),o($Vg1,[2,148],{46:$VP,119:$VZ,120:$V_,121:$V$,122:$V01,123:$V11,124:$V21,125:$V31}),o($Vg1,[2,149],{46:$VP,119:$VZ,120:$V_,121:$V$,122:$V01,123:$V11,124:$V21,125:$V31}),o($Vg1,[2,150],{46:$VP,119:$VZ,120:$V_,121:$V$,122:$V01,123:$V11,124:$V21,125:$V31}),{46:$VP,57:[1,194],110:$VQ,111:$VR,112:$VS,113:$VT,114:$VU,115:$VV,116:$VW,117:$VX,118:$VY,119:$VZ,120:$V_,121:$V$,122:$V01,123:$V11,124:$V21,125:$V31},o($V41,[2,135]),{22:[1,195]},{22:[1,196]},{22:[1,197]},{22:[1,198]},{22:[1,199]},{22:[1,200]},{18:$Vh1,23:[1,201]},o($VK,[2,27]),o($VK,[2,29],{46:$VP,110:$VQ,111:$VR,112:$VS,113:$VT,114:$VU,115:$VV,116:$VW,117:$VX,118:$VY,119:$VZ,120:$V_,121:$V$,122:$V01,123:$V11,124:$V21,125:$V31}),{46:$VP,57:$Vi1,67:[1,203],110:$VQ,111:$VR,112:$VS,113:$VT,114:$VU,115:$VV,116:$VW,117:$VX,118:$VY,119:$VZ,120:$V_,121:$V$,122:$V01,123:$V11,124:$V21,125:$V31},{57:[1,205]},o($V41,[2,158]),{18:[1,206],46:$VP,110:$VQ,111:$VR,112:$VS,113:$VT,114:$VU,115:$VV,116:$VW,117:$VX,118:$VY,119:$VZ,120:$V_,121:$V$,122:$V01,123:$V11,124:$V21,125:$V31},{23:[1,207],46:$VP,110:$VQ,111:$VR,112:$VS,113:$VT,114:$VU,115:$VV,116:$VW,117:$VX,118:$VY,119:$VZ,120:$V_,121:$V$,122:$V01,123:$V11,124:$V21,125:$V31},{23:[1,208],46:$VP,110:$VQ,111:$VR,112:$VS,113:$VT,114:$VU,115:$VV,116:$VW,117:$VX,118:$VY,119:$VZ,120:$V_,121:$V$,122:$V01,123:$V11,124:$V21,125:$V31},{23:[1,209],46:$VP,110:$VQ,111:$VR,112:$VS,113:$VT,114:$VU,115:$VV,116:$VW,117:$VX,118:$VY,119:$VZ,120:$V_,121:$V$,122:$V01,123:$V11,124:$V21,125:$V31},{23:[1,210],46:$VP,110:$VQ,111:$VR,112:$VS,113:$VT,114:$VU,115:$VV,116:$VW,117:$VX,118:$VY,119:$VZ,120:$V_,121:$V$,122:$V01,123:$V11,124:$V21,125:$V31},{22:[1,211]},{23:[1,212],46:$VP,110:$VQ,111:$VR,112:$VS,113:$VT,114:$VU,115:$VV,116:$VW,117:$VX,118:$VY,119:$VZ,120:$V_,121:$V$,122:$V01,123:$V11,124:$V21,125:$V31},{23:[1,213],46:$VP,110:$VQ,111:$VR,112:$VS,113:$VT,114:$VU,115:$VV,116:$VW,117:$VX,118:$VY,119:$VZ,120:$V_,121:$V$,122:$V01,123:$V11,124:$V21,125:$V31},{23:[1,214],46:$VP,110:$VQ,111:$VR,112:$VS,113:$VT,114:$VU,115:$VV,116:$VW,117:$VX,118:$VY,119:$VZ,120:$V_,121:$V$,122:$V01,123:$V11,124:$V21,125:$V31},{23:[1,215],46:$VP,110:$VQ,111:$VR,112:$VS,113:$VT,114:$VU,115:$VV,116:$VW,117:$VX,118:$VY,119:$VZ,120:$V_,121:$V$,122:$V01,123:$V11,124:$V21,125:$V31},o($V9,[2,18]),{2:$Vj1,7:219,11:$Vk1,14:[1,217],19:232,30:216,31:218,32:220,33:221,34:222,35:223,36:224,37:225,38:226,39:227,40:228,41:229,42:230,43:$Vl1,44:$Vm1,45:$Vn1,51:$Vo1,63:10,65:234,68:$Vp1,70:$Vq1,72:$Vr1,78:$Vs1,82:$Vt1,83:$Vu1,88:$V4,89:$V5,90:$V6,91:$V7,92:$V8},o($Vv1,[2,32]),{2:$Vb1,13:$Vc1,24:245},o($V9,[2,11]),o($V61,[2,14]),o($V9,[2,19]),o($VK,[2,21]),{2:$Vn,11:$Vo,19:74,22:$Vp,29:246,64:72,66:$Vb,81:73,88:$V4,89:$V5,90:$V6,91:$V7,92:$V8,95:45,96:46,97:47,98:48,99:49,100:50,101:51,102:52,103:53,104:54,122:$Vq,126:$Vr,127:$Vs,128:$Vt,129:$Vu,130:$Vv,131:$Vw,133:$Vx,134:$Vy,135:$Vz,136:$VA,137:$VB,138:$VC,139:$VD,140:$VE,141:$VF,142:$VG,143:$VH},{23:[1,247]},{23:[1,248]},{23:[1,249]},{23:[1,250]},{2:$Vn,11:$Vo,19:74,22:$Vp,29:251,64:72,66:$Vb,81:73,88:$V4,89:$V5,90:$V6,91:$V7,92:$V8,95:45,96:46,97:47,98:48,99:49,100:50,101:51,102:52,103:53,104:54,122:$Vq,126:$Vr,127:$Vs,128:$Vt,129:$Vu,130:$Vv,131:$Vw,133:$Vx,134:$Vy,135:$Vz,136:$VA,137:$VB,138:$VC,139:$VD,140:$VE,141:$VF,142:$VG,143:$VH},{2:$Vn,11:$Vo,19:74,22:$Vp,29:252,64:72,66:$Vb,81:73,88:$V4,89:$V5,90:$V6,91:$V7,92:$V8,95:45,96:46,97:47,98:48,99:49,100:50,101:51,102:52,103:53,104:54,122:$Vq,126:$Vr,127:$Vs,128:$Vt,129:$Vu,130:$Vv,131:$Vw,133:$Vx,134:$Vy,135:$Vz,136:$VA,137:$VB,138:$VC,139:$VD,140:$VE,141:$VF,142:$VG,143:$VH},o($V51,[2,180]),{2:$Vn,11:$Vo,19:74,22:$Vp,28:253,29:172,64:72,66:$Vb,81:73,88:$V4,89:$V5,90:$V6,91:$V7,92:$V8,95:45,96:46,97:47,98:48,99:49,100:50,101:51,102:52,103:53,104:54,122:$Vq,126:$Vr,127:$Vs,128:$Vt,129:$Vu,130:$Vv,131:$Vw,133:$Vx,134:$Vy,135:$Vz,136:$VA,137:$VB,138:$VC,139:$VD,140:$VE,141:$VF,142:$VG,143:$VH},o($V41,[2,133]),{2:$Vn,11:$Vo,19:74,22:$Vp,29:254,64:72,66:$Vb,81:73,87:[1,255],88:$V4,89:$V5,90:$V6,91:$V7,92:$V8,95:45,96:46,97:47,98:48,99:49,100:50,101:51,102:52,103:53,104:54,122:$Vq,126:$Vr,127:$Vs,128:$Vt,129:$Vu,130:$Vv,131:$Vw,133:$Vx,134:$Vy,135:$Vz,136:$VA,137:$VB,138:$VC,139:$VD,140:$VE,141:$VF,142:$VG,143:$VH},{2:$Vn,11:$Vo,19:74,22:$Vp,29:256,64:72,66:$Vb,81:73,87:[1,257],88:$V4,89:$V5,90:$V6,91:$V7,92:$V8,95:45,96:46,97:47,98:48,99:49,100:50,101:51,102:52,103:53,104:54,122:$Vq,126:$Vr,127:$Vs,128:$Vt,129:$Vu,130:$Vv,131:$Vw,133:$Vx,134:$Vy,135:$Vz,136:$VA,137:$VB,138:$VC,139:$VD,140:$VE,141:$VF,142:$VG,143:$VH},{2:$Vn,11:$Vo,19:74,22:$Vp,29:258,64:72,66:$Vb,81:73,88:$V4,89:$V5,90:$V6,91:$V7,92:$V8,95:45,96:46,97:47,98:48,99:49,100:50,101:51,102:52,103:53,104:54,122:$Vq,126:$Vr,127:$Vs,128:$Vt,129:$Vu,130:$Vv,131:$Vw,133:$Vx,134:$Vy,135:$Vz,136:$VA,137:$VB,138:$VC,139:$VD,140:$VE,141:$VF,142:$VG,143:$VH},o($V41,[2,164]),o($V41,[2,165]),o($V41,[2,166]),o($V41,[2,167]),{2:$Vn,11:$Vo,19:74,22:$Vp,29:259,64:72,66:$Vb,81:73,88:$V4,89:$V5,90:$V6,91:$V7,92:$V8,95:45,96:46,97:47,98:48,99:49,100:50,101:51,102:52,103:53,104:54,122:$Vq,126:$Vr,127:$Vs,128:$Vt,129:$Vu,130:$Vv,131:$Vw,133:$Vx,134:$Vy,135:$Vz,136:$VA,137:$VB,138:$VC,139:$VD,140:$VE,141:$VF,142:$VG,143:$VH},o($V41,[2,169]),o($V41,[2,170]),o($V41,[2,171]),o($V41,[2,172]),{2:$Vj1,7:219,11:$Vk1,14:[1,260],19:232,31:261,32:220,33:221,34:222,35:223,36:224,37:225,38:226,39:227,40:228,41:229,42:230,43:$Vl1,44:$Vm1,45:$Vn1,51:$Vo1,63:10,65:234,68:$Vp1,70:$Vq1,72:$Vr1,78:$Vs1,82:$Vt1,83:$Vu1,88:$V4,89:$V5,90:$V6,91:$V7,92:$V8},o($Vv1,[2,31]),o($Vw1,[2,34]),o($Vw1,[2,35]),o($Vw1,[2,36]),o($Vw1,[2,37]),o($Vw1,[2,38]),o($Vw1,[2,39]),o($Vw1,[2,40]),o($Vw1,[2,41]),o($Vw1,[2,42]),o($Vw1,[2,43]),o($Vw1,[2,44]),o($Vw1,[2,45]),o($Vw1,[2,46]),o($Vw1,[2,58],{15:[1,262],23:[1,263]}),{2:$Va,11:$Vm,61:21,64:23,66:$Vb},o($Vx1,$Vy1,{93:269,11:$Vc,22:[1,265],46:[1,268],49:[1,266],50:[1,267],66:[1,264]}),{2:$Vh,62:270,94:$Vj},{22:[1,271]},{22:[1,272]},{22:[1,273]},{11:[1,275],22:[1,274]},{22:[1,276]},{2:$Vb1,13:$Vc1,24:277},{22:[1,278]},{2:$Vn,11:$Vo,15:[1,279],19:74,22:$Vp,29:280,64:72,66:$Vb,81:73,88:$V4,89:$V5,90:$V6,91:$V7,92:$V8,95:45,96:46,97:47,98:48,99:49,100:50,101:51,102:52,103:53,104:54,122:$Vq,126:$Vr,127:$Vs,128:$Vt,129:$Vu,130:$Vv,131:$Vw,133:$Vx,134:$Vy,135:$Vz,136:$VA,137:$VB,138:$VC,139:$VD,140:$VE,141:$VF,142:$VG,143:$VH},{15:[1,281]},{15:[1,282]},o($V9,[2,20]),o($Vd1,[2,142],{46:$VP,111:$VR,113:$VT,114:$VU,115:$VV,116:$VW,117:$VX,118:$VY,119:$VZ,120:$V_,121:$V$,122:$V01,123:$V11,124:$V21,125:$V31}),o($V41,[2,136]),o($V41,[2,137]),o($V41,[2,138]),o($V41,[2,139]),{23:[1,283],46:$VP,110:$VQ,111:$VR,112:$VS,113:$VT,114:$VU,115:$VV,116:$VW,117:$VX,118:$VY,119:$VZ,120:$V_,121:$V$,122:$V01,123:$V11,124:$V21,125:$V31},{18:[1,284],46:$VP,110:$VQ,111:$VR,112:$VS,113:$VT,114:$VU,115:$VV,116:$VW,117:$VX,118:$VY,119:$VZ,120:$V_,121:$V$,122:$V01,123:$V11,124:$V21,125:$V31},o($VK,[2,26]),{46:$VP,67:[1,285],110:$VQ,111:$VR,112:$VS,113:$VT,114:$VU,115:$VV,116:$VW,117:$VX,118:$VY,119:$VZ,120:$V_,121:$V$,122:$V01,123:$V11,124:$V21,125:$V31},{67:[1,286]},{46:$VP,67:[1,287],110:$VQ,111:$VR,112:$VS,113:$VT,114:$VU,115:$VV,116:$VW,117:$VX,118:$VY,119:$VZ,120:$V_,121:$V$,122:$V01,123:$V11,124:$V21,125:$V31},{67:[1,288]},{23:[1,289],46:$VP,110:$VQ,111:$VR,112:$VS,113:$VT,114:$VU,115:$VV,116:$VW,117:$VX,118:$VY,119:$VZ,120:$V_,121:$V$,122:$V01,123:$V11,124:$V21,125:$V31},{23:[1,290],46:$VP,110:$VQ,111:$VR,112:$VS,113:$VT,114:$VU,115:$VV,116:$VW,117:$VX,118:$VY,119:$VZ,120:$V_,121:$V$,122:$V01,123:$V11,124:$V21,125:$V31},o($Vv1,[2,30]),o($Vw1,[2,33]),o($Vw1,[2,47]),o($Vw1,[2,81]),{2:$Vn,11:$Vo,19:74,22:$Vp,29:291,64:72,66:$Vb,81:73,88:$V4,89:$V5,90:$V6,91:$V7,92:$V8,95:45,96:46,97:47,98:48,99:49,100:50,101:51,102:52,103:53,104:54,122:$Vq,126:$Vr,127:$Vs,128:$Vt,129:$Vu,130:$Vv,131:$Vw,133:$Vx,134:$Vy,135:$Vz,136:$VA,137:$VB,138:$VC,139:$VD,140:$VE,141:$VF,142:$VG,143:$VH},o($VK,$V81,{95:45,96:46,97:47,98:48,99:49,100:50,101:51,102:52,103:53,104:54,64:72,81:73,19:74,28:171,29:172,27:292,2:$Vn,11:$Vo,22:$Vp,66:$Vb,88:$V4,89:$V5,90:$V6,91:$V7,92:$V8,122:$Vq,126:$Vr,127:$Vs,128:$Vt,129:$Vu,130:$Vv,131:$Vw,133:$Vx,134:$Vy,135:$Vz,136:$VA,137:$VB,138:$VC,139:$VD,140:$VE,141:$VF,142:$VG,143:$VH}),{15:[1,293]},{15:[1,294]},{11:$Vz1,47:[1,295],48:[1,296]},o($Vx1,[2,116]),{15:[1,298]},{2:$Vn,11:$Vo,19:74,22:$Vp,29:300,64:72,66:$Vb,69:299,81:73,88:$V4,89:$V5,90:$V6,91:$V7,92:$V8,95:45,96:46,97:47,98:48,99:49,100:50,101:51,102:52,103:53,104:54,122:$Vq,126:$Vr,127:$Vs,128:$Vt,129:$Vu,130:$Vv,131:$Vw,133:$Vx,134:$Vy,135:$Vz,136:$VA,137:$VB,138:$VC,139:$VD,140:$VE,141:$VF,142:$VG,143:$VH},{2:$Vn,11:$Vo,19:74,22:$Vp,29:300,64:72,66:$Vb,69:301,81:73,88:$V4,89:$V5,90:$V6,91:$V7,92:$V8,95:45,96:46,97:47,98:48,99:49,100:50,101:51,102:52,103:53,104:54,122:$Vq,126:$Vr,127:$Vs,128:$Vt,129:$Vu,130:$Vv,131:$Vw,133:$Vx,134:$Vy,135:$Vz,136:$VA,137:$VB,138:$VC,139:$VD,140:$VE,141:$VF,142:$VG,143:$VH},{2:$Vn,11:$Vo,19:74,22:$Vp,29:302,64:72,66:$Vb,81:73,88:$V4,89:$V5,90:$V6,91:$V7,92:$V8,95:45,96:46,97:47,98:48,99:49,100:50,101:51,102:52,103:53,104:54,122:$Vq,126:$Vr,127:$Vs,128:$Vt,129:$Vu,130:$Vv,131:$Vw,133:$Vx,134:$Vy,135:$Vz,136:$VA,137:$VB,138:$VC,139:$VD,140:$VE,141:$VF,142:$VG,143:$VH},{11:[1,306],19:304,65:305,79:303,88:$V4,89:$V5,90:$V6,91:$V7,92:$V8},{80:[1,307]},{2:$Vn,11:$Vo,19:74,22:$Vp,29:308,64:72,66:$Vb,81:73,88:$V4,89:$V5,90:$V6,91:$V7,92:$V8,95:45,96:46,97:47,98:48,99:49,100:50,101:51,102:52,103:53,104:54,122:$Vq,126:$Vr,127:$Vs,128:$Vt,129:$Vu,130:$Vv,131:$Vw,133:$Vx,134:$Vy,135:$Vz,136:$VA,137:$VB,138:$VC,139:$VD,140:$VE,141:$VF,142:$VG,143:$VH},{82:[1,309]},{2:$Vn,11:$Vo,19:74,22:$Vp,29:310,64:72,66:$Vb,81:73,88:$V4,89:$V5,90:$V6,91:$V7,92:$V8,95:45,96:46,97:47,98:48,99:49,100:50,101:51,102:52,103:53,104:54,122:$Vq,126:$Vr,127:$Vs,128:$Vt,129:$Vu,130:$Vv,131:$Vw,133:$Vx,134:$Vy,135:$Vz,136:$VA,137:$VB,138:$VC,139:$VD,140:$VE,141:$VF,142:$VG,143:$VH},o($Vw1,[2,50]),{15:[1,311],46:$VP,110:$VQ,111:$VR,112:$VS,113:$VT,114:$VU,115:$VV,116:$VW,117:$VX,118:$VY,119:$VZ,120:$V_,121:$V$,122:$V01,123:$V11,124:$V21,125:$V31},o($Vw1,[2,48]),o($Vw1,[2,49]),o($V41,[2,140]),{2:$Vn,11:$Vo,19:74,22:$Vp,29:312,64:72,66:$Vb,81:73,88:$V4,89:$V5,90:$V6,91:$V7,92:$V8,95:45,96:46,97:47,98:48,99:49,100:50,101:51,102:52,103:53,104:54,122:$Vq,126:$Vr,127:$Vs,128:$Vt,129:$Vu,130:$Vv,131:$Vw,133:$Vx,134:$Vy,135:$Vz,136:$VA,137:$VB,138:$VC,139:$VD,140:$VE,141:$VF,142:$VG,143:$VH},o($VA1,[2,104]),o($VA1,[2,107]),o($VA1,[2,105]),o($VA1,[2,106]),o($V41,[2,163]),o($V41,[2,168]),{46:$VP,67:[1,313],110:$VQ,111:$VR,112:$VS,113:$VT,114:$VU,115:$VV,116:$VW,117:$VX,118:$VY,119:$VZ,120:$V_,121:$V$,122:$V01,123:$V11,124:$V21,125:$V31},{18:$Vh1,23:[1,314]},o($Vw1,[2,54]),o($Vw1,[2,55]),{22:[1,315]},{22:[1,316]},o($Vx1,$Vy1,{93:317,46:$VB1}),o($Vw1,[2,77]),{23:[1,319]},{18:$VC1,23:$VD1,46:$VP,71:320,110:$VQ,111:$VR,112:$VS,113:$VT,114:$VU,115:$VV,116:$VW,117:$VX,118:$VY,119:$VZ,120:$V_,121:$V$,122:$V01,123:$V11,124:$V21,125:$V31},{23:[1,322]},{23:[1,323],46:$VP,110:$VQ,111:$VR,112:$VS,113:$VT,114:$VU,115:$VV,116:$VW,117:$VX,118:$VY,119:$VZ,120:$V_,121:$V$,122:$V01,123:$V11,124:$V21,125:$V31},{15:[1,324]},{2:$Va,11:$Vm,61:325},{2:$Vh,62:326,94:$Vj},o($Vx1,$Vy1,{93:269,46:$VB1}),{11:[1,327],64:328,66:$Vb,81:329},{23:[1,330],46:$VP,110:$VQ,111:$VR,112:$VS,113:$VT,114:$VU,115:$VV,116:$VW,117:$VX,118:$VY,119:$VZ,120:$V_,121:$V$,122:$V01,123:$V11,124:$V21,125:$V31},{22:[1,331]},{23:[1,332],46:$VP,110:$VQ,111:$VR,112:$VS,113:$VT,114:$VU,115:$VV,116:$VW,117:$VX,118:$VY,119:$VZ,120:$V_,121:$V$,122:$V01,123:$V11,124:$V21,125:$V31},o($Vw1,[2,51]),{23:[1,333],46:$VP,110:$VQ,111:$VR,112:$VS,113:$VT,114:$VU,115:$VV,116:$VW,117:$VX,118:$VY,119:$VZ,120:$V_,121:$V$,122:$V01,123:$V11,124:$V21,125:$V31},{2:$Vh,62:334,94:$Vj},{15:[1,335]},{2:$Vn,11:$Vo,19:74,22:$Vp,29:336,64:72,66:$Vb,81:73,88:$V4,89:$V5,90:$V6,91:$V7,92:$V8,95:45,96:46,97:47,98:48,99:49,100:50,101:51,102:52,103:53,104:54,122:$Vq,126:$Vr,127:$Vs,128:$Vt,129:$Vu,130:$Vv,131:$Vw,133:$Vx,134:$Vy,135:$Vz,136:$VA,137:$VB,138:$VC,139:$VD,140:$VE,141:$VF,142:$VG,143:$VH},{23:[1,337]},o($Vx1,[2,117]),{11:$Vz1},{15:[1,338]},{23:[2,82]},{2:$Vn,11:$Vo,19:74,22:$Vp,29:339,64:72,66:$Vb,81:73,88:$V4,89:$V5,90:$V6,91:$V7,92:$V8,95:45,96:46,97:47,98:48,99:49,100:50,101:51,102:52,103:53,104:54,122:$Vq,126:$Vr,127:$Vs,128:$Vt,129:$Vu,130:$Vv,131:$Vw,133:$Vx,134:$Vy,135:$Vz,136:$VA,137:$VB,138:$VC,139:$VD,140:$VE,141:$VF,142:$VG,143:$VH},{15:[1,340]},{2:$Vb1,13:$Vc1,24:341},{2:$Vn,11:$Vo,19:74,22:$Vp,29:342,64:72,66:$Vb,81:73,88:$V4,89:$V5,90:$V6,91:$V7,92:$V8,95:45,96:46,97:47,98:48,99:49,100:50,101:51,102:52,103:53,104:54,122:$Vq,126:$Vr,127:$Vs,128:$Vt,129:$Vu,130:$Vv,131:$Vw,133:$Vx,134:$Vy,135:$Vz,136:$VA,137:$VB,138:$VC,139:$VD,140:$VE,141:$VF,142:$VG,143:$VH},{2:$Vh,18:$Vi,62:343,94:$Vj},{15:[2,98]},{2:$Vb1,13:$Vc1,24:344,66:[1,345]},{2:$Vb1,13:$Vc1,24:346},{2:$Vb1,13:$Vc1,24:347},{2:$Vb1,13:$Vc1,24:348},{2:$Vn,11:$Vo,19:74,22:$Vp,29:349,64:72,66:$Vb,81:73,88:$V4,89:$V5,90:$V6,91:$V7,92:$V8,95:45,96:46,97:47,98:48,99:49,100:50,101:51,102:52,103:53,104:54,122:$Vq,126:$Vr,127:$Vs,128:$Vt,129:$Vu,130:$Vv,131:$Vw,133:$Vx,134:$Vy,135:$Vz,136:$VA,137:$VB,138:$VC,139:$VD,140:$VE,141:$VF,142:$VG,143:$VH},{2:[1,352],13:[1,351],52:350},o($V41,[2,141]),{15:[1,353]},o($Vw1,[2,56]),{23:[1,354],46:$VP,110:$VQ,111:$VR,112:$VS,113:$VT,114:$VU,115:$VV,116:$VW,117:$VX,118:$VY,119:$VZ,120:$V_,121:$V$,122:$V01,123:$V11,124:$V21,125:$V31},{15:[1,355]},o($Vw1,[2,79]),{18:$VC1,23:$VD1,46:$VP,71:356,110:$VQ,111:$VR,112:$VS,113:$VT,114:$VU,115:$VV,116:$VW,117:$VX,118:$VY,119:$VZ,120:$V_,121:$V$,122:$V01,123:$V11,124:$V21,125:$V31},o($Vw1,[2,80]),o($Vw1,$VE1,{73:357,76:359,75:$VF1,77:$VG1}),{15:[1,361],46:$VP,110:$VQ,111:$VR,112:$VS,113:$VT,114:$VU,115:$VV,116:$VW,117:$VX,118:$VY,119:$VZ,120:$V_,121:$V$,122:$V01,123:$V11,124:$V21,125:$V31},{15:[2,97]},o($Vw1,[2,92]),{2:$Vn,11:$Vo,19:74,22:$Vp,29:362,64:72,66:$Vb,81:73,86:$V91,88:$V4,89:$V5,90:$V6,91:$V7,92:$V8,95:45,96:46,97:47,98:48,99:49,100:50,101:51,102:52,103:53,104:54,122:$Vq,126:$Vr,127:$Vs,128:$Vt,129:$Vu,130:$Vv,131:$Vw,133:$Vx,134:$Vy,135:$Vz,136:$VA,137:$VB,138:$VC,139:$VD,140:$VE,141:$VF,142:$VG,143:$VH},o($Vw1,[2,93]),o($Vw1,$Vx1),o($Vw1,[2,95]),{23:[1,363],46:$VP,110:$VQ,111:$VR,112:$VS,113:$VT,114:$VU,115:$VV,116:$VW,117:$VX,118:$VY,119:$VZ,120:$V_,121:$V$,122:$V01,123:$V11,124:$V21,125:$V31},o($Vw1,[2,57]),{14:[1,364],53:365,55:366,56:$VH1},o($Vw1,[2,61]),o($Vw1,[2,78]),{15:[1,368]},o($Vw1,[2,53]),{23:[2,83]},o($Vw1,[2,85]),{2:$Vb1,13:$Vc1,24:369},o($Vw1,$VE1,{76:359,73:370,75:$VF1,77:$VG1}),{22:[1,371]},{2:$Vn,11:$Vo,19:74,22:$Vp,29:372,64:72,66:$Vb,81:73,88:$V4,89:$V5,90:$V6,91:$V7,92:$V8,95:45,96:46,97:47,98:48,99:49,100:50,101:51,102:52,103:53,104:54,122:$Vq,126:$Vr,127:$Vs,128:$Vt,129:$Vu,130:$Vv,131:$Vw,133:$Vx,134:$Vy,135:$Vz,136:$VA,137:$VB,138:$VC,139:$VD,140:$VE,141:$VF,142:$VG,143:$VH},{46:$VP,57:$Vi1,110:$VQ,111:$VR,112:$VS,113:$VT,114:$VU,115:$VV,116:$VW,117:$VX,118:$VY,119:$VZ,120:$V_,121:$V$,122:$V01,123:$V11,124:$V21,125:$V31},o($Vw1,[2,96]),o($Vw1,[2,59]),{14:[2,67],54:373,55:374,56:$VH1,59:[1,375]},o($VI1,[2,63]),{2:$Vn,11:$Vo,19:74,22:$Vp,29:376,64:72,66:$Vb,81:73,88:$V4,89:$V5,90:$V6,91:$V7,92:$V8,95:45,96:46,97:47,98:48,99:49,100:50,101:51,102:52,103:53,104:54,122:$Vq,126:$Vr,127:$Vs,128:$Vt,129:$Vu,130:$Vv,131:$Vw,133:$Vx,134:$Vy,135:$Vz,136:$VA,137:$VB,138:$VC,139:$VD,140:$VE,141:$VF,142:$VG,143:$VH},o($Vw1,[2,52]),o($Vw1,[2,87]),o($Vw1,[2,88]),{2:$Vn,11:$Vo,19:74,22:$Vp,29:377,64:72,66:$Vb,81:73,88:$V4,89:$V5,90:$V6,91:$V7,92:$V8,95:45,96:46,97:47,98:48,99:49,100:50,101:51,102:52,103:53,104:54,122:$Vq,126:$Vr,127:$Vs,128:$Vt,129:$Vu,130:$Vv,131:$Vw,133:$Vx,134:$Vy,135:$Vz,136:$VA,137:$VB,138:$VC,139:$VD,140:$VE,141:$VF,142:$VG,143:$VH},{23:[1,378],46:$VP,110:$VQ,111:$VR,112:$VS,113:$VT,114:$VU,115:$VV,116:$VW,117:$VX,118:$VY,119:$VZ,120:$V_,121:$V$,122:$V01,123:$V11,124:$V21,125:$V31},{14:[1,379]},o($VI1,[2,62]),{57:[1,380]},{46:$VP,57:[1,381],110:$VQ,111:$VR,112:$VS,113:$VT,114:$VU,115:$VV,116:$VW,117:$VX,118:$VY,119:$VZ,120:$V_,121:$V$,122:$V01,123:$V11,124:$V21,125:$V31},{23:[1,382],46:$VP,110:$VQ,111:$VR,112:$VS,113:$VT,114:$VU,115:$VV,116:$VW,117:$VX,118:$VY,119:$VZ,120:$V_,121:$V$,122:$V01,123:$V11,124:$V21,125:$V31},{2:$Vb1,13:$Vc1,24:383},o($Vw1,[2,60]),{2:$Vj1,7:219,11:$Vk1,19:232,30:385,31:218,32:220,33:221,34:222,35:223,36:224,37:225,38:226,39:227,40:228,41:229,42:230,43:$Vl1,44:$Vm1,45:$Vn1,51:$Vo1,58:384,63:10,65:234,68:$Vp1,70:$Vq1,72:$Vr1,78:$Vs1,82:$Vt1,83:$Vu1,88:$V4,89:$V5,90:$V6,91:$V7,92:$V8},{2:$Vj1,7:219,11:$Vk1,19:232,30:385,31:218,32:220,33:221,34:222,35:223,36:224,37:225,38:226,39:227,40:228,41:229,42:230,43:$Vl1,44:$Vm1,45:$Vn1,51:$Vo1,58:386,63:10,65:234,68:$Vp1,70:$Vq1,72:$Vr1,78:$Vs1,82:$Vt1,83:$Vu1,88:$V4,89:$V5,90:$V6,91:$V7,92:$V8},{2:$Vb1,13:$Vc1,24:387},o($Vw1,[2,91]),{14:[2,66]},o($VI1,[2,65],{63:10,7:219,32:220,33:221,34:222,35:223,36:224,37:225,38:226,39:227,40:228,41:229,42:230,19:232,65:234,31:261,2:$Vj1,11:$Vk1,43:$Vl1,44:$Vm1,45:$Vn1,51:$Vo1,68:$Vp1,70:$Vq1,72:$Vr1,78:$Vs1,82:$Vt1,83:$Vu1,88:$V4,89:$V5,90:$V6,91:$V7,92:$V8}),o($VI1,[2,64]),o([2,11,14,43,44,45,51,56,59,68,70,72,75,77,78,82,83,88,89,90,91,92],[2,90])],
defaultActions: {2:[2,1],19:[2,2],37:[2,120],320:[2,82],326:[2,98],343:[2,97],356:[2,83],384:[2,66]},
parseError: function parseError (str, hash) {
    if (hash.recoverable) {
        this.trace(str);
    } else {
        var error = new Error(str);
        error.hash = hash;
        throw error;
    }
},
parse: function parse (input) {
    var self = this,
        stack = [0],
        tstack = [], // token stack
        vstack = [null], // semantic value stack
        lstack = [], // location stack
        table = this.table,
        yytext = '',
        yylineno = 0,
        yyleng = 0,
        recovering = 0,
        TERROR = 2,
        EOF = 1;

    var args = lstack.slice.call(arguments, 1);

    //this.reductionCount = this.shiftCount = 0;

    var lexer = Object.create(this.lexer);
    var sharedState = { yy: {} };
    // copy state
    for (var k in this.yy) {
      if (Object.prototype.hasOwnProperty.call(this.yy, k)) {
        sharedState.yy[k] = this.yy[k];
      }
    }

    lexer.setInput(input, sharedState.yy);
    sharedState.yy.lexer = lexer;
    sharedState.yy.parser = this;
    if (typeof lexer.yylloc == 'undefined') {
        lexer.yylloc = {};
    }
    var yyloc = lexer.yylloc;
    lstack.push(yyloc);

    var ranges = lexer.options && lexer.options.ranges;

    if (typeof sharedState.yy.parseError === 'function') {
        this.parseError = sharedState.yy.parseError;
    } else {
        this.parseError = Object.getPrototypeOf(this).parseError;
    }

    function popStack (n) {
        stack.length = stack.length - 2 * n;
        vstack.length = vstack.length - n;
        lstack.length = lstack.length - n;
    }

_token_stack:
    var lex = function () {
        var token;
        token = lexer.lex() || EOF;
        // if token isn't its numeric value, convert
        if (typeof token !== 'number') {
            token = self.symbols_[token] || token;
        }
        return token;
    }

    var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;
    while (true) {
        // retreive state number from top of stack
        state = stack[stack.length - 1];

        // use default actions if available
        if (this.defaultActions[state]) {
            action = this.defaultActions[state];
        } else {
            if (symbol === null || typeof symbol == 'undefined') {
                symbol = lex();
            }
            // read action for current state and first input
            action = table[state] && table[state][symbol];
        }

_handle_error:
        // handle parse error
        if (typeof action === 'undefined' || !action.length || !action[0]) {
            var error_rule_depth;
            var errStr = '';

            // Return the rule stack depth where the nearest error rule can be found.
            // Return FALSE when no error recovery rule was found.
            function locateNearestErrorRecoveryRule(state) {
                var stack_probe = stack.length - 1;
                var depth = 0;

                // try to recover from error
                for(;;) {
                    // check for error recovery rule in this state
                    if ((TERROR.toString()) in table[state]) {
                        return depth;
                    }
                    if (state === 0 || stack_probe < 2) {
                        return false; // No suitable error recovery rule available.
                    }
                    stack_probe -= 2; // popStack(1): [symbol, action]
                    state = stack[stack_probe];
                    ++depth;
                }
            }

            if (!recovering) {
                // first see if there's any chance at hitting an error recovery rule:
                error_rule_depth = locateNearestErrorRecoveryRule(state);

                // Report error
                expected = [];
                for (p in table[state]) {
                    if (this.terminals_[p] && p > TERROR) {
                        expected.push("'"+this.terminals_[p]+"'");
                    }
                }
                if (lexer.showPosition) {
                    errStr = 'Parse error on line '+(yylineno+1)+":\n"+lexer.showPosition()+"\nExpecting "+expected.join(', ') + ", got '" + (this.terminals_[symbol] || symbol)+ "'";
                } else {
                    errStr = 'Parse error on line '+(yylineno+1)+": Unexpected " +
                                  (symbol == EOF ? "end of input" :
                                              ("'"+(this.terminals_[symbol] || symbol)+"'"));
                }
                this.parseError(errStr, {
                    text: lexer.match,
                    token: this.terminals_[symbol] || symbol,
                    line: lexer.yylineno,
                    loc: yyloc,
                    expected: expected,
                    recoverable: (error_rule_depth !== false)
                });
            } else if (preErrorSymbol !== EOF) {
                error_rule_depth = locateNearestErrorRecoveryRule(state);
            }

            // just recovered from another error
            if (recovering == 3) {
                if (symbol === EOF || preErrorSymbol === EOF) {
                    throw new Error(errStr || 'Parsing halted while starting to recover from another error.');
                }

                // discard current lookahead and grab another
                yyleng = lexer.yyleng;
                yytext = lexer.yytext;
                yylineno = lexer.yylineno;
                yyloc = lexer.yylloc;
                symbol = lex();
            }

            // try to recover from error
            if (error_rule_depth === false) {
                throw new Error(errStr || 'Parsing halted. No suitable error recovery rule available.');
            }
            popStack(error_rule_depth);

            preErrorSymbol = (symbol == TERROR ? null : symbol); // save the lookahead token
            symbol = TERROR;         // insert generic error symbol as new lookahead
            state = stack[stack.length-1];
            action = table[state] && table[state][TERROR];
            recovering = 3; // allow 3 real symbols to be shifted before reporting a new error
        }

        // this shouldn't happen, unless resolve defaults are off
        if (action[0] instanceof Array && action.length > 1) {
            throw new Error('Parse Error: multiple actions possible at state: '+state+', token: '+symbol);
        }

        switch (action[0]) {
            case 1: // shift
                //this.shiftCount++;

                stack.push(symbol);
                vstack.push(lexer.yytext);
                lstack.push(lexer.yylloc);
                stack.push(action[1]); // push state
                symbol = null;
                if (!preErrorSymbol) { // normal execution/no error
                    yyleng = lexer.yyleng;
                    yytext = lexer.yytext;
                    yylineno = lexer.yylineno;
                    yyloc = lexer.yylloc;
                    if (recovering > 0) {
                        recovering--;
                    }
                } else {
                    // error just occurred, resume old lookahead f/ before error
                    symbol = preErrorSymbol;
                    preErrorSymbol = null;
                }
                break;

            case 2:
                // reduce
                //this.reductionCount++;

                len = this.productions_[action[1]][1];

                // perform semantic action
                yyval.$ = vstack[vstack.length-len]; // default to $$ = $1
                // default location, uses first token for firsts, last for lasts
                yyval._$ = {
                    first_line: lstack[lstack.length-(len||1)].first_line,
                    last_line: lstack[lstack.length-1].last_line,
                    first_column: lstack[lstack.length-(len||1)].first_column,
                    last_column: lstack[lstack.length-1].last_column
                };
                if (ranges) {
                  yyval._$.range = [lstack[lstack.length-(len||1)].range[0], lstack[lstack.length-1].range[1]];
                }
                r = this.performAction.apply(yyval, [yytext, yyleng, yylineno, sharedState.yy, action[1], vstack, lstack].concat(args));

                if (typeof r !== 'undefined') {
                    return r;
                }

                // pop off stack
                if (len) {
                    stack = stack.slice(0,-1*len*2);
                    vstack = vstack.slice(0, -1*len);
                    lstack = lstack.slice(0, -1*len);
                }

                stack.push(this.productions_[action[1]][0]);    // push nonterminal (reduce)
                vstack.push(yyval.$);
                lstack.push(yyval._$);
                // goto new state = table[STATE][NONTERMINAL]
                newState = table[stack[stack.length-2]][stack[stack.length-1]];
                stack.push(newState);
                break;

            case 3:
                // accept
                return true;
        }

    }

    return true;
}};

    //const {ErrorCom} = require(['../ts/ErrorCom']);
    /*---CLASES IMPORTADAS---*/
    const {Tipo} = require("../dist/AST/Tipo");
    const {Print} = require("../dist/Instrucciones/Print");
    const {Declaracion} = require("../dist/Instrucciones/Declaracion");
    const {DeclaracionArray} = require("../dist/Instrucciones/DeclaracionArray");
    const {Asignacion} = require("../dist/Instrucciones/Asignacion");
    const {While} = require("../dist/Instrucciones/While");
    const {If} = require("../dist/Instrucciones/If");
    const {DoWhile} = require("../dist/Instrucciones/DoWhile");
    const {Funcion} = require("../dist/Instrucciones/Funcion");
    const {Struct} = require("../dist/Instrucciones/Struct");
    const {Switch} = require("../dist/Instrucciones/Switch");
    const {Ternario} = require("../dist/Expresiones/Ternario");
    const {AccesoAtributo} = require("../dist/Expresiones/AccesoAtributo");
    const {DeclaracionStruct} = require("../dist/Instrucciones/DeclaracionStruct");
    const {SwitchCaso} = require("../dist/Instrucciones/SwitchCaso");
    const {Break} = require("../dist/Instrucciones/Break");
    const {Return} = require("../dist/Instrucciones/Return");
    const {Continue} = require("../dist/Instrucciones/Continue");
    const {FuncionReturn} = require("../dist/Instrucciones/FuncionReturn");
    const {Parametro} = require("../dist/Instrucciones/Parametro");
    const {ParametroReturn} = require("../dist/Expresiones/ParametroReturn");
    const {For} = require("../dist/Instrucciones/For");
    const {Forin} = require("../dist/Instrucciones/Forin");
    const {Primitivo} = require("../dist/Expresiones/Primitivo");
    const {AccesoVariable} = require("../dist/Expresiones/AccesoVariable");
    const {ArrbegEnd} = require("../dist/Expresiones/ArrbegEnd");
    const {Operacion, Operador} = require("../dist/Expresiones/Operacion");
    const {Objeto} = require("../dist/Expresiones/Objeto");
    const {Atributo} = require("../dist/Expresiones/Atributo");
    const {AccesoArray} = require("../dist/Expresiones/AccesoArray");
    const {AccesoAtribArray} = require("../dist/Expresiones/AccesoAtribArray");
    const {AsignacionArray} = require("../dist/Instrucciones/AsignacionArray");
    const {IncrDecr} = require("../dist/Instrucciones/IncrDecr");
    const {Push} = require("../dist/Instrucciones/Push");
    const {Pop} = require("../dist/Instrucciones/Pop");
    const {OperacionCadena, OperadorCadena} = require("../dist/Expresiones/OperacionCadena");
    const {OperadorNativa, OperacionNativa} = require("../dist/Expresiones/OperacionNativa");
    const {ConcatenacionString} = require("../dist/Expresiones/ConcatenacionString");
    const {ErrorG} = require("../dist/Objetos/ErrorG");

    /*---CODIGO INCRUSTADO---*/
    var errores = [];
    var elementos = [];

    function genError(desc,linea,columna){
        let erro =  new ErrorG('sintactico',desc,linea,columna);
        errores.push(erro);
    }

    function reiniciarArrays(instrucciones){
        var elemento = {'id':'instrucciones','cont':instrucciones};
        var elemento1 = {'id':'listaErrores','cont':errores};
        elementos.push(elemento);
        elementos.push(elemento1);
        var aux = elementos;
        elementos = [];
        errores = [];
        return aux;
    }
/* generated by jison-lex 0.3.4 */
var lexer = (function(){
var lexer = ({

EOF:1,

parseError:function parseError(str, hash) {
        if (this.yy.parser) {
            this.yy.parser.parseError(str, hash);
        } else {
            throw new Error(str);
        }
    },

// resets the lexer, sets new input
setInput:function (input, yy) {
        this.yy = yy || this.yy || {};
        this._input = input;
        this._more = this._backtrack = this.done = false;
        this.yylineno = this.yyleng = 0;
        this.yytext = this.matched = this.match = '';
        this.conditionStack = ['INITIAL'];
        this.yylloc = {
            first_line: 1,
            first_column: 0,
            last_line: 1,
            last_column: 0
        };
        if (this.options.ranges) {
            this.yylloc.range = [0,0];
        }
        this.offset = 0;
        return this;
    },

// consumes and returns one char from the input
input:function () {
        var ch = this._input[0];
        this.yytext += ch;
        this.yyleng++;
        this.offset++;
        this.match += ch;
        this.matched += ch;
        var lines = ch.match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno++;
            this.yylloc.last_line++;
        } else {
            this.yylloc.last_column++;
        }
        if (this.options.ranges) {
            this.yylloc.range[1]++;
        }

        this._input = this._input.slice(1);
        return ch;
    },

// unshifts one char (or a string) into the input
unput:function (ch) {
        var len = ch.length;
        var lines = ch.split(/(?:\r\n?|\n)/g);

        this._input = ch + this._input;
        this.yytext = this.yytext.substr(0, this.yytext.length - len);
        //this.yyleng -= len;
        this.offset -= len;
        var oldLines = this.match.split(/(?:\r\n?|\n)/g);
        this.match = this.match.substr(0, this.match.length - 1);
        this.matched = this.matched.substr(0, this.matched.length - 1);

        if (lines.length - 1) {
            this.yylineno -= lines.length - 1;
        }
        var r = this.yylloc.range;

        this.yylloc = {
            first_line: this.yylloc.first_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.first_column,
            last_column: lines ?
                (lines.length === oldLines.length ? this.yylloc.first_column : 0)
                 + oldLines[oldLines.length - lines.length].length - lines[0].length :
              this.yylloc.first_column - len
        };

        if (this.options.ranges) {
            this.yylloc.range = [r[0], r[0] + this.yyleng - len];
        }
        this.yyleng = this.yytext.length;
        return this;
    },

// When called from action, caches matched text and appends it on next action
more:function () {
        this._more = true;
        return this;
    },

// When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.
reject:function () {
        if (this.options.backtrack_lexer) {
            this._backtrack = true;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });

        }
        return this;
    },

// retain first n characters of the match
less:function (n) {
        this.unput(this.match.slice(n));
    },

// displays already matched input, i.e. for error messages
pastInput:function () {
        var past = this.matched.substr(0, this.matched.length - this.match.length);
        return (past.length > 20 ? '...':'') + past.substr(-20).replace(/\n/g, "");
    },

// displays upcoming input, i.e. for error messages
upcomingInput:function () {
        var next = this.match;
        if (next.length < 20) {
            next += this._input.substr(0, 20-next.length);
        }
        return (next.substr(0,20) + (next.length > 20 ? '...' : '')).replace(/\n/g, "");
    },

// displays the character position where the lexing error occurred, i.e. for error messages
showPosition:function () {
        var pre = this.pastInput();
        var c = new Array(pre.length + 1).join("-");
        return pre + this.upcomingInput() + "\n" + c + "^";
    },

// test the lexed token: return FALSE when not a match, otherwise return token
test_match:function(match, indexed_rule) {
        var token,
            lines,
            backup;

        if (this.options.backtrack_lexer) {
            // save context
            backup = {
                yylineno: this.yylineno,
                yylloc: {
                    first_line: this.yylloc.first_line,
                    last_line: this.last_line,
                    first_column: this.yylloc.first_column,
                    last_column: this.yylloc.last_column
                },
                yytext: this.yytext,
                match: this.match,
                matches: this.matches,
                matched: this.matched,
                yyleng: this.yyleng,
                offset: this.offset,
                _more: this._more,
                _input: this._input,
                yy: this.yy,
                conditionStack: this.conditionStack.slice(0),
                done: this.done
            };
            if (this.options.ranges) {
                backup.yylloc.range = this.yylloc.range.slice(0);
            }
        }

        lines = match[0].match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno += lines.length;
        }
        this.yylloc = {
            first_line: this.yylloc.last_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.last_column,
            last_column: lines ?
                         lines[lines.length - 1].length - lines[lines.length - 1].match(/\r?\n?/)[0].length :
                         this.yylloc.last_column + match[0].length
        };
        this.yytext += match[0];
        this.match += match[0];
        this.matches = match;
        this.yyleng = this.yytext.length;
        if (this.options.ranges) {
            this.yylloc.range = [this.offset, this.offset += this.yyleng];
        }
        this._more = false;
        this._backtrack = false;
        this._input = this._input.slice(match[0].length);
        this.matched += match[0];
        token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);
        if (this.done && this._input) {
            this.done = false;
        }
        if (token) {
            return token;
        } else if (this._backtrack) {
            // recover context
            for (var k in backup) {
                this[k] = backup[k];
            }
            return false; // rule action called reject() implying the next rule should be tested instead.
        }
        return false;
    },

// return next match in input
next:function () {
        if (this.done) {
            return this.EOF;
        }
        if (!this._input) {
            this.done = true;
        }

        var token,
            match,
            tempMatch,
            index;
        if (!this._more) {
            this.yytext = '';
            this.match = '';
        }
        var rules = this._currentRules();
        for (var i = 0; i < rules.length; i++) {
            tempMatch = this._input.match(this.rules[rules[i]]);
            if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
                match = tempMatch;
                index = i;
                if (this.options.backtrack_lexer) {
                    token = this.test_match(tempMatch, rules[i]);
                    if (token !== false) {
                        return token;
                    } else if (this._backtrack) {
                        match = false;
                        continue; // rule action called reject() implying a rule MISmatch.
                    } else {
                        // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
                        return false;
                    }
                } else if (!this.options.flex) {
                    break;
                }
            }
        }
        if (match) {
            token = this.test_match(match, rules[index]);
            if (token !== false) {
                return token;
            }
            // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
            return false;
        }
        if (this._input === "") {
            return this.EOF;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });
        }
    },

// return next match that has a token
lex:function lex () {
        var r = this.next();
        if (r) {
            return r;
        } else {
            return this.lex();
        }
    },

// activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)
begin:function begin (condition) {
        this.conditionStack.push(condition);
    },

// pop the previously active lexer condition state off the condition stack
popState:function popState () {
        var n = this.conditionStack.length - 1;
        if (n > 0) {
            return this.conditionStack.pop();
        } else {
            return this.conditionStack[0];
        }
    },

// produce the lexer rule set which is active for the currently active lexer condition state
_currentRules:function _currentRules () {
        if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {
            return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;
        } else {
            return this.conditions["INITIAL"].rules;
        }
    },

// return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available
topState:function topState (n) {
        n = this.conditionStack.length - 1 - Math.abs(n || 0);
        if (n >= 0) {
            return this.conditionStack[n];
        } else {
            return "INITIAL";
        }
    },

// alias for begin(condition)
pushState:function pushState (condition) {
        this.begin(condition);
    },

// return the number of states currently on the stack
stateStackSize:function stateStackSize() {
        return this.conditionStack.length;
    },
options: {"ranges":true},
performAction: function anonymous(yy,yy_,$avoiding_name_collisions,YY_START) {
var YYSTATE=YY_START;
switch($avoiding_name_collisions) {
case 0:/* skip comments */
break;
case 1:this.begin('comment');
break;
case 2:this.popState();
break;
case 3:/* skip comment content*/
break;
case 4:/* skip whitespace */
break;
case 5:return 13; 
break;
case 6:return 14;
break;
case 7:return 22;
break;
case 8:return 23;
break;
case 9:return 66;
break;
case 10:return 67;
break;
case 11:return 18;
break;
case 12:return 57;
break;
case 13:return 15;
break;
case 14:return "PRINTLN";
break;
case 15:return "PRINT";
break;
case 16:return 20;
break;
case 17:return 21;
break;
case 18:return 72;
break;
case 19:return 77;
break;
case 20:return 75;
break;
case 21:return 82;
break;
case 22:return 83;
break;
case 23:return 78;
break;
case 24:return 43;
break;
case 25:return 44;
break;
case 26:return 51;
break;
case 27:return 56;
break;
case 28:return 59;
break;
case 29:return 138;
break;
case 30:return 137;
break;
case 31:return 45;
break;
case 32:return 91;
break;
case 33:return 90;
break;
case 34:return 89;
break;
case 35:return 92;
break;
case 36:return 88;
break;
case 37:return 10;
break;
case 38:return 86;
break;
case 39:return 87;
break;
case 40:return 'STR_FUNCTION';
break;
case 41:return 80;
break;
case 42:return 127;
break;
case 43:return 128;
break;
case 44:return 129;
break;
case 45:return 130;
break;
case 46:return 131;
break;
case 47:return 132;
break;
case 48:return 133;
break;
case 49:return 134;
break;
case 50:return 135;
break;
case 51:return 136;
break;
case 52:return 47;
break;
case 53:return 48;
break;
case 54:return 108;
break;
case 55:return 109;
break;
case 56:return 105;
break;
case 57:return 106;
break;
case 58:return 107;
break;
case 59:return 116;
break;
case 60:return 117;
break;
case 61:return 113;
break;
case 62:return 115;
break;
case 63:return 118;
break;
case 64:return 114;
break;
case 65:return 112;
break;
case 66:return 111;
break;
case 67:return 123;
break;
case 68:return 126;
break;
case 69:return 94;
break;
case 70:return 'OP_MASIG';
break;
case 71:return 'OP_RESIG';
break;
case 72:return 'OP_PORIG';
break;
case 73:return 'OP_DIVIG';
break;
case 74:return 'OP_MODIG';
break;
case 75:return 49;
break;
case 76:return 121;
break;
case 77:return 50;
break;
case 78:return 122;
break;
case 79:return 119;
break;
case 80:return 120;
break;
case 81:return 125;
break;
case 82:return 46;
break;
case 83:return 124;
break;
case 84:return 110;
break;
case 85:return 'OP_HASH';
break;
case 86:return 143;
break;
case 87:return 11;
break;
case 88:return 11;
break;
case 89:return 140;
break;
case 90:return 139;
break;
case 91:yy_.yytext = yy_.yytext.slice(1,-1); return 141;
break;
case 92:yy_.yytext = yy_.yytext.slice(1,-1); return 141;
break;
case 93:return 142;
break;
case 94:return 142;
break;
case 95:return 4;
break;
case 96:return 'INVALID';
break;
}
},
rules: [/^(?:\/\/.*)/,/^(?:\/\*)/,/^(?:\*\/)/,/^(?:.)/,/^(?:\s+)/,/^(?:\{)/,/^(?:\})/,/^(?:\()/,/^(?:\))/,/^(?:\[)/,/^(?:\])/,/^(?:,)/,/^(?::)/,/^(?:;)/,/^(?:println\b)/,/^(?:print\b)/,/^(?:void\b)/,/^(?:main\b)/,/^(?:if\b)/,/^(?:elseif\b)/,/^(?:else\b)/,/^(?:while\b)/,/^(?:do\b)/,/^(?:for\b)/,/^(?:break\b)/,/^(?:continue\b)/,/^(?:switch\b)/,/^(?:case\b)/,/^(?:default\b)/,/^(?:true\b)/,/^(?:false\b)/,/^(?:return\b)/,/^(?:boolean\b)/,/^(?:int\b)/,/^(?:double\b)/,/^(?:char\b)/,/^(?:String\b)/,/^(?:struct\b)/,/^(?:begin\b)/,/^(?:end\b)/,/^(?:function\b)/,/^(?:in\b)/,/^(?:pow\b)/,/^(?:sqrt\b)/,/^(?:sin\b)/,/^(?:cos\b)/,/^(?:tan\b)/,/^(?:parse\b)/,/^(?:toInt\b)/,/^(?:toDouble\b)/,/^(?:string\b)/,/^(?:typeof\b)/,/^(?:push\b)/,/^(?:pop\b)/,/^(?:caracterOfPosition\b)/,/^(?:subString\b)/,/^(?:length\b)/,/^(?:toUppercase\b)/,/^(?:toLowercase\b)/,/^(?:<=)/,/^(?:<)/,/^(?:==)/,/^(?:>=)/,/^(?:>)/,/^(?:!=)/,/^(?:\|\|)/,/^(?:&&)/,/^(?:&)/,/^(?:!)/,/^(?:=)/,/^(?:\+=)/,/^(?:-=)/,/^(?:\*=)/,/^(?:\/=)/,/^(?:%=)/,/^(?:\+\+)/,/^(?:\+)/,/^(?:--)/,/^(?:-)/,/^(?:\*)/,/^(?:\/)/,/^(?:%)/,/^(?:\.)/,/^(?:\^)/,/^(?:\?)/,/^(?:#)/,/^(?:null\b)/,/^(?:[A-Z][a-zA-Z0-9_]*)/,/^(?:[a-zA-Z][a-zA-Z0-9_]*)/,/^(?:(((0|([1-9])([0-9])*))\.((0|([1-9])([0-9])*))?(([Ee][+-]?((0|([1-9])([0-9])*))))?[fFdD]?|\.((0|([1-9])([0-9])*))(([Ee][+-]?((0|([1-9])([0-9])*))))?[fFdD]?|((0|([1-9])([0-9])*))(([Ee][+-]?((0|([1-9])([0-9])*))))[fFdD]?|((0|([1-9])([0-9])*))(([Ee][+-]?((0|([1-9])([0-9])*))))?[fFdD])(?=([^\w]|$)))/,/^(?:((0|([1-9])([0-9])*)))/,/^(?:"")/,/^(?:"([^"]|(\\.))*")/,/^(?:\\'([^']|(\\.))*\\')/,/^(?:\\'\\')/,/^(?:$)/,/^(?:.)/],
conditions: {"comment":{"rules":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96],"inclusive":true},"INITIAL":{"rules":[0,1,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96],"inclusive":true}}
});
return lexer;
})();
parser.lexer = lexer;
function Parser () {
  this.yy = {};
}
Parser.prototype = parser;parser.Parser = Parser;
return new Parser;
})();


if (typeof require !== 'undefined' && typeof exports !== 'undefined') {
exports.parser = Gramatica;
exports.Parser = Gramatica.Parser;
exports.parse = function () { return Gramatica.parse.apply(Gramatica, arguments); };
exports.main = function commonjsMain (args) {
    if (!args[1]) {
        console.log('Usage: '+args[0]+' FILE');
        process.exit(1);
    }
    var source = require('fs').readFileSync(require('path').normalize(args[1]), "utf8");
    return exports.parser.parse(source);
};
if (typeof module !== 'undefined' && require.main === module) {
  exports.main(process.argv.slice(1));
}
}